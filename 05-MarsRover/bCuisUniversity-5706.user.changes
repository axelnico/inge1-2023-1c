

----SNAPSHOT----(29 March 2023 22:10:14) CuisUniversity-5706-backup.image priorSource: 8802450!

----End fileIn of /Users/nico/Documents/inge1/2023/macos64/Peano.st----!

----End fileIn of /Users/nico/Documents/inge1/2023/macos64/Natural Numbers.st----!
!II class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:16:32' prior: 50607657!
* aNumber
	
	^aNumber + aNumber *previous.! !
!II class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:17:11' prior: 50608022!
* aNumber
	
	^aNumber + (aNumber * self previous).! !
!II class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:20:46' prior: 50607668!
- aNumber
	
	aNumber substractFrom: self.! !

II - I!
!I class methodsFor: 'as yet unclassified' stamp: 'NB 3/29/2023 22:21:04'!
substractFrom: anII 
	self shouldBeImplemented.! !
!II class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:21:42'!
substractForm: aNumber

	^self previous - aNumber previous! !
!II class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:22:04'!
substractFrom: aNumber

	^self previous - aNumber previous! !

!methodRemoval: II class #substractForm: stamp: 'NB 3/29/2023 22:22:08'!
substractForm: aNumber

	^self previous - aNumber previous!
!I class methodsFor: 'Operadores Aritmeticos' stamp: 'NB 3/29/2023 22:23:32' prior: 50608037!
substractFrom: aNumber
	
	^aNumber previous.! !
!II class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:26:52'!
divideFrom: aNumber

	^I + (aNumber - self / self).! !
!I class methodsFor: 'Operadores Aritmeticos' stamp: 'NB 3/29/2023 22:27:32'!
divideFrom: aNumber
	
	^aNumber.! !
!II class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:28:44' prior: 50607674!
/ aNumber
	
	aNumber = self ifTrue: [^I].
	^aNumber divideFrom: self.! !

!classRemoval: #IIIIIIII stamp: 'NB 3/29/2023 22:29:01'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #IIIIIII stamp: 'NB 3/29/2023 22:29:01'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!
!II class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:29:44' prior: 50607681!
next

	next ifNil: [
		next := self cloneNamed: (self printString, 'I').
		next previous: self.
	].
	^next. ! !

!methodRemoval: II class #descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor stamp: 'NB 3/29/2023 22:30:01'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor
	^ #noSePuedeDividirPorUnNumeroMayor!

!methodRemoval: II class #previous: stamp: 'NB 3/29/2023 22:30:01'!
previous: aNumber

	previous:= aNumber.!

!methodRemoval: II class #probarDivisionCon:yResultado: stamp: 'NB 3/29/2023 22:30:01'!
probarDivisionCon: unNumeroDePeano yResultado: resultadoAProbar
	|resultadoDivision|
	(resultadoAProbar * unNumeroDePeano > self)
	ifTrue: [
		resultadoDivision := resultadoAProbar previous
	] ifFalse: [
		resultadoDivision := self probarDivisionCon: unNumeroDePeano yResultado: resultadoAProbar next
	].
	^ resultadoDivision!

!methodRemoval: II class #removeAllNext stamp: 'NB 3/29/2023 22:30:01'!
removeAllNext
	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.
	]!

!methodRemoval: II class #restameA: stamp: 'NB 3/29/2023 22:30:01'!
restameA: unNumeroDePeano
	^ self previous restameA: unNumeroDePeano previous!

!methodRemoval: II class #> stamp: 'NB 3/29/2023 22:30:06'!
> unNumeroDePeano
	| esMayor |
	(unNumeroDePeano = I)
	ifTrue: [
		esMayor := true
	] ifFalse: [
		esMayor := self previous > unNumeroDePeano previous
	].
	^ esMayor!

!methodRemoval: I class #descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor stamp: 'NB 3/29/2023 22:30:14'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor
	^ #noSePuedeDividirPorUnNumeroMayor.!

!methodRemoval: I class #descripcionDeErrorDeNumerosNegativosNoSoportados stamp: 'NB 3/29/2023 22:30:14'!
descripcionDeErrorDeNumerosNegativosNoSoportados
	^ #numerosNegativosNoSoportados!

!methodRemoval: I class #restameA: stamp: 'NB 3/29/2023 22:30:14'!
restameA: unNumeroDePeano
	^ unNumeroDePeano previous!

!methodRemoval: I class #> stamp: 'NB 3/29/2023 22:30:17'!
> unNumeroDePeano
	^ false!

!methodRemoval: I class #- stamp: 'NB 3/29/2023 22:30:50'!
- unNumeroDePeano
	^ self error: #numerosNegativosNoSoportados!

!classRemoval: #IIIIII stamp: 'NB 3/29/2023 22:31:30'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIII stamp: 'NB 3/29/2023 22:31:35'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIII stamp: 'NB 3/29/2023 22:31:40'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'NB 3/29/2023 22:31:43'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:32:02'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:32:02'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:32:02'!
* aNumber
	
	^aNumber + (aNumber * self previous).! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:32:02'!
+ aNumber
	
	^previous + aNumber next.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:32:02'!
- aNumber
	
	aNumber substractFrom: self.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:32:02'!
/ aNumber
	
	aNumber = self ifTrue: [^I].
	^aNumber divideFrom: self.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:32:02'!
divideFrom: aNumber

	^I + (aNumber - self / self).! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:32:02'!
next

	next ifNil: [
		next := self cloneNamed: (self printString, 'I').
		next previous: self.
	].
	^next. ! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:32:02'!
previous

	^previous.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:32:02'!
substractFrom: aNumber

	^self previous - aNumber previous! !
!II class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:17'!
previous: aNumber

	previous:= aNumber.! !

!classRemoval: #III stamp: 'NB 3/29/2023 22:33:23'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:33:35'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:33:35'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:35'!
* aNumber
	
	^aNumber + (aNumber * self previous).! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:35'!
+ aNumber
	
	^previous + aNumber next.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:35'!
- aNumber
	
	aNumber substractFrom: self.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:35'!
/ aNumber
	
	aNumber = self ifTrue: [^I].
	^aNumber divideFrom: self.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:35'!
divideFrom: aNumber

	^I + (aNumber - self / self).! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:35'!
next

	next ifNil: [
		next := self cloneNamed: (self printString, 'I').
		next previous: self.
	].
	^next. ! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:35'!
previous

	^previous.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:35'!
previous: aNumber

	previous:= aNumber.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:35'!
substractFrom: aNumber

	^self previous - aNumber previous! !

III * II!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIII category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:33:44'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:33:44'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
* aNumber
	
	^aNumber + (aNumber * self previous).! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
+ aNumber
	
	^previous + aNumber next.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
- aNumber
	
	aNumber substractFrom: self.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
/ aNumber
	
	aNumber = self ifTrue: [^I].
	^aNumber divideFrom: self.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
divideFrom: aNumber

	^I + (aNumber - self / self).! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
next

	next ifNil: [
		next := self cloneNamed: (self printString, 'I').
		next previous: self.
	].
	^next. ! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
previous

	^previous.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
previous: aNumber

	previous:= aNumber.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
substractFrom: aNumber

	^self previous - aNumber previous! !

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIII category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:33:44'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:33:44'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
* aNumber
	
	^aNumber + (aNumber * self previous).! !
!IIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
+ aNumber
	
	^previous + aNumber next.! !
!IIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
- aNumber
	
	aNumber substractFrom: self.! !
!IIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
/ aNumber
	
	aNumber = self ifTrue: [^I].
	^aNumber divideFrom: self.! !
!IIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
divideFrom: aNumber

	^I + (aNumber - self / self).! !
!IIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
next

	next ifNil: [
		next := self cloneNamed: (self printString, 'I').
		next previous: self.
	].
	^next. ! !
!IIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
previous

	^previous.! !
!IIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
previous: aNumber

	previous:= aNumber.! !
!IIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
substractFrom: aNumber

	^self previous - aNumber previous! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIII category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:33:44'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:33:44'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
* aNumber
	
	^aNumber + (aNumber * self previous).! !
!IIIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
+ aNumber
	
	^previous + aNumber next.! !
!IIIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
- aNumber
	
	aNumber substractFrom: self.! !
!IIIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
/ aNumber
	
	aNumber = self ifTrue: [^I].
	^aNumber divideFrom: self.! !
!IIIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
divideFrom: aNumber

	^I + (aNumber - self / self).! !
!IIIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
next

	next ifNil: [
		next := self cloneNamed: (self printString, 'I').
		next previous: self.
	].
	^next. ! !
!IIIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
previous

	^previous.! !
!IIIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
previous: aNumber

	previous:= aNumber.! !
!IIIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:33:44'!
substractFrom: aNumber

	^self previous - aNumber previous! !

IIIIII / II !

IIIIII / III!

!classRemoval: #IIIIII stamp: 'NB 3/29/2023 22:39:42'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIII stamp: 'NB 3/29/2023 22:39:45'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIII stamp: 'NB 3/29/2023 22:39:48'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'NB 3/29/2023 22:39:51'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:40:07'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:40:07'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:40:07'!
* aNumber
	
	^aNumber + (aNumber * self previous).! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:40:07'!
+ aNumber
	
	^previous + aNumber next.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:40:07'!
- aNumber
	
	aNumber substractFrom: self.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:40:07'!
/ aNumber
	
	aNumber = self ifTrue: [^I].
	^aNumber divideFrom: self.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:40:07'!
divideFrom: aNumber

	^I + (aNumber - self / self).! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:40:07'!
next

	next ifNil: [
		next := self cloneNamed: (self printString, 'I').
		next previous: self.
	].
	^next. ! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:40:07'!
previous

	^previous.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:40:07'!
previous: aNumber

	previous:= aNumber.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:40:07'!
substractFrom: aNumber

	^self previous - aNumber previous! !

III / III!

II * II!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIII category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:40:25'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:40:25'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:40:25'!
* aNumber
	
	^aNumber + (aNumber * self previous).! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:40:25'!
+ aNumber
	
	^previous + aNumber next.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:40:25'!
- aNumber
	
	aNumber substractFrom: self.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:40:25'!
/ aNumber
	
	aNumber = self ifTrue: [^I].
	^aNumber divideFrom: self.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:40:25'!
divideFrom: aNumber

	^I + (aNumber - self / self).! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:40:25'!
next

	next ifNil: [
		next := self cloneNamed: (self printString, 'I').
		next previous: self.
	].
	^next. ! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:40:25'!
previous

	^previous.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:40:25'!
previous: aNumber

	previous:= aNumber.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:40:25'!
substractFrom: aNumber

	^self previous - aNumber previous! !

IIII / II!
!II class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:46:10' prior: 50608047!
substractFrom: aNumber

	^aNumber previous -  self previous! !

!classRemoval: #IIII stamp: 'NB 3/29/2023 22:46:16'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'NB 3/29/2023 22:46:20'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:46:37'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:46:37'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:46:37'!
* aNumber
	
	^aNumber + (aNumber * self previous).! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:46:37'!
+ aNumber
	
	^previous + aNumber next.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:46:37'!
- aNumber
	
	aNumber substractFrom: self.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:46:37'!
/ aNumber
	
	aNumber = self ifTrue: [^I].
	^aNumber divideFrom: self.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:46:37'!
divideFrom: aNumber

	^I + (aNumber - self / self).! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:46:37'!
next

	next ifNil: [
		next := self cloneNamed: (self printString, 'I').
		next previous: self.
	].
	^next. ! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:46:37'!
previous

	^previous.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:46:37'!
previous: aNumber

	previous:= aNumber.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:46:37'!
substractFrom: aNumber

	^aNumber previous -  self previous! !

II * II!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIII category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:46:45'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:46:45'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:46:45'!
* aNumber
	
	^aNumber + (aNumber * self previous).! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:46:45'!
+ aNumber
	
	^previous + aNumber next.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:46:45'!
- aNumber
	
	aNumber substractFrom: self.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:46:45'!
/ aNumber
	
	aNumber = self ifTrue: [^I].
	^aNumber divideFrom: self.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:46:45'!
divideFrom: aNumber

	^I + (aNumber - self / self).! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:46:45'!
next

	next ifNil: [
		next := self cloneNamed: (self printString, 'I').
		next previous: self.
	].
	^next. ! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:46:45'!
previous

	^previous.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:46:45'!
previous: aNumber

	previous:= aNumber.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:46:45'!
substractFrom: aNumber

	^aNumber previous -  self previous! !

IIII / II!

IIII - II!
!II class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:55:40' prior: 50608032!
- aNumber
	
	^aNumber substractFrom: self.! !

!classRemoval: #IIII stamp: 'NB 3/29/2023 22:56:04'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'NB 3/29/2023 22:56:08'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:56:21'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:56:21'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:21'!
* aNumber
	
	^aNumber + (aNumber * self previous).! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:22'!
+ aNumber
	
	^previous + aNumber next.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:22'!
- aNumber
	
	^aNumber substractFrom: self.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:22'!
/ aNumber
	
	aNumber = self ifTrue: [^I].
	^aNumber divideFrom: self.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:22'!
divideFrom: aNumber

	^I + (aNumber - self / self).! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:22'!
next

	next ifNil: [
		next := self cloneNamed: (self printString, 'I').
		next previous: self.
	].
	^next. ! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:22'!
previous

	^previous.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:22'!
previous: aNumber

	previous:= aNumber.! !
!III class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:22'!
substractFrom: aNumber

	^aNumber previous -  self previous! !

II * II!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIII category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:56:27'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:56:27'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:27'!
* aNumber
	
	^aNumber + (aNumber * self previous).! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:27'!
+ aNumber
	
	^previous + aNumber next.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:27'!
- aNumber
	
	^aNumber substractFrom: self.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:27'!
/ aNumber
	
	aNumber = self ifTrue: [^I].
	^aNumber divideFrom: self.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:27'!
divideFrom: aNumber

	^I + (aNumber - self / self).! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:27'!
next

	next ifNil: [
		next := self cloneNamed: (self printString, 'I').
		next previous: self.
	].
	^next. ! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:27'!
previous

	^previous.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:27'!
previous: aNumber

	previous:= aNumber.! !
!IIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:27'!
substractFrom: aNumber

	^aNumber previous -  self previous! !

IIII - II!

IIII - III!

III * II!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIII category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:56:42'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:56:42'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:42'!
* aNumber
	
	^aNumber + (aNumber * self previous).! !
!IIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:42'!
+ aNumber
	
	^previous + aNumber next.! !
!IIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:42'!
- aNumber
	
	^aNumber substractFrom: self.! !
!IIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:42'!
/ aNumber
	
	aNumber = self ifTrue: [^I].
	^aNumber divideFrom: self.! !
!IIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:42'!
divideFrom: aNumber

	^I + (aNumber - self / self).! !
!IIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:42'!
next

	next ifNil: [
		next := self cloneNamed: (self printString, 'I').
		next previous: self.
	].
	^next. ! !
!IIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:42'!
previous

	^previous.! !
!IIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:42'!
previous: aNumber

	previous:= aNumber.! !
!IIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:42'!
substractFrom: aNumber

	^aNumber previous -  self previous! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIII category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:56:42'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: 'Natural Numbers' stamp: 'NB 3/29/2023 22:56:42'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:42'!
* aNumber
	
	^aNumber + (aNumber * self previous).! !
!IIIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:42'!
+ aNumber
	
	^previous + aNumber next.! !
!IIIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:42'!
- aNumber
	
	^aNumber substractFrom: self.! !
!IIIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:42'!
/ aNumber
	
	aNumber = self ifTrue: [^I].
	^aNumber divideFrom: self.! !
!IIIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:42'!
divideFrom: aNumber

	^I + (aNumber - self / self).! !
!IIIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:42'!
next

	next ifNil: [
		next := self cloneNamed: (self printString, 'I').
		next previous: self.
	].
	^next. ! !
!IIIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:42'!
previous

	^previous.! !
!IIIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:42'!
previous: aNumber

	previous:= aNumber.! !
!IIIIII class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/29/2023 22:56:42'!
substractFrom: aNumber

	^aNumber previous -  self previous! !

III / III!

IIII / II!

IIIIII / II!

IIIIII / III!

IIIIII / IIIIII!

III * I!

I * III!

----SNAPSHOT----(29 March 2023 22:57:30) CuisUniversity-5706-backup.image priorSource: 8805068!

----SNAPSHOT----(29 March 2023 22:57:33) CuisUniversity-5706-backup.image priorSource: 8876601!

----SNAPSHOT----(29 March 2023 22:58:09) CuisUniversity-5706-backup.image priorSource: 8876698!

----SNAPSHOT----(29 March 2023 22:58:12) CuisUniversity-5706-backup.image priorSource: 8876795!

----SNAPSHOT----(29 March 2023 22:58:16) CuisUniversity-5706-backup.image priorSource: 8876892!
!II class methodsFor: '--** private fileout/in **--' stamp: 'NB 3/29/2023 22:58:28' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'NB 3/29/2023 22:58:28' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'NB 3/29/2023 22:58:28' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	previous := III.! !
!IIIII class methodsFor: '--** private fileout/in **--' stamp: 'NB 3/29/2023 22:58:28' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIII.
	previous := IIII.! !
!IIIIII class methodsFor: '--** private fileout/in **--' stamp: 'NB 3/29/2023 22:58:28' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := IIIII.! !

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'NB 3/29/2023 22:58:28'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'NB 3/29/2023 22:58:28'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'NB 3/29/2023 22:58:28'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	previous := III.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'NB 3/29/2023 22:58:28'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIII.
	previous := IIII.!

!methodRemoval: IIIIII class #initializeCollaboratorsFromFile stamp: 'NB 3/29/2023 22:58:28'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := IIIII.!
!II class methodsFor: '--** private fileout/in **--' stamp: 'NB 3/29/2023 22:58:33' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'NB 3/29/2023 22:58:33' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'NB 3/29/2023 22:58:33' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	previous := III.! !
!IIIII class methodsFor: '--** private fileout/in **--' stamp: 'NB 3/29/2023 22:58:33' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIII.
	previous := IIII.! !
!IIIIII class methodsFor: '--** private fileout/in **--' stamp: 'NB 3/29/2023 22:58:33' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := IIIII.! !

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'NB 3/29/2023 22:58:33'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'NB 3/29/2023 22:58:33'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'NB 3/29/2023 22:58:33'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	previous := III.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'NB 3/29/2023 22:58:33'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIII.
	previous := IIII.!

!methodRemoval: IIIIII class #initializeCollaboratorsFromFile stamp: 'NB 3/29/2023 22:58:33'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := IIIII.!
!II class methodsFor: '--** private fileout/in **--' stamp: 'NB 3/29/2023 22:58:44' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'NB 3/29/2023 22:58:44' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'NB 3/29/2023 22:58:44' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	previous := III.! !
!IIIII class methodsFor: '--** private fileout/in **--' stamp: 'NB 3/29/2023 22:58:44' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIII.
	previous := IIII.! !
!IIIIII class methodsFor: '--** private fileout/in **--' stamp: 'NB 3/29/2023 22:58:44' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := IIIII.! !

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'NB 3/29/2023 22:58:44'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'NB 3/29/2023 22:58:44'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'NB 3/29/2023 22:58:44'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	previous := III.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'NB 3/29/2023 22:58:44'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIII.
	previous := IIII.!

!methodRemoval: IIIIII class #initializeCollaboratorsFromFile stamp: 'NB 3/29/2023 22:58:44'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := IIIII.!

----SNAPSHOT----(29 March 2023 22:58:47) CuisUniversity-5706-backup.image priorSource: 8876989!

----SNAPSHOT----(29 March 2023 22:58:49) CuisUniversity-5706-backup.image priorSource: 8884300!

----STARTUP---- (30 March 2023 20:24:49) as /Users/nico/Documents/inge1/2023/macos64/CuisUniversity-5706.image!


II * I!

I * II!

III * I!

II / III!
!I class methodsFor: 'Operadores Aritmeticos' stamp: 'NB 3/30/2023 20:47:32' prior: 50607630!
/ aNaturalNumber
	^ aNaturalNumber divideFrom: self.! !

III / III !

----SNAPSHOT----(30 March 2023 21:17:31) CuisUniversity-5706.image priorSource: 8884397!

!classRemoval: #IIIIII stamp: 'NB 3/30/2023 21:28:27'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIII stamp: 'NB 3/30/2023 21:28:32'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIII stamp: 'NB 3/30/2023 21:28:37'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'NB 3/30/2023 21:28:46'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!
!II class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/30/2023 21:29:54' prior: 50608088!
next

	next ifNil: [
		next := self createChildNamed: (self name, 'I').
		next previous: self.
	].
	^next. ! !
!II class methodsFor: 'Operaciones Aritmeticas' stamp: 'NB 3/30/2023 21:45:17' prior: 50609329!
next

	next ifNil: [
		next := II createChildNamed: (self name, 'I').
		next previous: self.
	].
	^next. ! !

II next next!

!classDefinition: #III category: 'Natural Numbers' stamp: 'NB 3/30/2023 21:45:22'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'NB 3/30/2023 21:45:22'!
III class
	instanceVariableNames: ''!

!classDefinition: #IIII category: 'Natural Numbers' stamp: 'NB 3/30/2023 21:45:22'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: 'IIII class' category: 'Natural Numbers' stamp: 'NB 3/30/2023 21:45:22'!
IIII class
	instanceVariableNames: ''!

----SNAPSHOT----(30 March 2023 21:45:28) CuisUniversity-5706.image priorSource: 8884836!

----SNAPSHOT----(30 March 2023 21:45:31) CuisUniversity-5706.image priorSource: 8886811!

----SNAPSHOT----(30 March 2023 21:48:35) CuisUniversity-5706.image priorSource: 8886901!
!II class methodsFor: '--** private fileout/in **--' stamp: 'NB 3/30/2023 21:48:41' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'NB 3/30/2023 21:48:41' overrides: 50609373!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'NB 3/30/2023 21:48:41' overrides: 50609373!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := III.! !

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'NB 3/30/2023 21:48:41'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'NB 3/30/2023 21:48:41'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'NB 3/30/2023 21:48:41'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := III.!

----SNAPSHOT----(30 March 2023 21:51:49) CuisUniversity-5706.image priorSource: 8886991!

----SNAPSHOT----(30 March 2023 21:52:52) CuisUniversity-5706.image priorSource: 8888511!

----STARTUP---- (2 April 2023 15:17:57) as /Users/nico/Documents/inge1/2023/macos64/CuisUniversity-5706.image!


III * I!

III * II!

!classDefinition: #IIIII category: 'Natural Numbers' stamp: 'NB 4/2/2023 15:19:06'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: 'IIIII class' category: 'Natural Numbers' stamp: 'NB 4/2/2023 15:19:06'!
IIIII class
	instanceVariableNames: ''!

!classDefinition: #IIIIII category: 'Natural Numbers' stamp: 'NB 4/2/2023 15:19:06'!
II subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: 'IIIIII class' category: 'Natural Numbers' stamp: 'NB 4/2/2023 15:19:06'!
IIIIII class
	instanceVariableNames: ''!

I * II!

I * III!

I * I!

I / I!

I / II!

II / I!

III / I!

III / III!

III / IIII!

IIII / II!

IIIIII / II!

----SNAPSHOT----(2 April 2023 15:20:23) CuisUniversity-5706.image priorSource: 8888601!
!II class methodsFor: '--** private fileout/in **--' stamp: 'NB 4/2/2023 15:21:18' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'NB 4/2/2023 15:21:18' overrides: 50609455!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'NB 4/2/2023 15:21:18' overrides: 50609455!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	previous := III.! !
!IIIII class methodsFor: '--** private fileout/in **--' stamp: 'NB 4/2/2023 15:21:18' overrides: 50609455!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIII.
	previous := IIII.! !
!IIIIII class methodsFor: '--** private fileout/in **--' stamp: 'NB 4/2/2023 15:21:18' overrides: 50609455!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := IIIII.! !

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'NB 4/2/2023 15:21:18'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'NB 4/2/2023 15:21:19'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'NB 4/2/2023 15:21:19'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	previous := III.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'NB 4/2/2023 15:21:19'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIII.
	previous := IIII.!

!methodRemoval: IIIIII class #initializeCollaboratorsFromFile stamp: 'NB 4/2/2023 15:21:19'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := IIIII.!

----STARTUP---- (3 April 2023 20:29:49) as /Users/nico/Documents/inge1/2023/macos64/CuisUniversity-5706.image!


Object subclass: #XXX
        instanceVariableNames: ''
        classVariableNames: ''
        poolDictionaries: ''
        category: 'CollectionExercise'!

!classDefinition: #XXX category: 'CollectionExercise' stamp: 'NB 4/3/2023 20:37:49'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CollectionExercise'!
!XXX methodsFor: 'no messages' stamp: 'NB 4/3/2023 20:40:48'!
findOddsPart0

        | elements index odds |

        elements:= #(1 2 5 6 9).

        odds := OrderedCollection new.
        index := 1.

        [index <= elements size]
        whileTrue: [
                ((elements at: index) odd) ifTrue: [odds add: (elements at: index)].
                index := index +1.
                ].
        ^odds! !
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 20:50:54'!
findOddsPart1

        | elements odds|

	elements:= #(1 2 5 6 9).

	odds := OrderedCollection new.
	
	elements do: [:each | each odd ifTrue: [odds add: each]].
	
	^odds.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 20:54:43'!
findOddsPart2

        ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 20:56:11' prior: 50609491!
findOddsPart2

	| elements odds|

	elements:= #(1 2 5 6 9).

	odds := OrderedCollection new.
	
	^elements select: [:each | each odd].

        ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 20:56:26' prior: 50609495!
findOddsPart2

	| elements |

	elements:= #(1 2 5 6 9).
	
	^elements select: [:each | each odd].

        ! !

| elements |

	elements:= #(1 2 5 6 9).
	
	^elements select: [:each | each odd].!
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 20:58:05'!
findDoubles1

	

        ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 20:59:10' prior: 50609512!
findDoubles1
	
	| elements index odds doubles |

        elements:= #(1 2 5 6 9).

        doubles := OrderedCollection new.
        index := 1.

        [index <= elements size]
        whileTrue: [
                odds add: (elements at: index) * 2.
                index := index +1.
                ].
        ^odds
	

        ! !

----SNAPSHOT----(3 April 2023 20:59:25) CuisUniversity-5706.image priorSource: 8889623!
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 20:59:38' prior: 50609516!
findDoubles1
	
	| elements index doubles |

        elements:= #(1 2 5 6 9).

        doubles := OrderedCollection new.
        index := 1.

        [index <= elements size]
        whileTrue: [
                doubles add: (elements at: index) * 2.
                index := index +1.
                ].
        ^doubles.
	

        ! !

| elements index doubles |

        elements:= #(1 2 5 6 9).

        doubles := OrderedCollection new.
        index := 1.

        [index <= elements size]
        whileTrue: [
                doubles add: (elements at: index) * 2.
                index := index +1.
                ].
        ^doubles.!
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 20:59:56'!
findDoubles2
	
	
	

        ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 21:00:18' prior: 50609555!
findDoubles2
	
	 | elements odds|

	elements:= #(1 2 5 6 9).

	odds := OrderedCollection new.
	
	elements do: [:each | each odd ifTrue: [odds add: each]].
	
	^odds.
	
	

        ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 21:00:53' prior: 50609559!
findDoubles2
	
	 | elements doubles|

	elements:= #(1 2 5 6 9).

	doubles := OrderedCollection new.
	
	elements do: [:each | doubles add: each * 2].
	
	^doubles.
	
	

        ! !

 | elements doubles|

	elements:= #(1 2 5 6 9).

	doubles := OrderedCollection new.
	
	elements do: [:each | doubles add: each * 2].
	
	^doubles.!

----SNAPSHOT----(3 April 2023 21:01:07) CuisUniversity-5706.image priorSource: 8892110!
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 21:03:26'!
findDoubles3
	
	 | elements doubles|

	elements:= #(1 2 5 6 9).

	doubles := OrderedCollection new.
	
	^elements collect: [:each | doubles add: each * 2].
	
	

        ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 21:04:11' prior: 50609584!
findDoubles3
	
	 | elements |

	elements:= #(1 2 5 6 9).
	
	^elements collect: [:each | each * 2].
	
	

        ! !

 | elements |

	elements:= #(1 2 5 6 9).
	
	^elements collect: [:each | each * 2].!

----SNAPSHOT----(3 April 2023 21:04:38) CuisUniversity-5706.image priorSource: 8893766!
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 21:06:25'!
findFirstEven
	
	 | elements |

	elements:= #(1 2 5 6 9).
	
	^elements detect: [:each | each even].
	
	

        ! !

| elements |

	elements:= #(1 2 5 6 9).
	
	^elements detect: [:each | each even].!

----SNAPSHOT----(3 April 2023 21:06:35) CuisUniversity-5706.image priorSource: 8894440!
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 21:07:30'!
findFirstEvenWithoutMatching
	
	 | elements |

	elements:= #(1 2 5 6 9).
	
	^elements detect: [:each | each even].
	
	

        ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 21:07:39' prior: 50609617!
findFirstEvenWithoutMatching
	
	 | elements |

	elements:= #(1 5 9).
	
	^elements detect: [:each | each even].
	
	

        ! !

| elements |

	elements:= #(1 5 9).
	
	^elements detect: [:each | each even].
	!
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 21:08:59'!
findFirstEvenWithoutMatchingReturnString
	
	 | elements |

	elements:= #(1 5 9).
	
	^elements detect: [:each | each even] ifNone: [^'no hay pares'].
	
	

        ! !

| elements |

	elements:= #(1 5 9).
	
	^elements detect: [:each | each even] ifNone: [^'no hay pares'].
	!

----SNAPSHOT----(3 April 2023 21:09:09) CuisUniversity-5706.image priorSource: 8894824!
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 21:13:05'!
findFirstEvenWithoutMatchingThrowsException
	
	 | elements |

	elements:= #(1 5 9).
	
	^elements detect: [:each | each even].
	
	

        ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 21:15:49'!
sumElementsInjecting
	
	 | elements |

	elements:= #(1 5 9).
	
	^elements inject: 0 into: [:subTotal :next | subTotal + next]. 
	
	

        ! !

 | elements |

	elements:= #(1 5 9).
	
	^elements inject: 0 into: [:subTotal :next | subTotal + next]. !

----SNAPSHOT----(3 April 2023 21:16:00) CuisUniversity-5706.image priorSource: 8895793!

----SNAPSHOT----(3 April 2023 21:16:07) CuisUniversity-5706.image priorSource: 8896442!
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 21:18:31'!
sumElementsSum
	
	 | elements |

	elements:= #(1 2 5 6 9).
	
	^elements sum.
	
	

        ! !

| elements |

	elements:= #(1 2 5 6 9).
	
	^elements sum.!
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 21:19:19' prior: 50609670!
sumElementsSum
	
	 | elements |

	elements:= #(1 5 9).
	
	^elements sum.
	
	

        ! !

 | elements |

	elements:= #(1 5 9).
	
	^elements sum.!

----SNAPSHOT----(3 April 2023 21:19:29) CuisUniversity-5706.image priorSource: 8896531!

----SNAPSHOT----(3 April 2023 21:19:31) CuisUniversity-5706.image priorSource: 8897106!
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 21:24:44'!
extractVowels
	
	 | string |

	string:= 'abcdefguijp'.
	string select: [:character | character]
	
	
	

        ! !

----SNAPSHOT----(3 April 2023 21:24:48) CuisUniversity-5706.image priorSource: 8897195!

----SNAPSHOT----(3 April 2023 21:24:50) CuisUniversity-5706.image priorSource: 8897490!

| string |

	string:= 'abcdefguijp'.!

----SNAPSHOT----(3 April 2023 21:29:07) CuisUniversity-5706.image priorSource: 8897579!
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 21:32:09' prior: 50609647!
findFirstEvenWithoutMatchingThrowsException
	
	 | elements |

	elements:= #(1 5 9).
	
	^elements detect: [:each | each even] ifNone: [self error: 'no hay pares'].
	
	

        ! !

----SNAPSHOT----(3 April 2023 21:37:49) CuisUniversity-5706.image priorSource: 8897707!

----SNAPSHOT----(3 April 2023 21:37:51) CuisUniversity-5706.image priorSource: 8898067!

 | string |

	string:= 'abcdefguijp'.
	string select: [:character | character isVowel]!

----SNAPSHOT----(3 April 2023 21:40:33) CuisUniversity-5706.image priorSource: 8898156!

----SNAPSHOT----(3 April 2023 21:40:37) CuisUniversity-5706.image priorSource: 8898334!

----SNAPSHOT----(3 April 2023 21:41:51) CuisUniversity-5706.image priorSource: 8898423!
!XXX methodsFor: 'as yet unclassified' stamp: 'NB 4/3/2023 21:42:00' prior: 50609691!
extractVowels
	
	 | string |

	string:= 'abcdefguijp'.
	string select: [:character | character isVowel]
	
	
	

        ! !

----SNAPSHOT----(3 April 2023 21:57:37) CuisUniversity-5706.image priorSource: 8898512!

----SNAPSHOT----(3 April 2023 21:57:40) CuisUniversity-5706.image priorSource: 8898810!

----STARTUP---- (10 April 2023 21:03:27) as /Users/nico/Documents/inge1/2023/macos64/CuisUniversity-5706.image!


----End fileIn of /Users/nico/Documents/inge1/2023-1c/01-CodigoRepetido/CodigoRepetido-Ejercicio.st----!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/10/2023 21:08:43'!
xx

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/10/2023 21:09:22'!
xx: cosaEntremedio

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	cosaEntremedio value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/10/2023 21:10:24'!
xx: cosaEntremedio valorAEsperar: unNumero

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	cosaEntremedio value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (unNumero * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/10/2023 21:11:23'!
yy: cosaInicial xx: cosaEntremedio valorAEsperar: unNumero

	| millisecondsBeforeRunning millisecondsAfterRunning |
	
	cosaInicial value.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	cosaEntremedio value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (unNumero * millisecond)
	
! !

!methodRemoval: CustomerBookTest #xx stamp: 'NB 4/10/2023 21:11:38'!
xx

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)
	
!

!methodRemoval: CustomerBookTest #xx: stamp: 'NB 4/10/2023 21:11:43'!
xx: cosaEntremedio

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	cosaEntremedio value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)
	
!

!methodRemoval: CustomerBookTest #xx:valorAEsperar: stamp: 'NB 4/10/2023 21:11:47'!
xx: cosaEntremedio valorAEsperar: unNumero

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	cosaEntremedio value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (unNumero * millisecond)
	
!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/10/2023 21:14:38'!
yy: cosaInicial assertThat: cosaEntremedio shouldNotTakeMoreThan: unNumero

	| millisecondsBeforeRunning millisecondsAfterRunning |
	
	cosaInicial value.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	cosaEntremedio value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (unNumero * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/10/2023 21:18:28' prior: 50610153!
yy: cosaInicial assertThat: cosaEntremedio shouldNotTakeMoreThan: unNumero

	| millisecondsBeforeRunning millisecondsAfterRunning |

	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	cosaEntremedio value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (unNumero * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/10/2023 21:28:38'!
assertThat: aClosureToTest shouldNotTakeMoreThan: amount

	| millisecondsBeforeRunning millisecondsAfterRunning |

	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aClosureToTest value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (amount * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/10/2023 21:31:26' prior: 50610185!
assertThat: aClosureToTest shouldNotTakeMoreThan: amountOfTime

	| millisecondsBeforeRunning millisecondsAfterRunning |

	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aClosureToTest value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (amountOfTime)
	
! !

!methodRemoval: CustomerBookTest #yy:assertThat:shouldNotTakeMoreThan: stamp: 'NB 4/10/2023 21:31:35'!
yy: cosaInicial assertThat: cosaEntremedio shouldNotTakeMoreThan: unNumero

	| millisecondsBeforeRunning millisecondsAfterRunning |

	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	cosaEntremedio value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (unNumero * millisecond)
	
!

!methodRemoval: CustomerBookTest #yy:xx:valorAEsperar: stamp: 'NB 4/10/2023 21:31:39'!
yy: cosaInicial xx: cosaEntremedio valorAEsperar: unNumero

	| millisecondsBeforeRunning millisecondsAfterRunning |
	
	cosaInicial value.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	cosaEntremedio value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (unNumero * millisecond)
	
!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/10/2023 21:32:44' prior: 50609784!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self assertThat: [customerBook addCustomerNamed: 'John Lennon'.] shouldNotTakeMoreThan: 50 * millisecond

	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/10/2023 21:32:57'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'NB 4/10/2023 21:32:57'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'NB 4/10/2023 21:32:57'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'NB 4/10/2023 21:32:57'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'NB 4/10/2023 21:32:57'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'NB 4/10/2023 21:32:57'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'NB 4/10/2023 21:32:57'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'NB 4/10/2023 21:32:57'!
PASSED!

----SNAPSHOT----(10 April 2023 21:33:15) CuisUniversity-5706.image priorSource: 8898899!

----SNAPSHOT----(10 April 2023 21:33:17) CuisUniversity-5706.image priorSource: 8916348!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/10/2023 21:33:49' prior: 50609801!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self assertThat: [customerBook removeCustomerNamed: paulMcCartney.] shouldNotTakeMoreThan: 100 * millisecond.
	  
	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/10/2023 21:33:58'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'NB 4/10/2023 21:33:58'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'NB 4/10/2023 21:33:58'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'NB 4/10/2023 21:33:58'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'NB 4/10/2023 21:33:58'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'NB 4/10/2023 21:33:58'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'NB 4/10/2023 21:33:58'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'NB 4/10/2023 21:33:58'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/10/2023 21:39:24'!
assertThat: algo yy: otrocoso zz: algunootrocosa
	
	
			
	
	[ algo value.
	self fail ]
		on: otrocoso
		do: [ :anError | 
			algunootrocosa]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/10/2023 21:41:17' prior: 50610336!
assertThat: algo yy: otrocoso zz: algunootrocosa
	
	
			
	
	[ algo value.
	self fail ]
		on: Error
		do: [ :anError | 
			algunootrocosa]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/10/2023 21:46:35'!
assertThat: aClosuseThatShouldRaiseError raisesError: anError onError: aClosureToEvaluateWhenErrorOcurrs
	
	
	
	[ aClosuseThatShouldRaiseError value.
	self fail ]
		on: Error
		do: aClosureToEvaluateWhenErrorOcurrs
! !

!methodRemoval: CustomerBookTest #assertThat:yy:zz: stamp: 'NB 4/10/2023 21:46:41'!
assertThat: algo yy: otrocoso zz: algunootrocosa
	
	
			
	
	[ algo value.
	self fail ]
		on: Error
		do: [ :anError | 
			algunootrocosa]
!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/10/2023 21:47:47'!
assertThat: aClosuseThatShouldRaiseError raisesTheError: anError onError: aClosureToEvaluateWhenErrorOcurrs
	
	
	
	[ aClosuseThatShouldRaiseError value.
	self fail ]
		on: Error
		do: aClosureToEvaluateWhenErrorOcurrs
! !

!methodRemoval: CustomerBookTest #assertThat:raisesError:onError: stamp: 'NB 4/10/2023 21:47:56'!
assertThat: aClosuseThatShouldRaiseError raisesError: anError onError: aClosureToEvaluateWhenErrorOcurrs
	
	
	
	[ aClosuseThatShouldRaiseError value.
	self fail ]
		on: Error
		do: aClosureToEvaluateWhenErrorOcurrs
!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/10/2023 21:48:58'!
assertThat: aClosuseThatShouldRaiseError raisesTheError: anError andOnErrorDo: aClosureToEvaluateWhenErrorOcurrs
	
	
	
	[ aClosuseThatShouldRaiseError value.
	self fail ]
		on: anError
		do: aClosureToEvaluateWhenErrorOcurrs
! !

!methodRemoval: CustomerBookTest #assertThat:raisesTheError:onError: stamp: 'NB 4/10/2023 21:49:28'!
assertThat: aClosuseThatShouldRaiseError raisesTheError: anError onError: aClosureToEvaluateWhenErrorOcurrs
	
	
	
	[ aClosuseThatShouldRaiseError value.
	self fail ]
		on: Error
		do: aClosureToEvaluateWhenErrorOcurrs
!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/10/2023 21:50:40' prior: 50609821!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.
	
	self assertThat: [customerBook addCustomerNamed: ''.] raisesTheError: Error andOnErrorDo: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ].! !

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'NB 4/10/2023 21:51:00'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/10/2023 21:51:00'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'NB 4/10/2023 21:51:00'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'NB 4/10/2023 21:51:00'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'NB 4/10/2023 21:51:00'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'NB 4/10/2023 21:51:00'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'NB 4/10/2023 21:51:00'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'NB 4/10/2023 21:51:00'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'NB 4/10/2023 21:51:00'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/10/2023 21:52:03' prior: 50609833!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self assertThat: [ customerBook removeCustomerNamed: 'Paul McCartney'.] raisesTheError: NotFound andOnErrorDo: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ].
	
! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'NB 4/10/2023 21:52:05'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/10/2023 21:52:05'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'NB 4/10/2023 21:52:05'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'NB 4/10/2023 21:52:05'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'NB 4/10/2023 21:52:05'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'NB 4/10/2023 21:52:05'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'NB 4/10/2023 21:52:05'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'NB 4/10/2023 21:52:05'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'NB 4/10/2023 21:52:05'!
PASSED!

----SNAPSHOT----(10 April 2023 21:54:19) CuisUniversity-5706.image priorSource: 8916438!

----SNAPSHOT----(10 April 2023 21:54:22) CuisUniversity-5706.image priorSource: 8923317!

----SNAPSHOT----(10 April 2023 21:54:43) CuisUniversity-5706.image priorSource: 8923407!

----SNAPSHOT----(10 April 2023 21:57:52) CuisUniversity-5706.image priorSource: 8923497!

----SNAPSHOT----(10 April 2023 21:57:54) CuisUniversity-5706.image priorSource: 8923587!

----SNAPSHOT----(10 April 2023 21:58:04) CuisUniversity-5706.image priorSource: 8923677!

----STARTUP---- (11 April 2023 20:23:20) as /Users/nico/Documents/inge1/2023/macos64/CuisUniversity-5706.image!


----SNAPSHOT----(11 April 2023 20:48:26) CuisUniversity-5706.image priorSource: 8923767!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/11/2023 21:36:37'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'NB 4/11/2023 21:36:37'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'NB 4/11/2023 21:36:37'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'NB 4/11/2023 21:36:37'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'NB 4/11/2023 21:36:37'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'NB 4/11/2023 21:36:37'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'NB 4/11/2023 21:36:37'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'NB 4/11/2023 21:36:37'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/11/2023 21:37:03' prior: 50610247!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self should: [customerBook addCustomerNamed: 'John Lennon'.] notTakeMoreThan: 50 * millisecond

	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/11/2023 21:37:11'!
ERROR!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'NB 4/11/2023 21:37:11'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'NB 4/11/2023 21:37:11'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'NB 4/11/2023 21:37:11'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'NB 4/11/2023 21:37:11'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'NB 4/11/2023 21:37:11'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'NB 4/11/2023 21:37:11'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'NB 4/11/2023 21:37:11'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/11/2023 21:37:11'!
ERROR!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/11/2023 21:37:36'!
ERROR!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/11/2023 21:37:36'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/11/2023 21:39:06' prior: 50610558!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self should: [customerBook addCustomerNamed: 'John Lennon'.] notTakeMoreThan: (Duration milliSeconds: 50). 

	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/11/2023 21:39:08'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/11/2023 21:39:08'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'NB 4/11/2023 21:39:08'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'NB 4/11/2023 21:39:08'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'NB 4/11/2023 21:39:08'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'NB 4/11/2023 21:39:08'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'NB 4/11/2023 21:39:08'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'NB 4/11/2023 21:39:08'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'NB 4/11/2023 21:39:08'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/11/2023 21:39:51' prior: 50610293!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self should: [customerBook removeCustomerNamed: paulMcCartney.] notTakeMoreThan: (Duration milliSeconds: 100).
	  
	
! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'NB 4/11/2023 21:39:59'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/11/2023 21:39:59'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'NB 4/11/2023 21:39:59'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'NB 4/11/2023 21:39:59'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'NB 4/11/2023 21:39:59'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'NB 4/11/2023 21:39:59'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'NB 4/11/2023 21:39:59'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'NB 4/11/2023 21:39:59'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'NB 4/11/2023 21:39:59'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/11/2023 21:40:58' prior: 50610408!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.
	
	self should: [customerBook addCustomerNamed: ''.] raise: Error withExceptionDo: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ].! !

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'NB 4/11/2023 21:41:00'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/11/2023 21:41:00'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'NB 4/11/2023 21:41:00'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'NB 4/11/2023 21:41:00'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'NB 4/11/2023 21:41:00'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'NB 4/11/2023 21:41:00'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'NB 4/11/2023 21:41:00'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'NB 4/11/2023 21:41:00'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'NB 4/11/2023 21:41:00'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/11/2023 21:41:23' prior: 50610455!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self should: [ customerBook removeCustomerNamed: 'Paul McCartney'.] raise: NotFound withExceptionDo: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ].
	
! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'NB 4/11/2023 21:41:24'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/11/2023 21:41:24'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'NB 4/11/2023 21:41:24'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'NB 4/11/2023 21:41:24'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'NB 4/11/2023 21:41:24'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'NB 4/11/2023 21:41:24'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'NB 4/11/2023 21:41:24'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'NB 4/11/2023 21:41:24'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'NB 4/11/2023 21:41:25'!
PASSED!

----SNAPSHOT----(11 April 2023 21:42:03) CuisUniversity-5706.image priorSource: 8923971!

----SNAPSHOT----(11 April 2023 21:42:07) CuisUniversity-5706.image priorSource: 8932715!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/11/2023 21:52:32' prior: 50609888!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self should: [ customerBook suspendCustomerNamed: 'George Harrison']
		raise: CantSuspend 
		withExceptionDo: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'NB 4/11/2023 21:52:34'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/11/2023 21:52:34'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'NB 4/11/2023 21:52:34'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'NB 4/11/2023 21:52:34'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'NB 4/11/2023 21:52:34'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'NB 4/11/2023 21:52:34'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'NB 4/11/2023 21:52:34'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'NB 4/11/2023 21:52:34'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'NB 4/11/2023 21:52:34'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/11/2023 21:53:17' prior: 50609904!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	self should: [ customerBook suspendCustomerNamed: johnLennon. ]
		raise: CantSuspend 
		withExceptionDo: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'NB 4/11/2023 21:53:18'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/11/2023 21:53:18'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'NB 4/11/2023 21:53:18'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'NB 4/11/2023 21:53:18'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'NB 4/11/2023 21:53:18'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'NB 4/11/2023 21:53:18'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'NB 4/11/2023 21:53:18'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'NB 4/11/2023 21:53:18'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'NB 4/11/2023 21:53:18'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/11/2023 22:34:34'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'NB 4/11/2023 22:34:34'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'NB 4/11/2023 22:34:34'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'NB 4/11/2023 22:34:34'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'NB 4/11/2023 22:34:34'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'NB 4/11/2023 22:34:34'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'NB 4/11/2023 22:34:34'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'NB 4/11/2023 22:34:34'!
PASSED!

!methodRemoval: CustomerBookTest #assertThat:raisesTheError:andOnErrorDo: stamp: 'NB 4/11/2023 22:34:43'!
assertThat: aClosuseThatShouldRaiseError raisesTheError: anError andOnErrorDo: aClosureToEvaluateWhenErrorOcurrs
	
	
	
	[ aClosuseThatShouldRaiseError value.
	self fail ]
		on: anError
		do: aClosureToEvaluateWhenErrorOcurrs
!

!methodRemoval: CustomerBookTest #assertThat:shouldNotTakeMoreThan: stamp: 'NB 4/11/2023 22:34:47'!
assertThat: aClosureToTest shouldNotTakeMoreThan: amountOfTime

	| millisecondsBeforeRunning millisecondsAfterRunning |

	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aClosureToTest value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (amountOfTime)
	
!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/11/2023 22:38:00'!
xxx: aCustomerBook yyy: unNumero zzz: otroNumero

	
	
	self assert: unNumero equals: aCustomerBook numberOfActiveCustomers.
	self assert: otroNumero equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: 1 equals: aCustomerBook numberOfCustomers.
	
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/11/2023 22:43:17' prior: 50610961!
xxx: aCustomerBook yyy: expectedAmountOfActiveCustomers zzz: expectedAmountOfSuspendedCustomers

	
	
	self assert: expectedAmountOfActiveCustomers equals: aCustomerBook numberOfActiveCustomers.
	self assert: expectedAmountOfSuspendedCustomers equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: expectedAmountOfActiveCustomers + expectedAmountOfSuspendedCustomers equals: aCustomerBook numberOfCustomers.
	
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/11/2023 22:54:39'!
assert: aCustomerBook activeCustomerCountIs: expectedAmountOfActiveCustomers suspendedCustomerCountIs: expectedAmountOfSuspendedCustomers

	
	
	self assert: expectedAmountOfActiveCustomers equals: aCustomerBook numberOfActiveCustomers.
	self assert: expectedAmountOfSuspendedCustomers equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: expectedAmountOfActiveCustomers + expectedAmountOfSuspendedCustomers equals: aCustomerBook numberOfCustomers.
	
	

	
! !

!methodRemoval: CustomerBookTest #xxx:yyy:zzz: stamp: 'NB 4/11/2023 22:54:45'!
xxx: aCustomerBook yyy: expectedAmountOfActiveCustomers zzz: expectedAmountOfSuspendedCustomers

	
	
	self assert: expectedAmountOfActiveCustomers equals: aCustomerBook numberOfActiveCustomers.
	self assert: expectedAmountOfSuspendedCustomers equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: expectedAmountOfActiveCustomers + expectedAmountOfSuspendedCustomers equals: aCustomerBook numberOfCustomers.
	
	

	
!

----SNAPSHOT----(11 April 2023 22:54:47) CuisUniversity-5706.image priorSource: 8932805!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/11/2023 22:58:35' prior: 50609848!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: customerBook activeCustomerCountIs: 0 suspendedCustomerCountIs: 1.
	
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !

----SNAPSHOT----(11 April 2023 22:59:03) CuisUniversity-5706.image priorSource: 8939887!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/11/2023 22:59:19' prior: 50609867!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: customerBook activeCustomerCountIs: 0 suspendedCustomerCountIs: 0.
	
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/11/2023 23:01:10'!
assert: aCustomerBook onlyIncludesCustomerNamed: aCustomerNAme
	
	self assert: aCustomerBook numberOfCustomers = 1.
	self assert: (aCustomerBook includesCustomerNamed: aCustomerNAme)
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/11/2023 23:01:50' prior: 50610804!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self should: [ customerBook suspendCustomerNamed: 'George Harrison']
		raise: CantSuspend 
		withExceptionDo: [ :anError | 
			self assert: customerBook onlyIncludesCustomerNamed: johnLennon ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/11/2023 23:02:08' prior: 50610854!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	self should: [ customerBook suspendCustomerNamed: johnLennon. ]
		raise: CantSuspend 
		withExceptionDo: [ :anError | 
			self assert: customerBook onlyIncludesCustomerNamed: johnLennon ]
! !

----SNAPSHOT----(11 April 2023 23:02:14) CuisUniversity-5706.image priorSource: 8940520!
!CustomerBook methodsFor: 'customer management' stamp: 'NB 4/11/2023 23:05:38' prior: 50609951!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	(self includesCustomerNamed: aName) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NB 4/11/2023 23:06:38' prior: 50609965!
numberOfCustomers
	
	^self numberOfActiveCustomers + self numberOfSuspendedCustomers ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NB 4/11/2023 23:09:22' prior: 50609974!
removeCustomerNamed: aName 

	active remove: aName ifAbsent: [suspended remove: aName ifAbsent: [^NotFound signal]].
	^aName.
! !

----SNAPSHOT----(11 April 2023 23:15:51) CuisUniversity-5706.image priorSource: 8942480!
!CustomerBook methodsFor: 'customer management' stamp: 'NB 4/11/2023 23:19:59' prior: 50609999!
suspendCustomerNamed: aName 

	active detect: [:aCustomer | aCustomer = aName] ifNone: [^CantSuspend signal].
	
	active remove: aName.
	
	suspended add: aName
! !

----SNAPSHOT----(11 April 2023 23:20:34) CuisUniversity-5706.image priorSource: 8943329!

----SNAPSHOT----(11 April 2023 23:24:45) CuisUniversity-5706.image priorSource: 8943682!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/11/2023 23:24:47'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'NB 4/11/2023 23:24:47'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'NB 4/11/2023 23:24:47'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'NB 4/11/2023 23:24:47'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'NB 4/11/2023 23:24:47'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'NB 4/11/2023 23:24:47'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'NB 4/11/2023 23:24:47'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'NB 4/11/2023 23:24:47'!
PASSED!

----SNAPSHOT----(11 April 2023 23:28:14) CuisUniversity-5706.image priorSource: 8943772!

----SNAPSHOT----(11 April 2023 23:29:42) CuisUniversity-5706.image priorSource: 8944816!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/11/2023 23:29:47'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'NB 4/11/2023 23:29:47'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'NB 4/11/2023 23:29:47'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'NB 4/11/2023 23:29:47'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'NB 4/11/2023 23:29:47'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'NB 4/11/2023 23:29:47'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'NB 4/11/2023 23:29:47'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'NB 4/11/2023 23:29:47'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'NB 4/11/2023 23:31:48' prior: 50610749!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self should: [ customerBook removeCustomerNamed: 'Paul McCartney'.] raise: NotFound withExceptionDo: [ :anError | 
			self assert: customerBook onlyIncludesCustomerNamed: johnLennon. ].
	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'NB 4/11/2023 23:31:51'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'NB 4/11/2023 23:31:51'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'NB 4/11/2023 23:31:51'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'NB 4/11/2023 23:31:51'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'NB 4/11/2023 23:31:51'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'NB 4/11/2023 23:31:51'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'NB 4/11/2023 23:31:51'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'NB 4/11/2023 23:31:51'!
PASSED!

----SNAPSHOT----(11 April 2023 23:33:19) CuisUniversity-5706.image priorSource: 8944906!

----SNAPSHOT----(11 April 2023 23:33:32) CuisUniversity-5706.image priorSource: 8947376!

----SNAPSHOT----(11 April 2023 23:38:33) CuisUniversity-5706.image priorSource: 8947466!

----STARTUP---- (15 April 2023 15:15:47) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


----End fileIn of /Users/nico/Documents/inge1/2023-1c/02-Numeros/Pre-Numeros-Ejercicio.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/15/2023 15:28:35'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/15/2023 15:28:35'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/15/2023 15:28:35'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/15/2023 15:28:35'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/15/2023 15:28:35'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/15/2023 15:28:35'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/15/2023 15:28:35'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/15/2023 15:28:35'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'NB 4/15/2023 15:28:35'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 15:28:35'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 15:28:35'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'NB 4/15/2023 15:28:35'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'NB 4/15/2023 15:28:35'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'NB 4/15/2023 15:28:35'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/15/2023 15:28:35'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/15/2023 15:28:35'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/15/2023 15:28:35'!
PASSED!

Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'NB 4/15/2023 17:08:44'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'NB 4/15/2023 17:08:52'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'nil' stamp: 'NB 4/15/2023 17:09:48' overrides: 50611418!
* aMultiplier
	! !
!Entero methodsFor: 'as yet unclassified' stamp: 'NB 4/15/2023 17:18:09' prior: 50611678 overrides: 50611418!
* aMultiplier

	^self class with: value * aMultiplier integerValue.! !
!Fraccion methodsFor: 'no messages' stamp: 'NB 4/15/2023 17:19:30' overrides: 50611418!
* aMultiplier! !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'NB 4/15/2023 17:20:07' prior: 50611688 overrides: 50611418!
* aMultiplier

	^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator).! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NB 4/15/2023 17:20:37' prior: 50611418!
* aMultiplier 

	self subclassResponsibility.
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/15/2023 17:21:19'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/15/2023 17:21:19'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/15/2023 17:21:19'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/15/2023 17:21:19'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/15/2023 17:21:19'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/15/2023 17:21:19'!
ERROR!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/15/2023 17:21:19'!
ERROR!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/15/2023 17:21:19'!
ERROR!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'NB 4/15/2023 17:21:19'!
ERROR!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 17:21:19'!
ERROR!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 17:21:19'!
ERROR!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'NB 4/15/2023 17:21:19'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'NB 4/15/2023 17:21:19'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'NB 4/15/2023 17:21:19'!
ERROR!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/15/2023 17:21:19'!
ERROR!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/15/2023 17:21:19'!
ERROR!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/15/2023 17:21:19'!
ERROR!
!Entero class methodsFor: 'no messages' stamp: 'NB 4/15/2023 17:25:37' overrides: 50611566!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^self new initializeWith: aValue! !
!Fraccion class methodsFor: 'no messages' stamp: 'NB 4/15/2023 17:26:15' overrides: 50611577!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator! !

!methodRemoval: Numero class #with: stamp: 'NB 4/15/2023 17:26:42'!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^self new initializeWith: aValue!

!methodRemoval: Numero class #with:over: stamp: 'NB 4/15/2023 17:26:42'!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator!
!Entero methodsFor: 'initialization' stamp: 'NB 4/15/2023 17:28:06' overrides: 50611502!
initializeWith: aValue
	
	value := aValue! !
!Entero methodsFor: 'initialization' stamp: 'NB 4/15/2023 17:28:11' prior: 50611822 overrides: 50611502!
initializeWith: aValue
	
	type := #Entero.
	value := aValue! !
!Fraccion methodsFor: 'initialization' stamp: 'NB 4/15/2023 17:28:45' overrides: 50611507!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:=#Fraccion.
	numerator := aNumerator.
	denominator := aDenominator ! !

!methodRemoval: Numero #initializeWith: stamp: 'NB 4/15/2023 17:28:55'!
initializeWith: aValue
	
	type := #Entero.
	value := aValue!

!methodRemoval: Numero #initializeWith:over: stamp: 'NB 4/15/2023 17:28:55'!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:=#Fraccion.
	numerator := aNumerator.
	denominator := aDenominator !
!NumeroTest methodsFor: 'setup' stamp: 'NB 4/15/2023 17:30:11' prior: 50611386 overrides: 16961394!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := Fraccion with: one over: two.
	oneFifth := Fraccion with: one over: five.
	twoFifth := Fraccion with: two over: five.
	twoTwentyfifth := Fraccion with: two over: (Entero with: 25).
	fiveHalfs := Fraccion with: five over: two.
	negativeOneHalf := Fraccion with: negativeOne over: two
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/15/2023 17:30:23'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/15/2023 17:30:23'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/15/2023 17:30:23'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/15/2023 17:30:23'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/15/2023 17:30:23'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/15/2023 17:30:23'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/15/2023 17:30:23'!
ERROR!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/15/2023 17:30:23'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'NB 4/15/2023 17:30:23'!
ERROR!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 17:30:23'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 17:30:23'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'NB 4/15/2023 17:30:23'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'NB 4/15/2023 17:30:23'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'NB 4/15/2023 17:30:23'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/15/2023 17:30:23'!
ERROR!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/15/2023 17:30:23'!
ERROR!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/15/2023 17:30:23'!
ERROR!
!Entero methodsFor: 'testing' stamp: 'NB 4/15/2023 17:32:46' overrides: 50611485!
isNegative
	
	^value < 0.! !
!Fraccion methodsFor: 'testing' stamp: 'NB 4/15/2023 17:33:17' overrides: 50611485!
isNegative
	
	^denominator < 0.! !
!Numero methodsFor: 'testing' stamp: 'NB 4/15/2023 17:33:42' prior: 50611485!
isNegative
	
	self subclassResponsibility .! !
!Entero methodsFor: 'testing' stamp: 'NB 4/15/2023 17:34:09' overrides: 50611491!
isOne

	^value = 1.! !
!Fraccion methodsFor: 'testing' stamp: 'NB 4/15/2023 17:34:27' overrides: 50611491!
isOne

	^false.! !
!Numero methodsFor: 'testing' stamp: 'NB 4/15/2023 17:34:38' prior: 50611491!
isOne

	self subclassResponsibility .! !
!Entero methodsFor: 'testing' stamp: 'NB 4/15/2023 17:35:00' overrides: 50611496!
isZero

	^value = 0.! !
!Fraccion methodsFor: 'testing' stamp: 'NB 4/15/2023 17:35:14' overrides: 50611496!
isZero

	^false.! !
!Numero methodsFor: 'testing' stamp: 'NB 4/15/2023 17:35:26' prior: 50611496!
isZero

	self subclassResponsibility .! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/15/2023 17:35:38'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/15/2023 17:35:38'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/15/2023 17:35:38'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/15/2023 17:35:38'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/15/2023 17:35:38'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/15/2023 17:35:38'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/15/2023 17:35:38'!
ERROR!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/15/2023 17:35:38'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'NB 4/15/2023 17:35:38'!
ERROR!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 17:35:38'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 17:35:38'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'NB 4/15/2023 17:35:38'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'NB 4/15/2023 17:35:38'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'NB 4/15/2023 17:35:38'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/15/2023 17:35:38'!
ERROR!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/15/2023 17:35:38'!
ERROR!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/15/2023 17:35:38'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/15/2023 17:41:06' overrides: 50611432!
+ anAdder 
	
	[anAdder type = #Entero] ifTrue:
		[ ^self class with: value + anAdder integerValue ].
	
	self error: 'Tipo de número no soportado'! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/15/2023 17:48:13' prior: 50611683 overrides: 50611700!
* aMultiplier
	
	[aMultiplier type = #Entero] ifTrue:	
	[^self class with: value * aMultiplier integerValue].
	
	self error: 'Tipo de número no soportado'! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/15/2023 17:49:24' prior: 50611693 overrides: 50611700!
* aMultiplier

	[aMultiplier type = #Fraccion] ifTrue:

	[^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator)].
	
	self error: 'Tipo de número no soportado'.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/15/2023 17:50:28' overrides: 50611432!
+ anAdder

	[anAdder type = #Fraccion] ifTrue:
		[ | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator ].
	
	self error: 'Tipo de número no soportado'! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NB 4/15/2023 17:50:42' prior: 50611432!
+ anAdder 
	
	self subclassResponsibility .! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/15/2023 17:50:44'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/15/2023 17:50:44'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/15/2023 17:50:44'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/15/2023 17:50:44'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/15/2023 17:50:44'!
ERROR!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/15/2023 17:50:44'!
ERROR!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/15/2023 17:50:44'!
ERROR!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/15/2023 17:50:44'!
ERROR!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'NB 4/15/2023 17:50:44'!
ERROR!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 17:50:44'!
ERROR!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 17:50:44'!
ERROR!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'NB 4/15/2023 17:50:44'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'NB 4/15/2023 17:50:44'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'NB 4/15/2023 17:50:44'!
ERROR!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/15/2023 17:50:44'!
ERROR!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/15/2023 17:50:44'!
ERROR!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/15/2023 17:50:44'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/15/2023 17:51:32'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/15/2023 17:51:32'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/15/2023 17:51:32'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/15/2023 17:51:32'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/15/2023 17:51:32'!
ERROR!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/15/2023 17:51:32'!
ERROR!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/15/2023 17:51:32'!
ERROR!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/15/2023 17:51:32'!
ERROR!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'NB 4/15/2023 17:51:32'!
ERROR!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 17:51:32'!
ERROR!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 17:51:32'!
ERROR!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'NB 4/15/2023 17:51:32'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'NB 4/15/2023 17:51:32'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'NB 4/15/2023 17:51:32'!
ERROR!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/15/2023 17:51:32'!
ERROR!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/15/2023 17:51:32'!
ERROR!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/15/2023 17:51:32'!
ERROR!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/15/2023 17:52:14'!
ERROR!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/15/2023 17:52:14'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/15/2023 17:53:24' prior: 50612044 overrides: 50611700!
* aMultiplier
	
	aMultiplier type = #Entero ifTrue:	
	[^self class with: value * aMultiplier integerValue].
	
	self error: 'Tipo de número no soportado'! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/15/2023 17:53:31' prior: 50612035 overrides: 50612077!
+ anAdder 
	
	anAdder type = #Entero ifTrue:
		[ ^self class with: value + anAdder integerValue ].
	
	self error: 'Tipo de número no soportado'! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/15/2023 17:53:39' prior: 50612053 overrides: 50611700!
* aMultiplier

	aMultiplier type = #Fraccion ifTrue:

	[^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator)].
	
	self error: 'Tipo de número no soportado'.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/15/2023 17:53:45' prior: 50612063 overrides: 50612077!
+ anAdder

	anAdder type = #Fraccion ifTrue:
		[ | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator ].
	
	self error: 'Tipo de número no soportado'! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/15/2023 17:53:48'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/15/2023 17:53:48'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/15/2023 17:53:48'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/15/2023 17:53:48'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/15/2023 17:53:48'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/15/2023 17:53:48'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/15/2023 17:53:48'!
ERROR!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/15/2023 17:53:48'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'NB 4/15/2023 17:53:48'!
ERROR!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 17:53:48'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 17:53:48'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'NB 4/15/2023 17:53:48'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'NB 4/15/2023 17:53:48'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'NB 4/15/2023 17:53:48'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/15/2023 17:53:48'!
ERROR!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/15/2023 17:53:48'!
ERROR!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/15/2023 17:53:48'!
ERROR!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/15/2023 17:54:01'!
ERROR!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/15/2023 17:54:01'!
ERROR!
!NumeroTest methodsFor: 'tests' stamp: 'NB 4/15/2023 17:54:55' prior: 50611316!
test07FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := Fraccion with: (Entero with: 7) over: (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !
!NumeroTest methodsFor: 'tests' stamp: 'NB 4/15/2023 17:55:04' prior: 50611338!
test09AparentFraccionesAreEqual

	self assert: oneHalf equals: (Fraccion with: two over: four)! !
!NumeroTest methodsFor: 'tests' stamp: 'NB 4/15/2023 17:55:21' prior: 50611372!
test16SignIsCorrectlyAssignedToFractionWithTwoNegatives

	self assert: oneHalf equals: (Fraccion with: negativeOne over: negativeTwo)! !
!NumeroTest methodsFor: 'tests' stamp: 'NB 4/15/2023 17:55:27' prior: 50611379!
test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor

	self assert: oneHalf negated equals: (Fraccion with: one over: negativeTwo)! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/15/2023 17:55:31'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/15/2023 17:55:31'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/15/2023 17:55:31'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/15/2023 17:55:31'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/15/2023 17:55:31'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/15/2023 17:55:31'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/15/2023 17:55:31'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/15/2023 17:55:31'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'NB 4/15/2023 17:55:31'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 17:55:31'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 17:55:31'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'NB 4/15/2023 17:55:31'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'NB 4/15/2023 17:55:31'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'NB 4/15/2023 17:55:31'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/15/2023 17:55:31'!
ERROR!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/15/2023 17:55:31'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/15/2023 17:55:31'!
ERROR!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/15/2023 17:55:45'!
ERROR!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/15/2023 17:55:45'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/15/2023 17:57:29' overrides: 50611465!
negated
	
	^self * (self class with: -1).! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/15/2023 17:57:45' overrides: 50611465!
negated
	
	^self class with: numerator * (self class with: -1) over: denominator.! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NB 4/15/2023 17:57:56' prior: 50611465!
negated
	
	self subclassResponsibility .! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/15/2023 17:58:04'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/15/2023 17:58:04'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/15/2023 17:58:04'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/15/2023 17:58:04'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/15/2023 17:58:04'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/15/2023 17:58:04'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/15/2023 17:58:04'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/15/2023 17:58:04'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'NB 4/15/2023 17:58:04'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 17:58:04'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 17:58:04'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'NB 4/15/2023 17:58:04'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'NB 4/15/2023 17:58:04'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'NB 4/15/2023 17:58:04'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/15/2023 17:58:04'!
ERROR!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/15/2023 17:58:04'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/15/2023 17:58:04'!
ERROR!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/15/2023 17:58:32'!
ERROR!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/15/2023 17:58:32'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/15/2023 17:59:29' prior: 50612404 overrides: 50612410!
negated
	
	^self class with: numerator * (Entero with: -1) over: denominator.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/15/2023 17:59:31'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/15/2023 17:59:31'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/15/2023 17:59:31'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/15/2023 17:59:31'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/15/2023 17:59:31'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/15/2023 17:59:31'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/15/2023 17:59:31'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/15/2023 17:59:31'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'NB 4/15/2023 17:59:31'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 17:59:31'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 17:59:31'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'NB 4/15/2023 17:59:32'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'NB 4/15/2023 17:59:32'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'NB 4/15/2023 17:59:32'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/15/2023 17:59:32'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/15/2023 17:59:32'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/15/2023 17:59:32'!
PASSED!

----SNAPSHOT----(15 April 2023 17:59:35) CuisUniversity-5706.image priorSource: 8947556!

----SNAPSHOT----(15 April 2023 17:59:38) CuisUniversity-5706.image priorSource: 8988377!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/15/2023 18:00:41' overrides: 50611450!
// aDivisor 
	
	^self class with: value // aDivisor integerValue.! !

!methodRemoval: Numero #// stamp: 'NB 4/15/2023 18:01:16'!
// aDivisor 
	
	type = #Entero ifTrue:
		[ ^self class with: value // aDivisor integerValue ].
		
	self error: 'Tipo de número no soportado'!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/15/2023 18:01:20'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/15/2023 18:01:20'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/15/2023 18:01:20'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/15/2023 18:01:20'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/15/2023 18:01:20'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/15/2023 18:01:20'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/15/2023 18:01:20'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/15/2023 18:01:20'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'NB 4/15/2023 18:01:20'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 18:01:20'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 18:01:20'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'NB 4/15/2023 18:01:20'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'NB 4/15/2023 18:01:20'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'NB 4/15/2023 18:01:20'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/15/2023 18:01:20'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/15/2023 18:01:20'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/15/2023 18:01:20'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/15/2023 18:01:59' overrides: 50611457!
greatestCommonDivisorWith: anEntero 
	
	^self class with: (value gcd: anEntero integerValue).! !

!methodRemoval: Numero #greatestCommonDivisorWith: stamp: 'NB 4/15/2023 18:02:08'!
greatestCommonDivisorWith: anEntero 
	
	type = #Entero ifTrue:
		[^self class with: (value gcd: anEntero integerValue)].
		
	self error: 'Tipo de número no soportado'!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/15/2023 18:02:11'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/15/2023 18:02:11'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/15/2023 18:02:11'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/15/2023 18:02:11'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/15/2023 18:02:11'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/15/2023 18:02:11'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/15/2023 18:02:11'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/15/2023 18:02:11'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'NB 4/15/2023 18:02:11'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 18:02:11'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 18:02:11'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'NB 4/15/2023 18:02:11'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'NB 4/15/2023 18:02:11'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'NB 4/15/2023 18:02:11'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/15/2023 18:02:11'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/15/2023 18:02:11'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/15/2023 18:02:11'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/15/2023 18:03:00' overrides: 50611474!
printOn: aStream
		
	aStream print: value.
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/15/2023 18:03:22' overrides: 50611474!
printOn: aStream
	
	aStream 
			print: numerator;
			nextPut: $/;
			print: denominator.! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NB 4/15/2023 18:03:33' prior: 50611474 overrides: 16902975!
printOn: aStream
	
	self subclassResponsibility .! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/15/2023 18:05:19'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/15/2023 18:05:19'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/15/2023 18:05:19'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/15/2023 18:05:19'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/15/2023 18:05:19'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/15/2023 18:05:19'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/15/2023 18:05:19'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/15/2023 18:05:19'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'NB 4/15/2023 18:05:19'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 18:05:19'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/15/2023 18:05:19'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'NB 4/15/2023 18:05:19'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'NB 4/15/2023 18:05:19'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'NB 4/15/2023 18:05:19'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/15/2023 18:05:19'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/15/2023 18:05:19'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/15/2023 18:05:19'!
PASSED!

----SNAPSHOT----(15 April 2023 18:12:52) CuisUniversity-5706.image priorSource: 8988467!

----SNAPSHOT----(15 April 2023 18:16:34) CuisUniversity-5706.image priorSource: 8995261!

----SNAPSHOT----(15 April 2023 18:20:21) CuisUniversity-5706.image priorSource: 8995351!

----STARTUP---- (16 April 2023 12:37:51) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


!classRemoval: #Fraccion stamp: 'NB 4/16/2023 12:38:01'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'NB 4/16/2023 12:38:01'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'NB 4/16/2023 12:38:01'!
Object subclass: #Numero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'NB 4/16/2023 12:38:01'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo negativeOneHalf'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /Users/nico/Documents/inge1/inge1-2023-1c/02-Numeros/Pre-Numeros-Ejercicio.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 12:38:42'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 12:38:42'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 12:38:42'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 12:38:42'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 12:38:42'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 12:38:42'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 12:38:42'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 12:38:42'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'NB 4/16/2023 12:38:42'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 12:38:42'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 12:38:42'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'NB 4/16/2023 12:38:42'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'NB 4/16/2023 12:38:42'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 12:38:42'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 12:38:42'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 12:38:42'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 12:38:42'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 12:59:09' overrides: 50612994!
= anObject

	^(anObject isKindOf: self class) and: [ value = anObject integerValue]
		! !
!Fraccion methodsFor: 'comparing' stamp: 'NB 4/16/2023 13:00:42' overrides: 50612994!
= anObject

	^(anObject isKindOf: self class) and: [ (numerator * anObject denominator) = (denominator * anObject numerator)]! !
!Numero methodsFor: 'comparing' stamp: 'NB 4/16/2023 13:00:56' prior: 50612994 overrides: 16901772!
= anObject

	self subclassResponsibility ! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 13:00:59'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 13:00:59'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 13:00:59'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 13:00:59'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 13:00:59'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 13:00:59'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 13:00:59'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 13:00:59'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'NB 4/16/2023 13:00:59'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:00:59'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:00:59'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'NB 4/16/2023 13:00:59'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'NB 4/16/2023 13:00:59'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 13:00:59'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 13:00:59'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 13:00:59'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 13:00:59'!
PASSED!
!Entero methodsFor: 'comparing' stamp: 'NB 4/16/2023 13:01:38' overrides: 50613005!
hash

	^value hash.
		! !
!Fraccion methodsFor: 'comparing' stamp: 'NB 4/16/2023 13:01:58' overrides: 50613005!
hash
	
	^(numerator hash / denominator hash) hash.! !
!Numero methodsFor: 'comparing' stamp: 'NB 4/16/2023 13:02:17' prior: 50613005 overrides: 16901788!
hash
	self subclassResponsibility .! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 13:05:43'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 13:05:43'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 13:05:43'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 13:05:43'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 13:05:43'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 13:05:43'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 13:05:43'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 13:05:43'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'NB 4/16/2023 13:05:43'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:05:43'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:05:43'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'NB 4/16/2023 13:05:43'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'NB 4/16/2023 13:05:43'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 13:05:43'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 13:05:43'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 13:05:43'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 13:05:43'!
PASSED!

----SNAPSHOT----(16 April 2023 13:05:49) CuisUniversity-5706.image priorSource: 8995441!

Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Object subclass: #Numero
	instanceVariableNames: 'type numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'NB 4/16/2023 13:12:01'!
Object subclass: #Numero
	instanceVariableNames: 'type numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'NB 4/16/2023 13:12:05'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Object subclass: #Numero
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'NB 4/16/2023 13:12:10'!
Object subclass: #Numero
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'NB 4/16/2023 13:12:15'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'NB 4/16/2023 13:12:22'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'initialization' stamp: 'NB 4/16/2023 13:12:39' prior: 50613035!
initializeWith: aValue
	value := aValue! !
!Fraccion methodsFor: 'initialization' stamp: 'NB 4/16/2023 13:12:49' prior: 50613134!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	numerator := aNumerator.
	denominator := aDenominator ! !
!Entero methodsFor: 'accessing' stamp: 'NB 4/16/2023 13:13:44' overrides: 50612983!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^value! !

!methodRemoval: Numero #integerValue stamp: 'NB 4/16/2023 13:13:51'!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^value!
!Fraccion methodsFor: 'accessing' stamp: 'NB 4/16/2023 13:14:17' overrides: 50612980!
denominator

	^denominator.! !
!Fraccion methodsFor: 'accessing' stamp: 'NB 4/16/2023 13:14:27' overrides: 50612990!
numerator

	^numerator.! !

!methodRemoval: Numero #denominator stamp: 'NB 4/16/2023 13:14:37'!
denominator

	^denominator!

!methodRemoval: Numero #numerator stamp: 'NB 4/16/2023 13:14:37'!
numerator

	^numerator!

!methodRemoval: Numero #type stamp: 'NB 4/16/2023 13:14:52'!
type
	
	^type!

!methodRemoval: Numero #printOn: stamp: 'NB 4/16/2023 13:14:57'!
printOn: aStream
	
	self subclassResponsibility .!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 13:15:20'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 13:15:20'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 13:15:20'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 13:15:20'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 13:15:20'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 13:15:20'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 13:15:20'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 13:15:20'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'NB 4/16/2023 13:15:20'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:15:20'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:15:20'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'NB 4/16/2023 13:15:20'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'NB 4/16/2023 13:15:20'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 13:15:20'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 13:15:20'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 13:15:20'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 13:15:20'!
PASSED!

----SNAPSHOT----(16 April 2023 13:15:23) CuisUniversity-5706.image priorSource: 9017424!

----SNAPSHOT----(16 April 2023 13:16:23) CuisUniversity-5706.image priorSource: 9023049!

!methodRemoval: Numero #= stamp: 'NB 4/16/2023 13:18:25'!
= anObject

	self subclassResponsibility !

!methodRemoval: Numero #hash stamp: 'NB 4/16/2023 13:18:25'!
hash
	self subclassResponsibility .!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 13:18:30'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 13:18:30'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 13:18:30'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 13:18:30'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 13:18:30'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 13:18:30'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 13:18:30'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 13:18:30'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'NB 4/16/2023 13:18:30'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:18:30'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:18:30'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'NB 4/16/2023 13:18:30'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'NB 4/16/2023 13:18:30'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 13:18:30'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 13:18:30'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 13:18:30'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 13:18:30'!
PASSED!

----SNAPSHOT----(16 April 2023 13:20:12) CuisUniversity-5706.image priorSource: 9023139!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 13:21:04'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 13:21:04'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 13:21:04'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 13:21:04'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 13:21:04'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 13:21:04'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 13:21:04'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 13:21:04'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'NB 4/16/2023 13:21:04'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:21:04'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:21:04'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'NB 4/16/2023 13:21:04'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'NB 4/16/2023 13:21:04'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 13:21:04'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 13:21:04'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 13:21:04'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 13:21:04'!
PASSED!

----SNAPSHOT----(16 April 2023 13:21:09) CuisUniversity-5706.image priorSource: 9025202!

----SNAPSHOT----(16 April 2023 13:23:19) CuisUniversity-5706.image priorSource: 9027061!

----End fileIn of /Users/nico/Documents/inge1/inge1-2023-1c/02-Numeros/Ejercicio Numeros/Numeros-Ejercicio.st----!

!classRemoval: #Fraccion stamp: 'NB 4/16/2023 13:31:10'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'NB 4/16/2023 13:31:10'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'NB 4/16/2023 13:31:10'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'NB 4/16/2023 13:31:11'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /Users/nico/Documents/inge1/inge1-2023-1c/02-Numeros/Ejercicio Numeros/Numeros-Ejercicio.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 13:31:40'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 13:31:40'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 13:31:40'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 13:31:40'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 13:31:40'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 13:31:40'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 13:31:40'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 13:31:40'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 13:31:40'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 13:31:40'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 13:31:40'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 13:31:40'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 13:31:40'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 13:33:38'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 13:33:38'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 13:33:38'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 13:33:38'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 13:33:38'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 13:33:38'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 13:33:38'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 13:33:38'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 13:33:39'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 13:33:39'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:33:39'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 13:33:39'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 13:33:39'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 13:33:39'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 13:33:39'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 13:33:39'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 13:33:39'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 13:33:39'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 13:33:39'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 13:33:39'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 13:33:39'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 13:33:39'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 13:33:45'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 13:33:45'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 13:36:54' prior: 50614806 overrides: 50614735!
+ anAdder 
	
	(anAdder isKindOf: #Entero) ifTrue: [^self class with: value + anAdder integerValue].
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 13:36:58'!
FAILURE!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 13:36:58'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 13:36:58'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 13:36:58'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 13:36:58'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 13:36:58'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 13:36:58'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 13:36:58'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:36:58'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 13:36:58'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 13:36:58'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 13:36:58'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 13:36:58'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 13:36:58'!
FAILURE!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 13:36:58'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 13:36:58'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 13:36:58'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 13:37:35' prior: 50615319 overrides: 50614735!
+ anAdder 
	
	(anAdder isKindOf: Entero class) ifTrue: [^self class with: value + anAdder integerValue].
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 13:37:37'!
FAILURE!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 13:37:37'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 13:37:37'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 13:37:37'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 13:37:37'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 13:37:37'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 13:37:37'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 13:37:37'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:37:37'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 13:37:37'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 13:37:37'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 13:37:37'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 13:37:37'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 13:37:37'!
FAILURE!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 13:37:37'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 13:37:37'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 13:37:37'!
ERROR!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 13:38:09'!
FAILURE!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 13:38:09'!
FAILURE!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 13:38:24'!
PASSED!

 a:= Entero with: 1.
b := Entero with:2.!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 13:41:58' prior: 50615462 overrides: 50614735!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue: [^self class with: value + anAdder integerValue].
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 13:42:01'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 13:42:01'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 13:42:01'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 13:42:01'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 13:42:01'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 13:42:01'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 13:42:01'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 13:42:01'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 13:42:01'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 13:42:01'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 13:42:01'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 13:42:01'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 13:42:01'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 13:51:11' prior: 50615616 overrides: 50614735!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue: [^self class with: value + anAdder integerValue].
	(anAdder isKindOf: Fraccion) ifTrue: [^Fraccion with: self * anAdder denominator + anAdder numerator over: anAdder denominator].! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 13:51:14'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 13:51:14'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 13:51:14'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 13:51:14'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 13:51:14'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 13:51:14'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 13:51:14'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 13:51:14'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 13:51:14'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 13:51:14'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 13:51:14'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 13:51:14'!
ERROR!

----SNAPSHOT----(16 April 2023 13:52:41) CuisUniversity-5706.image priorSource: 9027151!

----SNAPSHOT----(16 April 2023 13:52:43) CuisUniversity-5706.image priorSource: 9096133!

----SNAPSHOT----(16 April 2023 13:55:58) CuisUniversity-5706.image priorSource: 9096223!

----SNAPSHOT----(16 April 2023 13:56:01) CuisUniversity-5706.image priorSource: 9096313!

----SNAPSHOT----(16 April 2023 13:56:03) CuisUniversity-5706.image priorSource: 9096403!

----SNAPSHOT----(16 April 2023 13:56:05) CuisUniversity-5706.image priorSource: 9096493!

----STARTUP---- (16 April 2023 18:33:55) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 18:34:08'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 18:34:08'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 18:34:08'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 18:34:08'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 18:34:08'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 18:34:08'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 18:34:08'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:34:08'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 18:34:08'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 18:34:08'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 18:34:08'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 18:34:08'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 18:40:03'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 18:40:03'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 18:40:03'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 18:40:03'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 18:40:03'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 18:40:03'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 18:40:03'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 18:40:03'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 18:40:03'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 18:40:03'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 18:40:03'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 18:40:03'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 18:40:03'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 18:40:04'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 18:40:04'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 18:40:04'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 18:40:04'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 18:40:04'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:40:04'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 18:40:04'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 18:40:04'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 18:40:04'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 18:40:04'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 18:41:51' prior: 50614928 overrides: 50614735!
+ anAdder 
	
	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [^Fraccion with: anAdder * self denominator + self numerator over: self denominator].
	
	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.
	
	^newNumerator / newDenominator ! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 18:42:45'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 18:42:45'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 18:42:45'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 18:42:45'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 18:42:45'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 18:42:45'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:42:45'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 18:42:45'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 18:42:45'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 18:42:45'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 18:42:45'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 18:45:21' prior: 50614800 overrides: 50614730!
* aMultiplier 


	(aMultiplier isKindOf: Fraccion) ifTrue: [^Fraccion with: self * aMultiplier numerator over: aMultiplier denominator].
	
	^self class with: value * aMultiplier integerValue
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 18:45:54' prior: 50616349 overrides: 50614730!
* aMultiplier 


	(aMultiplier isKindOf: Fraccion) ifTrue: [^Fraccion with: self * aMultiplier numerator over: aMultiplier denominator].
	(aMultiplier isKindOf: self class) ifTrue: [^self class with: value * aMultiplier integerValue]
	
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 18:45:57'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 18:45:57'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 18:45:57'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 18:45:57'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 18:45:57'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:45:57'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 18:45:57'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 18:45:57'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 18:45:57'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 18:45:57'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 18:46:48' prior: 50614921 overrides: 50614730!
* aMultiplier 

	(aMultiplier isKindOf: Entero) ifTrue: [^Fraccion with: aMultiplier * self numerator over: self denominator].
	
	^(numerator * aMultiplier numerator) / (denominator * aMultiplier denominator)
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 18:47:08' prior: 50616506 overrides: 50614730!
* aMultiplier 

	(aMultiplier isKindOf: Entero) ifTrue: [^Fraccion with: aMultiplier * self numerator over: self denominator].
	(aMultiplier isKindOf: self class) ifTrue: [^(numerator * aMultiplier numerator) / (denominator * aMultiplier denominator)].
	
	
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 18:47:56'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 18:47:56'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 18:47:56'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 18:47:56'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:47:56'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 18:47:56'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 18:47:56'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 18:47:56'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 18:49:15' prior: 50614818 overrides: 50614744!
/ aDivisor 
	
	(aDivisor isKindOf: self class) ifTrue: [^Fraccion with: self over: aDivisor].
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 18:50:05' prior: 50616665 overrides: 50614744!
/ aDivisor 
	
	(aDivisor isKindOf: self class) ifTrue: [^Fraccion with: self over: aDivisor].
	(aDivisor isKindOf: Fraccion) ifTrue: [^Fraccion with: self * aDivisor denominator over: aDivisor numerator].
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 18:50:08'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 18:50:08'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 18:50:08'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:50:08'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 18:50:08'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 18:50:08'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 18:50:08'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 18:50:51' prior: 50614950 overrides: 50614744!
/ aDivisor 
	
	(aDivisor isKindOf: self class) ifTrue: [^(numerator * aDivisor denominator) / (denominator * aDivisor numerator)].
	
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 18:52:18' prior: 50616819 overrides: 50614744!
/ aDivisor 
	
	(aDivisor isKindOf: self class) ifTrue: [^(numerator * aDivisor denominator) / (denominator * aDivisor numerator)].
	(aDivisor isKindOf: Entero) ifTrue: [^Fraccion with: self numerator over: self denominator * aDivisor].
	
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 18:52:20'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:52:20'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 18:52:20'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 18:52:20'!
PASSED!

----SNAPSHOT----(16 April 2023 18:54:44) CuisUniversity-5706.image priorSource: 9096583!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 18:55:58' prior: 50614812 overrides: 50614739!
- aSubtrahend 

	(aSubtrahend isKindOf: Fraccion) ifTrue: [^Fraccion with: self * aSubtrahend denominator - aSubtrahend numerator over: aSubtrahend denominator].
	(aSubtrahend isKindOf: self class) ifTrue: [^ self class with: value - aSubtrahend integerValue.]
	
	
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:56:01'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 18:56:01'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:56:01'!
ERROR!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 18:56:59'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:57:10'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 18:57:10'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 18:57:11'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 18:57:11'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:57:11'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:58:18'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 18:58:18'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:00:46' prior: 50614939 overrides: 50614739!
- aSubtrahend 
	
	| newNumerator newDenominator |
	
	(aSubtrahend isKindOf: Entero) ifTrue: [^Fraccion with: self numerator - (aSubtrahend * self denominator) over: self denominator].
	
	(aSubtrahend isKindOf: self class) ifTrue: [newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
	newDenominator := denominator * aSubtrahend denominator.
	
	^newNumerator / newDenominator ]
	
	
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 19:00:48'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 19:00:49'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 19:00:49'!
PASSED!

----SNAPSHOT----(16 April 2023 19:00:55) CuisUniversity-5706.image priorSource: 9130322!

----SNAPSHOT----(16 April 2023 19:00:58) CuisUniversity-5706.image priorSource: 9144942!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:03:38' prior: 50616359 overrides: 50614730!
* aMultiplier 

	aMultiplier multiplyToTheInteger: self. 
	(aMultiplier isKindOf: Fraccion) ifTrue: [^Fraccion with: self * aMultiplier numerator over: aMultiplier denominator].
	(aMultiplier isKindOf: self class) ifTrue: [^self class with: value * aMultiplier integerValue]
	
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:04:25'!
multiplyToTheInteger: anIntegerMultiplier

	^self class with: value * anIntegerMultiplier integerValue.
	
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:05:18'!
multiplyToTheInteger: anIntegerMultiplier

	^Fraccion with: anIntegerMultiplier * self numerator over: self denominator

	
	
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:05:28' prior: 50617437 overrides: 50614730!
* aMultiplier 

	aMultiplier multiplyToTheInteger: self. 
	
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 19:05:31'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 19:05:31'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 19:05:31'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 19:05:31'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 19:05:31'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:05:31'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 19:05:31'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 19:05:31'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 19:05:31'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 19:05:31'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:05:31'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 19:05:31'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 19:05:31'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 19:05:32'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 19:05:32'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 19:05:32'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 19:05:32'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 19:05:32'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 19:05:32'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 19:05:32'!
FAILURE!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 19:06:53'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 19:06:53'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 19:06:53'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 19:06:53'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 19:06:53'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:06:53'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 19:06:53'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 19:06:53'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 19:06:53'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 19:06:53'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:06:53'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 19:06:53'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 19:06:53'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 19:06:53'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 19:06:53'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 19:06:53'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 19:06:53'!
FAILURE!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:07:53' prior: 50616517 overrides: 50614730!
* aMultiplier 

	aMultiplier multiplyToTheInteger: self. 
	
	
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:08:59' prior: 50617728 overrides: 50614730!
* aMultiplier 

	aMultiplier multiplyToTheFraction: self. 
	
	
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:11:53'!
multiplyToTheFraction: anFractionMultiplier 

	^self class with: anFractionMultiplier numerator * numerator over: anFractionMultiplier denominator * denominator
	
	
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:13:13'!
multiplyToTheFraction: anFractionMultiplier 

	^Fraccion with: anFractionMultiplier numerator * self integerValue over: anFractionMultiplier denominator.
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 19:13:19'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 19:13:19'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 19:13:19'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 19:13:19'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 19:13:19'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:13:19'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 19:13:19'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 19:13:19'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 19:13:19'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 19:13:19'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 19:13:19'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:13:19'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 19:13:19'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 19:13:19'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 19:13:19'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 19:13:19'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 19:13:19'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 19:13:19'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 19:13:19'!
ERROR!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:13:35'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:13:35'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:18:14'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:18:32'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:18:36'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:18:36'!
FAILURE!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 19:21:14'!
FAILURE!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 19:21:14'!
FAILURE!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:21:56' prior: 50617463 overrides: 50614730!
* aMultiplier 

	^aMultiplier multiplyToTheInteger: self. 
	
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:22:05' prior: 50617734 overrides: 50614730!
* aMultiplier 

	^aMultiplier multiplyToTheFraction: self. 
	
	
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 19:22:10'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 19:22:10'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 19:22:10'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 19:22:10'!
ERROR!

----SNAPSHOT----(16 April 2023 19:22:24) CuisUniversity-5706.image priorSource: 9145032!

----SNAPSHOT----(16 April 2023 19:26:45) CuisUniversity-5706.image priorSource: 9165092!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:26:54' prior: 50617747!
multiplyToTheFraction: anFractionMultiplier 

	^Fraccion with: anFractionMultiplier numerator * self over: anFractionMultiplier denominator.
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 19:26:57'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 19:26:57'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 19:26:57'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 19:26:57'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 19:26:57'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 19:26:57'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:26:57'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 19:26:57'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:26:57'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:26:57'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 19:26:57'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 19:26:57'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 19:26:57'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 19:26:57'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:26:57'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:26:57'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 19:26:57'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 19:26:57'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 19:26:58'!
PASSED!

----SNAPSHOT----(16 April 2023 19:27:03) CuisUniversity-5706.image priorSource: 9165182!

----SNAPSHOT----(16 April 2023 19:27:36) CuisUniversity-5706.image priorSource: 9169876!

----SNAPSHOT----(16 April 2023 19:28:17) CuisUniversity-5706.image priorSource: 9169966!

----SNAPSHOT----(16 April 2023 19:28:19) CuisUniversity-5706.image priorSource: 9170056!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 19:28:38'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 19:29:29'!
PASSED!

----SNAPSHOT----(16 April 2023 19:29:33) CuisUniversity-5706.image priorSource: 9170146!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:30:19' prior: 50615759 overrides: 50614735!
+ anAdder 
	
	anAdder addToTheInteger: self.
	(anAdder isKindOf: self class) ifTrue: [^self class with: value + anAdder integerValue].
	(anAdder isKindOf: Fraccion) ifTrue: [^Fraccion with: self * anAdder denominator + anAdder numerator over: anAdder denominator].! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:31:06'!
addToTheInteger: anIntegerAdder
	
	^self class with: value + anIntegerAdder integerValue! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:31:48'!
addToTheInteger: anIntegerAdder
	
	^self class with: anIntegerAdder + anIntegerAdder integerValue
	
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:32:10' prior: 50618514!
addToTheInteger: anIntegerAdder
	
	^Fraccion with: self * anIntegerAdder denominator + anIntegerAdder numerator over: anIntegerAdder denominator.
	
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:33:10' prior: 50618497 overrides: 50614735!
+ anAdder 
	
	^anAdder addToTheInteger: self.
	"(anAdder isKindOf: self class) ifTrue: [^self class with: value + anAdder integerValue].
	(anAdder isKindOf: Fraccion) ifTrue: [^Fraccion with: self * anAdder denominator + anAdder numerator over: anAdder denominator].'"! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 19:33:12'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 19:33:12'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 19:33:13'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 19:33:13'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 19:33:13'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 19:33:13'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 19:33:13'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 19:33:13'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 19:33:13'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 19:33:13'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 19:33:13'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 19:33:13'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 19:33:13'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:34:37' prior: 50618521!
addToTheInteger: anIntegerAdder
	
	^Fraccion with: anIntegerAdder * self denominator + self numerator over: self denominator
	
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 19:34:39'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 19:34:40'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 19:34:40'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 19:34:40'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 19:34:40'!
PASSED!

----SNAPSHOT----(16 April 2023 19:34:43) CuisUniversity-5706.image priorSource: 9178946!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:35:15' prior: 50616198 overrides: 50614735!
+ anAdder 

	^anAdder addToTheFraction: self.
	
	"| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [^Fraccion with: anAdder * self denominator + self numerator over: self denominator].
	
	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.
	
	^newNumerator / newDenominator "! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:36:15'!
addToTheFraction: aFractionAdder

	
	| newNumerator newDenominator |
		
	newNumerator := (numerator * aFractionAdder denominator) + (denominator * aFractionAdder numerator).
	newDenominator := denominator * aFractionAdder denominator.
	
	^newNumerator / newDenominator! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:36:31'!
addToTheFraction: aFractionAdder

	
	| newNumerator newDenominator |
		
	newNumerator := (aFractionAdder * aFractionAdder denominator) + (aFractionAdder * aFractionAdder numerator).
	newDenominator := aFractionAdder * aFractionAdder denominator.
	
	^newNumerator / newDenominator! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:37:19' prior: 50618854!
addToTheFraction: aFractionAdder

	
	^Fraccion with: self * aFractionAdder denominator + aFractionAdder numerator over: aFractionAdder denominator! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:37:37' prior: 50618828 overrides: 50614735!
+ anAdder 

	^anAdder addToTheFraction: self.
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 19:37:40'!
PASSED!

----SNAPSHOT----(16 April 2023 19:37:43) CuisUniversity-5706.image priorSource: 9189542!

----SNAPSHOT----(16 April 2023 19:38:20) CuisUniversity-5706.image priorSource: 9195668!

----SNAPSHOT----(16 April 2023 19:38:37) CuisUniversity-5706.image priorSource: 9195758!

----SNAPSHOT----(16 April 2023 19:38:43) CuisUniversity-5706.image priorSource: 9195848!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:41:55' prior: 50616977 overrides: 50614739!
- aSubtrahend 

	^ aSubtrahend substractFromTheInteger: self.

	"(aSubtrahend isKindOf: Fraccion) ifTrue: [^Fraccion with: self * aSubtrahend denominator - aSubtrahend numerator over: aSubtrahend denominator].
	(aSubtrahend isKindOf: self class) ifTrue: [^ self class with: value - aSubtrahend integerValue.]"
	
	
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:43:20'!
substractFromTheInteger: anInteger

	^ self class with: anInteger integerValue - value.

	"(aSubtrahend isKindOf: Fraccion) ifTrue: [^Fraccion with: self * aSubtrahend denominator - aSubtrahend numerator over: aSubtrahend denominator].
	(aSubtrahend isKindOf: self class) ifTrue: [^ self class with: value - aSubtrahend integerValue.]"
	
	
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:44:48'!
substractFromTheInteger: anInteger

	^Fraccion with: anInteger * self denominator - self numerator over: self denominator
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:45:09' prior: 50619028 overrides: 50614739!
- aSubtrahend 

	^ aSubtrahend substractFromTheInteger: self.

	
	
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:45:20' prior: 50619041!
substractFromTheInteger: anInteger

	^ self class with: anInteger integerValue - value.

	
	
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 19:45:23'!
PASSED!

----SNAPSHOT----(16 April 2023 19:45:28) CuisUniversity-5706.image priorSource: 9195938!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:47:30' prior: 50619069!
substractFromTheInteger: anIntegerSubtracted

	^ self class with: anIntegerSubtracted integerValue - value.

	
	
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:47:39' prior: 50619055!
substractFromTheInteger: anIntegerSubtracted

	^Fraccion with: anIntegerSubtracted * self denominator - self numerator over: self denominator
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 19:47:44'!
PASSED!

----SNAPSHOT----(16 April 2023 19:47:47) CuisUniversity-5706.image priorSource: 9201924!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:48:18' prior: 50617278 overrides: 50614739!
- aSubtrahend 

	^aSubtrahend substractFromFraction: self. 
	
	"| newNumerator newDenominator |
	
	(aSubtrahend isKindOf: Entero) ifTrue: [^Fraccion with: self numerator - (aSubtrahend * self denominator) over: self denominator].
	
	(aSubtrahend isKindOf: self class) ifTrue: [newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
	newDenominator := denominator * aSubtrahend denominator.
	
	^newNumerator / newDenominator ]"
	
	
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:50:20'!
substractFromFraction: aFractionSubstracted

	
	| newNumerator newDenominator |
	
	
	newNumerator := (aFractionSubstracted numerator * self denominator) - (aFractionSubstracted denominator * self numerator).
	newDenominator := denominator * aFractionSubstracted denominator.
	
	^newNumerator / newDenominator
	
	
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:52:00'!
substractFromFraction: aFractionSubstracted

	^Fraccion with: aFractionSubstracted numerator - (self * aFractionSubstracted denominator) over: aFractionSubstracted denominator. 
	
	
	
	
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 19:52:05'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 19:52:05'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 19:52:31' prior: 50619369 overrides: 50614739!
- aSubtrahend 

	^aSubtrahend substractFromFraction: self. 
	
	
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 19:52:57'!
PASSED!

----SNAPSHOT----(16 April 2023 19:53:01) CuisUniversity-5706.image priorSource: 9206836!

----SNAPSHOT----(16 April 2023 19:56:22) CuisUniversity-5706.image priorSource: 9217158!

----SNAPSHOT----(16 April 2023 19:57:02) CuisUniversity-5706.image priorSource: 9217248!

----SNAPSHOT----(16 April 2023 20:02:56) CuisUniversity-5706.image priorSource: 9217338!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/16/2023 20:04:47' prior: 50618530 overrides: 50614735!
+ anAdder 
	
	^anAdder addToTheInteger: self.! !

----SNAPSHOT----(16 April 2023 20:05:07) CuisUniversity-5706.image priorSource: 9217428!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/16/2023 20:05:09'!
PASSED!

----STARTUP---- (18 April 2023 22:56:04) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


!classRemoval: #Fraccion stamp: 'NB 4/18/2023 22:56:14'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'NB 4/18/2023 22:56:14'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'NB 4/18/2023 22:56:14'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'NB 4/18/2023 22:56:14'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /Users/nico/Documents/inge1/inge1-2023-1c/02-Numeros/Numero-Exercise.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/18/2023 23:02:09'!
PASSED!

Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'NB 4/18/2023 23:02:16'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'NB 4/18/2023 23:02:26'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRenamed: #Entero2 as: #Entero stamp: 'NB 4/18/2023 23:02:34'!
Smalltalk renameClassNamed: #Entero2 as: #Entero!
!NumeroTest methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:02:34' prior: 50619941!
test31SubstractingFraccionesCanReturnAnEntero

	| threeHalfs |
	
	threeHalfs := (Entero with: 3) / (Entero with: 2).
	
	self assert: threeHalfs - oneHalf equals: one.! !
!Negativo methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:02:34' prior: 50620310 overrides: 50620171!
fibonacci

	^self error: Entero negativeFibonacciErrorDescription. ! !
!NumeroTest methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:02:34' prior: 50619934!
test30FraccionSubstractsEnteroCorrectly

	| sixFifth |
	
	sixFifth := (Entero with: 6) / (Entero with: 5).
	
	self assert: sixFifth - one equals: oneFifth! !
!NumeroTest methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:02:34' prior: 50619828!
test12FraccionAddsEnteroCorrectly

	self assert: oneFifth + one equals: (Entero with: 6) / (Entero with: 5)! !
!Uno methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:02:34' prior: 50620381 overrides: 50620171!
fibonacci
	
	^Entero with: 1.! !
!Positivo methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:02:34' prior: 50620358 overrides: 50620171!
fibonacci
	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	^ (self - one) fibonacci + (self - two) fibonacci! !
!NumeroTest methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:02:34' prior: 50619790!
test08FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := (Entero with: 7) / (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !
!NumeroTest methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:02:34' prior: 50619959!
test34SubstractingAHigherValueToANumberReturnsANegativeNumber

	| negativeThreeHalfs |
	
	negativeThreeHalfs := (Entero with: -3) / (Entero with: 2).	

	self assert: one - fiveHalfs equals: negativeThreeHalfs.! !
!NumeroTest methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:02:34' prior: 50619988!
test38FibonacciNotDefinedForNegativeNumbers

	self 
		should: [negativeOne fibonacci]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Entero negativeFibonacciErrorDescription ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:02:34' prior: 50620071!
negated
	
	^self * (Entero with: -1)! !
!NumeroTest methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:02:34' prior: 50620020 overrides: 16961394!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := one / two.
	oneFifth := one / five.
	twoFifth := two / five.
	twoTwentyfifth := two / (Entero with: 25).
	fiveHalfs := five / two.
	! !
!NumeroTest methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:02:34' prior: 50619821!
test11EnteroAddsFraccionCorrectly
"
	Ahora empieza la diversion!!
"

	self assert: one + oneFifth equals: (Entero with: 6) / (Entero with: 5)! !
!Cero methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:02:34' prior: 50620290 overrides: 50620171!
fibonacci
	
	^Entero with: 1.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/18/2023 23:02:55'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/18/2023 23:02:55'!
PASSED!
!Cero methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:08:12' overrides: 50620245!
isZero
	
	^true.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/18/2023 23:08:15'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/18/2023 23:08:16'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/18/2023 23:08:16'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/18/2023 23:08:16'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/18/2023 23:08:16'!
PASSED!
!Negativo methodsFor: 'arithmetic operations' stamp: 'NB 4/18/2023 23:08:37' overrides: 50620245!
isZero
	
	^false.! !
!Positivo methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:08:52' overrides: 50620245!
isZero
	
	^false! !
!Uno methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:09:03' overrides: 50620245!
isZero
	
	^false! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/18/2023 23:09:06'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/18/2023 23:09:06'!
PASSED!
!Entero methodsFor: 'testing' stamp: 'NB 4/18/2023 23:11:10' prior: 50620245 overrides: 50620083!
isZero
	
	self subclassResponsibility .! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/18/2023 23:11:13'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/18/2023 23:11:14'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/18/2023 23:11:14'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/18/2023 23:11:14'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/18/2023 23:11:14'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/18/2023 23:11:14'!
PASSED!
!Cero methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:13:43' overrides: 50620241!
isOne
	
	^false! !
!Negativo methodsFor: 'arithmetic operations' stamp: 'NB 4/18/2023 23:14:06' overrides: 50620241!
isOne
	
	^false! !
!Positivo methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:14:15' overrides: 50620241!
isOne
	
	^false! !
!Uno methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:14:23' overrides: 50620241!
isOne
	
	^true! !
!Entero methodsFor: 'testing' stamp: 'NB 4/18/2023 23:14:44' prior: 50620241 overrides: 50620079!
isOne
	
	self subclassResponsibility ! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/18/2023 23:14:56'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/18/2023 23:14:56'!
PASSED!
!Cero methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:15:48' overrides: 50620237!
isNegative
	
	^false! !
!Negativo methodsFor: 'arithmetic operations' stamp: 'NB 4/18/2023 23:15:57' overrides: 50620237!
isNegative
	
	^true! !
!Positivo methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:16:06' overrides: 50620237!
isNegative
	
	^false! !
!Uno methodsFor: 'as yet unclassified' stamp: 'NB 4/18/2023 23:16:14' overrides: 50620237!
isNegative
	
	^false! !
!Cero class methodsFor: 'no messages' stamp: 'NB 4/18/2023 23:22:46'!
representsInteger: anInteger

	^anInteger = 0.! !
!Negativo class methodsFor: 'instance creation' stamp: 'NB 4/18/2023 23:23:19'!
representsInteger: anInteger

	^anInteger < 0.! !
!Positivo class methodsFor: 'no messages' stamp: 'NB 4/18/2023 23:23:42'!
representsInteger: anInteger

	^anInteger > 1.! !
!Uno class methodsFor: 'no messages' stamp: 'NB 4/18/2023 23:24:02'!
representsInteger: anInteger

	^anInteger > 1.! !

----SNAPSHOT----(18 April 2023 23:24:13) CuisUniversity-5706.image priorSource: 9217680!
!Entero class methodsFor: 'instance creation' stamp: 'NB 4/18/2023 23:27:09' prior: 50620262!
with: aValue 

     	|integerSubclassForValue|
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	integerSubclassForValue:= self subclasses detect: [:integerSubclass | integerSubclass representsInteger: aValue].
	
	^integerSubclassForValue new initalizeWith: aValue.
	! !
!Entero class methodsFor: 'instance creation' stamp: 'NB 4/18/2023 23:35:50'!
representsInteger: anInteger

	self subclassResponsibility ! !
!Uno class methodsFor: 'instance creation' stamp: 'NB 4/18/2023 23:43:52' prior: 50621593 overrides: 50621617!
representsInteger: anInteger

	^anInteger = 1.! !

----SNAPSHOT----(18 April 2023 23:44:25) CuisUniversity-5706.image priorSource: 9278289!

 a:= Entero with: 1.!

a class.!

b := Entero with:2.!

b class.!

c:= Entero with: -1.!

c class.!

d := Entero with: 0!

d class.!
!Entero class methodsFor: 'instance creation' stamp: 'NB 4/18/2023 23:51:49' prior: 50621601!
with: aValue 

     	|integerSubclassForValue|
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	integerSubclassForValue:= Entero subclasses detect: [:integerSubclass | integerSubclass representsInteger: aValue].
	
	^integerSubclassForValue new initalizeWith: aValue.
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/18/2023 23:51:53'!
PASSED!

!methodRemoval: Entero #isNegative stamp: 'NB 4/18/2023 23:52:27'!
isNegative
	
	^value < 0!

!methodRemoval: Entero #isOne stamp: 'NB 4/18/2023 23:52:27'!
isOne
	
	self subclassResponsibility !

!methodRemoval: Entero #isZero stamp: 'NB 4/18/2023 23:52:27'!
isZero
	
	self subclassResponsibility .!
!Entero class methodsFor: 'instance creation' stamp: 'NB 4/18/2023 23:54:26' prior: 50621635!
with: aValue 

     	
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	"integerSubclassForValue:= Entero subclasses detect: [:integerSubclass | integerSubclass representsInteger: aValue].
	
	^integerSubclassForValue new initalizeWith: aValue."
	
	aValue > 1 ifTrue:[^Positivo new initalizeWith: aValue].
	aValue < 0 ifTrue:[^Negativo new initalizeWith: aValue]	.
	aValue = 0 ifTrue:[^Cero new initalizeWith: aValue]	.
	aValue = 1 ifTrue:[^Uno new initalizeWith: aValue].
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/18/2023 23:54:32'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/18/2023 23:56:37'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/18/2023 23:56:47'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/18/2023 23:56:52'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/18/2023 23:56:56'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/18/2023 23:57:20'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/18/2023 23:57:27'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/18/2023 23:57:31'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/18/2023 23:57:46'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/18/2023 23:57:51'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/18/2023 23:57:56'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:58:01'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/18/2023 23:58:09'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:58:15'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/18/2023 23:58:22'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/18/2023 23:58:22'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/18/2023 23:58:23'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/18/2023 23:59:44'!
PASSED!

----SNAPSHOT----(19 April 2023 00:00:09) CuisUniversity-5706.image priorSource: 9279249!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/19/2023 00:00:26'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/19/2023 00:02:00'!
PASSED!

e:= Entero new!

e isNegative!

f:= Entero with: 2.!

f isNegative!

-2 class!

negativeTwo class!

negativeOne class!

aDivisor class!

aDividend class!

self class!

----SNAPSHOT----(19 April 2023 00:26:02) CuisUniversity-5706.image priorSource: 9298810!

----SNAPSHOT----(19 April 2023 00:31:34) CuisUniversity-5706.image priorSource: 9303278!

!classRemoval: #Fraccion stamp: 'NB 4/19/2023 00:31:54'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'NB 4/19/2023 00:31:55'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Positivo stamp: 'NB 4/19/2023 00:31:55'!
Entero subclass: #Positivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Negativo stamp: 'NB 4/19/2023 00:31:55'!
Entero subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'NB 4/19/2023 00:31:55'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'NB 4/19/2023 00:31:55'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'NB 4/19/2023 00:31:55'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'NB 4/19/2023 00:31:56'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /Users/nico/Documents/poo_inge_old/ingenieria1-ejercicios-master/19-Numeros/Numero-Exercise-Sacando-Todos-Los-Ifs.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/19/2023 00:32:36'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/19/2023 00:34:01'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/19/2023 01:04:50'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/19/2023 01:05:05'!
PASSED!

!classRemoval: #Fraccion stamp: 'NB 4/19/2023 01:06:08'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'NB 4/19/2023 01:06:08'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #PositivosSinUno stamp: 'NB 4/19/2023 01:06:08'!
Entero subclass: #PositivosSinUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroNegativo stamp: 'NB 4/19/2023 01:06:09'!
Entero subclass: #NumeroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'NB 4/19/2023 01:06:09'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'NB 4/19/2023 01:06:09'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'NB 4/19/2023 01:06:09'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'NB 4/19/2023 01:06:09'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /Users/nico/Documents/inge1/macos64/Numero-Exercise.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/19/2023 01:06:43'!
PASSED!

!classRenamed: #Positivo as: #PositivoSinUno stamp: 'NB 4/19/2023 01:07:09'!
Smalltalk renameClassNamed: #Positivo as: #PositivoSinUno!
!Entero class methodsFor: 'as yet unclassified' stamp: 'NB 4/19/2023 01:07:09' prior: 50624098!
with: aValue 

     	
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	"integerSubclassForValue:= Entero subclasses detect: [:integerSubclass | integerSubclass representsInteger: aValue].
	
	^integerSubclassForValue new initalizeWith: aValue."
	
	aValue > 1 ifTrue:[^PositivoSinUno new initalizeWith: aValue].
	aValue < 0 ifTrue:[^Negativo new initalizeWith: aValue]	.
	aValue = 0 ifTrue:[^Cero new initalizeWith: aValue]	.
	aValue = 1 ifTrue:[^Uno new initalizeWith: aValue].
	! !
!Fraccion class methodsFor: 'intance creation' stamp: 'NB 4/19/2023 01:08:36' prior: 50624482!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	"aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ]."
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue:[ ^aDividend negated / aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/19/2023 01:08:41'!
FAILURE!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/19/2023 01:08:41'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/19/2023 01:08:41'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/19/2023 01:08:41'!
PASSED!
!Fraccion class methodsFor: 'intance creation' stamp: 'NB 4/19/2023 01:10:32' prior: 50624661!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	"aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ]."
	"aDividend isZero ifTrue: [ ^aDividend ]."
	
	"aDivisor isNegative ifTrue:[ ^aDividend negated / aDivisor negated]."
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	"denominator isOne ifTrue: [ ^numerator ]."
	
	^denominator newFractionWithNumerator: numerator.

	"^self new initializeWith: numerator over: denominator"
	! !
!Cero methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 01:11:18'!
newFractionWithNumerator: anIntegerNumerator

	! !
!Cero methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 01:11:41' prior: 50624833!
newFractionWithNumerator: anIntegerNumerator

	self error: self canNotDivideByZeroErrorDescription. ! !
!Cero methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 01:11:59' prior: 50624838!
newFractionWithNumerator: anIntegerNumerator

	self error: self class canNotDivideByZeroErrorDescription. ! !
!Uno methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 01:13:02'!
newFractionWithNumerator: anIntegerNumerator

	^anIntegerNumerator.! !

----SNAPSHOT----(19 April 2023 01:16:20) CuisUniversity-5706.image priorSource: 9303368!

----STARTUP---- (19 April 2023 16:57:36) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


!classRemoval: #Fraccion stamp: 'NB 4/19/2023 16:59:14'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'NB 4/19/2023 16:59:14'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #PositivoSinUno stamp: 'NB 4/19/2023 16:59:15'!
Entero subclass: #PositivoSinUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Negativo stamp: 'NB 4/19/2023 16:59:15'!
Entero subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'NB 4/19/2023 16:59:15'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'NB 4/19/2023 16:59:15'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'NB 4/19/2023 16:59:15'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'NB 4/19/2023 16:59:16'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /Users/nico/Documents/inge1/inge1-2023-1c/02-Numeros/Numero-Exercise.st----!

!classRenamed: #Entero2 as: #Entero stamp: 'NB 4/19/2023 16:59:55'!
Smalltalk renameClassNamed: #Entero2 as: #Entero!
!NumeroTest methodsFor: 'as yet unclassified' stamp: 'NB 4/19/2023 16:59:55' prior: 50625117!
test31SubstractingFraccionesCanReturnAnEntero

	| threeHalfs |
	
	threeHalfs := (Entero with: 3) / (Entero with: 2).
	
	self assert: threeHalfs - oneHalf equals: one.! !
!Negativo methodsFor: 'as yet unclassified' stamp: 'NB 4/19/2023 16:59:55' prior: 50625486 overrides: 50625347!
fibonacci

	^self error: Entero negativeFibonacciErrorDescription. ! !
!NumeroTest methodsFor: 'as yet unclassified' stamp: 'NB 4/19/2023 16:59:55' prior: 50625110!
test30FraccionSubstractsEnteroCorrectly

	| sixFifth |
	
	sixFifth := (Entero with: 6) / (Entero with: 5).
	
	self assert: sixFifth - one equals: oneFifth! !
!NumeroTest methodsFor: 'as yet unclassified' stamp: 'NB 4/19/2023 16:59:55' prior: 50625004!
test12FraccionAddsEnteroCorrectly

	self assert: oneFifth + one equals: (Entero with: 6) / (Entero with: 5)! !
!Uno methodsFor: 'as yet unclassified' stamp: 'NB 4/19/2023 16:59:55' prior: 50625557 overrides: 50625347!
fibonacci
	
	^Entero with: 1.! !
!Positivo methodsFor: 'as yet unclassified' stamp: 'NB 4/19/2023 16:59:55' prior: 50625534 overrides: 50625347!
fibonacci
	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	^ (self - one) fibonacci + (self - two) fibonacci! !
!NumeroTest methodsFor: 'as yet unclassified' stamp: 'NB 4/19/2023 16:59:55' prior: 50624966!
test08FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := (Entero with: 7) / (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !
!NumeroTest methodsFor: 'as yet unclassified' stamp: 'NB 4/19/2023 16:59:55' prior: 50625135!
test34SubstractingAHigherValueToANumberReturnsANegativeNumber

	| negativeThreeHalfs |
	
	negativeThreeHalfs := (Entero with: -3) / (Entero with: 2).	

	self assert: one - fiveHalfs equals: negativeThreeHalfs.! !
!NumeroTest methodsFor: 'as yet unclassified' stamp: 'NB 4/19/2023 16:59:55' prior: 50625164!
test38FibonacciNotDefinedForNegativeNumbers

	self 
		should: [negativeOne fibonacci]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Entero negativeFibonacciErrorDescription ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'NB 4/19/2023 16:59:55' prior: 50625247!
negated
	
	^self * (Entero with: -1)! !
!NumeroTest methodsFor: 'as yet unclassified' stamp: 'NB 4/19/2023 16:59:55' prior: 50625196 overrides: 16961394!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := one / two.
	oneFifth := one / five.
	twoFifth := two / five.
	twoTwentyfifth := two / (Entero with: 25).
	fiveHalfs := five / two.
	! !
!NumeroTest methodsFor: 'as yet unclassified' stamp: 'NB 4/19/2023 16:59:55' prior: 50624997!
test11EnteroAddsFraccionCorrectly
"
	Ahora empieza la diversion!!
"

	self assert: one + oneFifth equals: (Entero with: 6) / (Entero with: 5)! !
!Cero methodsFor: 'as yet unclassified' stamp: 'NB 4/19/2023 16:59:55' prior: 50625466 overrides: 50625347!
fibonacci
	
	^Entero with: 1.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/19/2023 17:00:01'!
PASSED!

!classRenamed: #Positivo as: #PositivoSinUno stamp: 'NB 4/19/2023 17:01:33'!
Smalltalk renameClassNamed: #Positivo as: #PositivoSinUno!
!Entero class methodsFor: 'as yet unclassified' stamp: 'NB 4/19/2023 17:01:33' prior: 50625438!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	aValue > 1 ifTrue:[^PositivoSinUno new initalizeWith: aValue].
	aValue < 0 ifTrue:[^Negativo new initalizeWith: aValue]	.
	aValue = 0 ifTrue:[^Cero new initalizeWith: aValue]	.
	aValue = 1 ifTrue:[^Uno new initalizeWith: aValue]	.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/19/2023 17:01:40'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/19/2023 17:01:40'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 17:03:57' prior: 50625341!
divideSelfWithTheInteger: aDividendInteger 
	
	^Fraccion with: aDividendInteger over: self ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 17:04:11' prior: 50625334!
divideSelfWithTheFraccion: aDividendFraccion 
	^Fraccion with: aDividendFraccion numerator over: aDividendFraccion denominator * self
	! !

----SNAPSHOT----(19 April 2023 17:04:24) CuisUniversity-5706.image priorSource: 9382566!

!methodRemoval: Cero #initalizeWith: stamp: 'NB 4/19/2023 17:05:22'!
initalizeWith: aValue 
	
	value := aValue!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/19/2023 17:05:32'!
PASSED!

!methodRemoval: Negativo #initalizeWith: stamp: 'NB 4/19/2023 17:05:51'!
initalizeWith: aValue 
	
	value := aValue!

!methodRemoval: PositivoSinUno #initalizeWith: stamp: 'NB 4/19/2023 17:05:55'!
initalizeWith: aValue 
	
	value := aValue!

!methodRemoval: Uno #initalizeWith: stamp: 'NB 4/19/2023 17:06:00'!
initalizeWith: aValue 
	
	value := aValue!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/19/2023 17:06:03'!
PASSED!

----SNAPSHOT----(19 April 2023 17:06:09) CuisUniversity-5706.image priorSource: 9424714!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 17:07:53' prior: 50625618!
divideSelfWithTheFraccion: aDividendFraccion 
	
	^Fraccion with: aDividendFraccion numerator * self  denominator over: self numerator * aDividendFraccion denominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 17:08:04' prior: 50625626!
divideSelfWithTheInteger: aDividendInteger 
	
	^Fraccion with: aDividendInteger * self  denominator over: self numerator! !

----SNAPSHOT----(19 April 2023 17:10:24) CuisUniversity-5706.image priorSource: 9433979!

----SNAPSHOT----(19 April 2023 17:10:26) CuisUniversity-5706.image priorSource: 9434587!
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 17:10:56' prior: 50625371!
substractFromFraction: aFractionMinuend

	^Fraccion with: aFractionMinuend numerator - (self * aFractionMinuend denominator) over: aFractionMinuend denominator. 
	
	
	
	
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 17:11:11' prior: 50625380!
substractFromTheInteger: anIntegerMinuend

	^ self class with: anIntegerMinuend integerValue - value.

	
	
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 17:11:34' prior: 50625648!
substractFromFraction: aFractionMinuend

	
	| newNumerator newDenominator |
	
	
	newNumerator := (aFractionMinuend numerator * self denominator) - (aFractionMinuend denominator * self numerator).
	newDenominator := denominator * aFractionMinuend denominator.
	
	^newNumerator / newDenominator
	
	
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 17:11:45' prior: 50625661!
substractFromTheInteger: anIntegerMinuend

	^Fraccion with: anIntegerMinuend * self denominator - self numerator over: self denominator
! !

----SNAPSHOT----(19 April 2023 17:13:32) CuisUniversity-5706.image priorSource: 9434677!

----SNAPSHOT----(19 April 2023 17:13:34) CuisUniversity-5706.image priorSource: 9435947!

----SNAPSHOT----(19 April 2023 17:13:37) CuisUniversity-5706.image priorSource: 9436037!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/19/2023 17:13:59'!
PASSED!

----SNAPSHOT----(19 April 2023 17:14:53) CuisUniversity-5706.image priorSource: 9436127!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/19/2023 17:14:55'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/19/2023 17:15:29'!
PASSED!

----SNAPSHOT----(19 April 2023 17:15:42) CuisUniversity-5706.image priorSource: 9440572!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/19/2023 18:39:08'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 18:39:11'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 18:39:12'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 18:39:12'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/19/2023 18:39:12'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/19/2023 18:39:12'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/19/2023 18:39:12'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/19/2023 18:39:12'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/19/2023 18:39:12'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/19/2023 18:39:12'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/19/2023 18:39:12'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/19/2023 18:39:12'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/19/2023 18:39:12'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/19/2023 18:39:12'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/19/2023 18:39:12'!
PASSED!
!Cero methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 18:42:28' overrides: 50625413!
isNegative

	^false.! !
!Cero methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 18:42:36' overrides: 50625417!
isOne

	^false.! !
!Cero methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 18:42:42' overrides: 50625421!
isZero

	^true.! !
!Negativo methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 18:42:57' overrides: 50625413!
isNegative

	^true! !
!Negativo methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 18:43:07' overrides: 50625417!
isOne

	^false! !
!Negativo methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 18:43:11' overrides: 50625421!
isZero

	^false! !
!PositivoSinUno methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 18:43:26' overrides: 50625413!
isNegative

  	^false! !
!PositivoSinUno methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 18:43:31' overrides: 50625417!
isOne

  	^false! !
!PositivoSinUno methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 18:43:34' overrides: 50625421!
isZero

  	^false! !
!Uno methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 18:43:45' overrides: 50625413!
isNegative

	^false! !
!Uno methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 18:43:52' overrides: 50625421!
isZero

	^false! !
!Uno methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 18:43:59'!
isUno

	^true! !
!Uno methodsFor: 'arithmetic operations' stamp: 'NB 4/19/2023 18:44:24' overrides: 50625417!
isOne

	^true! !

!methodRemoval: Uno #isUno stamp: 'NB 4/19/2023 18:44:28'!
isUno

	^true!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/19/2023 18:44:32'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/19/2023 18:58:00'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/19/2023 18:58:06'!
PASSED!

!classRemoval: #Fraccion stamp: 'NB 4/19/2023 22:16:42'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'NB 4/19/2023 22:16:42'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #PositivoSinUno stamp: 'NB 4/19/2023 22:16:42'!
Entero subclass: #PositivoSinUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Negativo stamp: 'NB 4/19/2023 22:16:43'!
Entero subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'NB 4/19/2023 22:16:43'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'NB 4/19/2023 22:16:43'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'NB 4/19/2023 22:16:43'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'NB 4/19/2023 22:16:43'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /Users/nico/Documents/inge1/inge1-2023-1c/02-Numeros/Numeros-Ejercicio.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'NB 4/19/2023 22:16:59'!
PASSED!

----SNAPSHOT----(19 April 2023 22:17:07) CuisUniversity-5706.image priorSource: 9449372!

----STARTUP---- (20 April 2023 21:04:57) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


----End fileIn of /Users/nico/Documents/inge1/2023-1c/03-Stack/Stack-Exercise.st----!
!OOStack methodsFor: 'no messages' stamp: 'NB 4/20/2023 21:06:45'!
isEmpty 


    	^true! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/20/2023 21:06:50'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:07:16'!
push: something


    	^true! !

Object subclass: #OOStack
	instanceVariableNames: 'values'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'NB 4/20/2023 21:07:29'!
Object subclass: #OOStack
	instanceVariableNames: 'values'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:08:12' overrides: 16920235!
initialize


    	values:= OrderedCollection new.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:08:43' prior: 50628442!
isEmpty 


    	^values size = 0.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/20/2023 21:08:47'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:09:30' prior: 50628449!
push: something


    	values addLast: something.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/20/2023 21:09:33'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/20/2023 21:09:36'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:09:59'!
pop


    	values removeLast .! !

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/20/2023 21:10:02'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:10:06'!
FAILURE!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:10:06'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:10:30' prior: 50628489!
pop

	
    	^values removeLast .! !

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:10:34'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/20/2023 21:10:39'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/20/2023 21:10:43'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/20/2023 21:10:43'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/20/2023 21:10:43'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:10:43'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/20/2023 21:10:43'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:10:43'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/20/2023 21:10:43'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:10:43'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/20/2023 21:10:43'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:10:43'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:11:03'!
top

	
    	^values last ! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/20/2023 21:11:05'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/20/2023 21:11:05'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/20/2023 21:11:05'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:11:05'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/20/2023 21:11:05'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:11:05'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/20/2023 21:11:05'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:11:05'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/20/2023 21:11:05'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:11:05'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:11:29' overrides: 16901663!
size

	
    	^values size! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/20/2023 21:11:32'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/20/2023 21:11:32'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/20/2023 21:11:32'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:11:32'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/20/2023 21:11:32'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:11:32'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/20/2023 21:11:32'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:11:32'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/20/2023 21:11:32'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:11:32'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:12:15' prior: 50628503!
pop

	values isEmpty ifTrue: [self error: 'Error']
    	^values removeLast .! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/20/2023 21:12:17'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/20/2023 21:12:17'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/20/2023 21:12:17'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:12:17'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/20/2023 21:12:17'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:12:17'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/20/2023 21:12:17'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:12:17'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/20/2023 21:12:17'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:12:17'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:12:56' prior: 50628619!
pop

	values isEmpty ifTrue: [self error: OOStack errorCategoryName ]
    	^values removeLast .! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:13:05' prior: 50628657!
pop

	values isEmpty ifTrue: [self error: OOStack stackEmptyErrorDescription ]
    	^values removeLast .! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/20/2023 21:13:07'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/20/2023 21:13:07'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/20/2023 21:13:07'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:13:07'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/20/2023 21:13:07'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:13:07'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/20/2023 21:13:07'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:13:07'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/20/2023 21:13:07'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:13:07'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:13:22' prior: 50628663!
pop

	values isEmpty ifTrue: [self error: OOStack stackEmptyErrorDescription ].
    	^values removeLast .! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/20/2023 21:13:24'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/20/2023 21:13:24'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/20/2023 21:13:24'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:13:24'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/20/2023 21:13:24'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:13:24'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/20/2023 21:13:24'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:13:24'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/20/2023 21:13:24'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:13:24'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:13:24'!
FAILURE!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:13:34'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/20/2023 21:13:36'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:13:38'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/20/2023 21:13:39'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:13:42'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/20/2023 21:13:45'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:13:47'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:13:47'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:14:06' prior: 50628545!
top

	values isEmpty ifTrue: [self error: OOStack stackEmptyErrorDescription ].
    	^values last ! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/20/2023 21:14:08'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/20/2023 21:14:08'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/20/2023 21:14:08'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:14:08'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/20/2023 21:14:08'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:14:08'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/20/2023 21:14:08'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:14:08'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/20/2023 21:14:08'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:14:08'!
PASSED!

----SNAPSHOT----(20 April 2023 21:18:32) CuisUniversity-5706.image priorSource: 9492150!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:18:40' prior: 50628702!
pop

	self isEmpty ifTrue: [self error: OOStack stackEmptyErrorDescription ].
    	^values removeLast .! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:18:46' prior: 50628772!
top

	self isEmpty ifTrue: [self error: OOStack stackEmptyErrorDescription ].
    	^values last ! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/20/2023 21:18:48'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/20/2023 21:18:48'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/20/2023 21:18:48'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:18:48'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/20/2023 21:18:48'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:18:48'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/20/2023 21:18:48'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:18:48'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/20/2023 21:18:48'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:18:48'!
PASSED!

OOStack subclass: #EmptyOOStack
	instanceVariableNames: 'values'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #EmptyOOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #EmptyOOStack category: 'Stack-Exercise' stamp: 'NB 4/20/2023 21:19:33'!
OOStack subclass: #EmptyOOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #NonEmptyOOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NonEmptyOOStack category: 'Stack-Exercise' stamp: 'NB 4/20/2023 21:19:48'!
OOStack subclass: #NonEmptyOOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!EmptyOOStack methodsFor: 'no messages' stamp: 'NB 4/20/2023 21:20:11' overrides: 50628814!
pop 

	self error: OOStack stackEmptyErrorDescription! !
!NonEmptyOOStack methodsFor: 'no messages' stamp: 'NB 4/20/2023 21:20:36' overrides: 50628814!
pop 

	^values removeLast .! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:20:45' prior: 50628814!
pop

	self subclassResponsibility .! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/20/2023 21:20:58'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/20/2023 21:20:58'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/20/2023 21:20:58'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:20:58'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/20/2023 21:20:58'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:20:58'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/20/2023 21:20:58'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:20:58'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/20/2023 21:20:58'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:20:58'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:22:24' prior: 50628465 overrides: 16920235!
initialize


    	values:= OrderedCollection new.
	! !

Object subclass: #StackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackElement category: 'Stack-Exercise' stamp: 'NB 4/20/2023 21:35:45'!
Object subclass: #StackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

StackElement subclass: #EmptyStackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #EmptyStackElement category: 'Stack-Exercise' stamp: 'NB 4/20/2023 21:36:06'!
StackElement subclass: #EmptyStackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

StackElement subclass: #NonEmptyStackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NonEmptyStackElement category: 'Stack-Exercise' stamp: 'NB 4/20/2023 21:36:16'!
StackElement subclass: #NonEmptyStackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----SNAPSHOT----(20 April 2023 21:37:01) CuisUniversity-5706.image priorSource: 9509113!

Object subclass: #StackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackState category: 'Stack-Exercise' stamp: 'NB 4/20/2023 21:46:48'!
Object subclass: #StackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOStack
	instanceVariableNames: 'values estado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'NB 4/20/2023 21:48:33'!
Object subclass: #OOStack
	instanceVariableNames: 'values estado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:48:53' prior: 50628934 overrides: 16920235!
initialize


    	values:= OrderedCollection new.
	estado:= 'vacio'.
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:49:43' prior: 50628896!
pop

	(estado = 'vacia') ifTrue: [self error: OOStack stackEmptyErrorDescription].! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:49:54' prior: 50629007!
pop

	(estado = 'vacia') ifTrue: [self error: OOStack stackEmptyErrorDescription].
	^values removeLast .! !

!classRemoval: #NonEmptyOOStack stamp: 'NB 4/20/2023 21:50:01'!
OOStack subclass: #NonEmptyOOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #EmptyOOStack stamp: 'NB 4/20/2023 21:50:06'!
OOStack subclass: #EmptyOOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----SNAPSHOT----(20 April 2023 21:50:08) CuisUniversity-5706.image priorSource: 9514346!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:50:26' prior: 50628821!
top

	(estado = 'vacia') ifTrue: [self error: OOStack stackEmptyErrorDescription ].
    	^values last ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:50:46' prior: 50628470!
isEmpty 


    	^estado  = 'vacia'.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:51:00' prior: 50628478!
push: something

	estado:= 'novacia'.
    	values addLast: something.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/20/2023 21:51:06'!
FAILURE!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/20/2023 21:51:06'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/20/2023 21:51:06'!
FAILURE!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:51:06'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/20/2023 21:51:06'!
FAILURE!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:51:06'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/20/2023 21:51:06'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:51:06'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/20/2023 21:51:06'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:51:06'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:52:23' prior: 50629013!
pop

	(estado = 'vacia') ifTrue: [self error: OOStack stackEmptyErrorDescription].
	(values size = 1) ifTrue: [estado:= 'vacia'].
	^values removeLast .! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/20/2023 21:52:27'!
FAILURE!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/20/2023 21:52:27'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/20/2023 21:52:27'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:52:27'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/20/2023 21:52:27'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:52:27'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/20/2023 21:52:27'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:52:27'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/20/2023 21:52:27'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:52:27'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/20/2023 21:52:42' prior: 50629001 overrides: 16920235!
initialize


    	values:= OrderedCollection new.
	estado:= 'vacia'.
	! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/20/2023 21:52:44'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/20/2023 21:52:44'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/20/2023 21:52:44'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:52:44'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/20/2023 21:52:44'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/20/2023 21:52:44'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/20/2023 21:52:44'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:52:44'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/20/2023 21:52:44'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/20/2023 21:52:44'!
PASSED!

----SNAPSHOT----(20 April 2023 21:52:47) CuisUniversity-5706.image priorSource: 9516185!

StackState subclass: #EmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #EmptyStackState category: 'Stack-Exercise' stamp: 'NB 4/20/2023 21:53:10'!
StackState subclass: #EmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

StackState subclass: #NonEmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NonEmptyStackState category: 'Stack-Exercise' stamp: 'NB 4/20/2023 21:53:14'!
StackState subclass: #NonEmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----SNAPSHOT----(20 April 2023 21:53:41) CuisUniversity-5706.image priorSource: 9520445!

----SNAPSHOT----(20 April 2023 22:06:03) CuisUniversity-5706.image priorSource: 9521296!

----STARTUP---- (22 April 2023 00:03:45) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


!classRemoval: #NonEmptyStackState stamp: 'NB 4/22/2023 00:04:07'!
StackState subclass: #NonEmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #EmptyStackState stamp: 'NB 4/22/2023 00:04:07'!
StackState subclass: #EmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #StackState stamp: 'NB 4/22/2023 00:04:07'!
Object subclass: #StackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #NonEmptyStackElement stamp: 'NB 4/22/2023 00:04:07'!
StackElement subclass: #NonEmptyStackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #EmptyStackElement stamp: 'NB 4/22/2023 00:04:08'!
StackElement subclass: #EmptyStackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #StackElement stamp: 'NB 4/22/2023 00:04:08'!
Object subclass: #StackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefix stamp: 'NB 4/22/2023 00:04:08'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'NB 4/22/2023 00:04:08'!
Object subclass: #OOStack
	instanceVariableNames: 'values estado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'NB 4/22/2023 00:04:08'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'NB 4/22/2023 00:04:08'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of /Users/nico/Documents/poo_inge_old/Stack-Exercise-NicolasBukovits.1/snapshot/source.st----!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/22/2023 00:05:41'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/22/2023 00:05:41'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/22/2023 00:05:41'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/22/2023 00:05:41'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/22/2023 00:05:41'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/22/2023 00:05:41'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/22/2023 00:05:41'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 00:05:41'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/22/2023 00:05:41'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 00:05:41'!
PASSED!

!classRemoval: #StackPointerElement stamp: 'NB 4/22/2023 00:35:08'!
StackElement subclass: #StackPointerElement
	instanceVariableNames: 'actualElement elementBehind'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #StackBaseElement stamp: 'NB 4/22/2023 00:35:08'!
StackElement subclass: #StackBaseElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #StackElement stamp: 'NB 4/22/2023 00:35:08'!
Object subclass: #StackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'NB 4/22/2023 00:35:08'!
Object subclass: #OOStack
	instanceVariableNames: 'top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'NB 4/22/2023 00:35:09'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of /Users/nico/Documents/inge1/inge1-2023-1c/03-Stack/Stack-Exercise.st----!

Object subclass: #StackBaseElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackBaseElement category: 'Stack-Exercise' stamp: 'NB 4/22/2023 00:46:11'!
Object subclass: #StackBaseElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #StackBaseElement stamp: 'NB 4/22/2023 00:46:26'!
Object subclass: #StackBaseElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #StackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackElement category: 'Stack-Exercise' stamp: 'NB 4/22/2023 00:46:40'!
Object subclass: #StackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

StackElement subclass: #StackBaseElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackBaseElement category: 'Stack-Exercise' stamp: 'NB 4/22/2023 00:46:48'!
StackElement subclass: #StackBaseElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

StackElement subclass: #StackPointerElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackPointerElement category: 'Stack-Exercise' stamp: 'NB 4/22/2023 00:47:04'!
StackElement subclass: #StackPointerElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!StackElement methodsFor: 'no messages' stamp: 'NB 4/22/2023 00:47:28'!
count 

	self subclassResponsibility ! !
!StackBaseElement methodsFor: 'no messages' stamp: 'NB 4/22/2023 00:47:42' overrides: 50629836!
count

	^0.! !

StackElement subclass: #StackPointerElement
	instanceVariableNames: 'value elementBelow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackPointerElement category: 'Stack-Exercise' stamp: 'NB 4/22/2023 00:49:01'!
StackElement subclass: #StackPointerElement
	instanceVariableNames: 'value elementBelow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!StackPointerElement methodsFor: 'no messages' stamp: 'NB 4/22/2023 00:49:25' overrides: 50629836!
count

	^1 + elementBelow count.! !
!StackPointerElement methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 00:54:13'!
element

	^value.! !
!StackPointerElement methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 00:54:42' overrides: 16902254!
value

	^value.! !

!methodRemoval: StackPointerElement #value stamp: 'NB 4/22/2023 00:55:20'!
value

	^value.!
!StackElement methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 00:55:32'!
element 

	self subclassResponsibility ! !
!StackElement methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 00:55:37'!
isBase 

	self subclassResponsibility ! !
!StackElement methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 00:55:54'!
top 

	self subclassResponsibility ! !
!StackBaseElement methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 00:56:34' overrides: 50629876!
isBase

	^true! !
!StackPointerElement methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 00:56:50' overrides: 50629876!
isBase

	^false! !
!StackBaseElement methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 00:57:37' overrides: 50629872!
element

	self error: OOStack stackEmptyErrorDescription.! !
!StackBaseElement methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 00:58:43'!
elementBelow

	self error: OOStack stackEmptyErrorDescription.! !
!StackBaseElement methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 00:58:55'!
pop

	self error: OOStack stackEmptyErrorDescription.! !
!StackBaseElement methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 00:59:04' overrides: 50629880!
top

	self error: OOStack stackEmptyErrorDescription.! !
!StackElement methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 00:59:26'!
pop 

	self subclassResponsibility ! !
!StackElement methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 00:59:36'!
elementBelow 

	self subclassResponsibility ! !
!StackPointerElement class methodsFor: 'no messages' stamp: 'NB 4/22/2023 01:05:06'!
with: anObjectPointedByAStack elementBelow: anObjectBelowPointedElement

	^StackPointerElement new initializeWith: anObjectPointedByAStack elementBelow: anObjectBelowPointedElement! !

StackPointerElement with: 1 elementBelow : 2.!
!StackPointerElement class methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 01:06:02' prior: 50629923!
with: anObjectPointedByAStack elementBelow: anObjectBelowPointedElement

	^(StackPointerElement new) initializeWith: anObjectPointedByAStack elementBelow: anObjectBelowPointedElement! !

StackPointerElement with: 1 elementBelow : 2.!
!StackPointerElement methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 01:19:57'!
initializeWith: anObjectPointedByAStack elementBelow: anObjectBelowPointedElement

	value:= anObjectPointedByAStack .
	elementBelow  := anObjectBelowPointedElement .
	! !

----SNAPSHOT----(22 April 2023 01:21:55) CuisUniversity-5706.image priorSource: 9521386!

StackPointerElement with: 1 elementBelow : 2.!
!StackPointerElement methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 01:23:17' overrides: 50629914!
pop

	^self! !
!StackPointerElement methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 01:23:32' overrides: 50629918!
elementBelow

	^elementBelow ! !
!StackPointerElement methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 01:23:41' overrides: 50629880!
top

	^value ! !

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'NB 4/22/2023 01:24:48'!
Object subclass: #OOStack
	instanceVariableNames: 'top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'no messages' stamp: 'NB 4/22/2023 01:24:45' overrides: 16920235!
initialize

	top:= StackBaseElement new.! !

!classDefinition: 'OOStack class' category: 'Stack-Exercise' stamp: 'NB 4/22/2023 01:25:43'!
OOStack class
	instanceVariableNames: 't'!

!classDefinition: 'OOStack class' category: 'Stack-Exercise' stamp: 'NB 4/22/2023 01:25:45'!
OOStack class
	instanceVariableNames: 't top'!

	t^top isBase.!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 01:25:57'!
isEmpty

	^top isBase.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 01:26:56'!
pop

	|elementAtTop|
	elementAtTop:= top element.
	top:= top elementBelow.
	^top elementAtTop.! !

----SNAPSHOT----(22 April 2023 01:27:12) CuisUniversity-5706.image priorSource: 9545674!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 01:32:48'!
push: anObjectToBeAddedAtTheTop

	top:= StackPointerElement with: anObjectToBeAddedAtTheTop elementBelow: top.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 01:33:17' overrides: 16901663!
size

	^top count.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 01:33:31'!
top

	^top element.! !

----SNAPSHOT----(22 April 2023 01:33:37) CuisUniversity-5706.image priorSource: 9547201!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/22/2023 01:33:39'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/22/2023 01:33:39'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/22/2023 01:33:39'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/22/2023 01:33:39'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/22/2023 01:33:39'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/22/2023 01:33:39'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/22/2023 01:33:39'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 01:33:39'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/22/2023 01:33:39'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 01:33:39'!
PASSED!

Object subclass: #OOStack
	instanceVariableNames: 'currentElementAttop'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'NB 4/22/2023 01:34:25'!
Object subclass: #OOStack
	instanceVariableNames: 'currentElementAttop'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOStack
	instanceVariableNames: 'currentElementAtTheTop'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'NB 4/22/2023 01:34:36'!
Object subclass: #OOStack
	instanceVariableNames: 'currentElementAtTheTop'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 01:34:42' prior: 50629978 overrides: 16920235!
initialize

	currentElementAtTheTop= StackBaseElement new.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 01:34:48' prior: 50629991!
isEmpty

	^currentElementAtTheTop isBase.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 01:35:24' prior: 50629995!
pop

	|elementAtTop|
	elementAtTop:= currentElementAtTheTop element.
	currentElementAtTheTop:= currentElementAtTheTop elementBelow.
	^elementAtTop.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 01:35:41' prior: 50630004!
push: anObjectToBeAddedAtTheTop

	currentElementAtTheTop:= StackPointerElement with: anObjectToBeAddedAtTheTop elementBelow: currentElementAtTheTop.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 01:35:48' prior: 50630011 overrides: 16901663!
size

	^currentElementAtTheTop count.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 01:35:52' prior: 50630015!
top

	^currentElementAtTheTop element.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/22/2023 01:35:54'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/22/2023 01:35:54'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/22/2023 01:35:54'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/22/2023 01:35:54'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/22/2023 01:35:54'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/22/2023 01:35:54'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/22/2023 01:35:54'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 01:35:54'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/22/2023 01:35:54'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 01:35:54'!
ERROR!

----SNAPSHOT----(22 April 2023 01:35:59) CuisUniversity-5706.image priorSource: 9547766!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/22/2023 01:36:43'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/22/2023 01:36:43'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/22/2023 01:36:43'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/22/2023 01:36:43'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/22/2023 01:36:43'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/22/2023 01:36:43'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/22/2023 01:36:43'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 01:36:43'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/22/2023 01:36:43'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 01:36:43'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/22/2023 01:36:51'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/22/2023 01:36:51'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 01:37:02' prior: 50630079 overrides: 16920235!
initialize

	currentElementAtTheTop:= StackBaseElement new.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/22/2023 01:37:10'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/22/2023 01:37:10'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/22/2023 01:37:10'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/22/2023 01:37:10'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/22/2023 01:37:10'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/22/2023 01:37:10'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/22/2023 01:37:11'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 01:37:11'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/22/2023 01:37:11'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 01:37:11'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/22/2023 01:37:13'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/22/2023 01:37:13'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/22/2023 01:37:13'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/22/2023 01:37:13'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/22/2023 01:37:13'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/22/2023 01:37:13'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/22/2023 01:37:13'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 01:37:13'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/22/2023 01:37:13'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 01:37:13'!
PASSED!

----SNAPSHOT----(22 April 2023 01:37:17) CuisUniversity-5706.image priorSource: 9551894!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/22/2023 01:37:46'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/22/2023 01:37:46'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/22/2023 01:37:46'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/22/2023 01:37:46'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/22/2023 01:37:46'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/22/2023 01:37:46'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/22/2023 01:37:46'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 01:37:46'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/22/2023 01:37:46'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 01:37:46'!
PASSED!

----SNAPSHOT----(22 April 2023 01:38:33) CuisUniversity-5706.image priorSource: 9555494!

j:= StackSizeWatcher new.!

j:= StackSizeWatcher new.!

j:= ParseStack new.!
!SentenceFinderByPrefix methodsFor: 'no messages' stamp: 'NB 4/22/2023 01:45:04'!
prefixes: aStringPrefix inStack: anOOStackWithSentences

	! !

----SNAPSHOT----(22 April 2023 01:45:08) CuisUniversity-5706.image priorSource: 9556628!

----SNAPSHOT----(22 April 2023 01:45:43) CuisUniversity-5706.image priorSource: 9556957!

----STARTUP---- (22 April 2023 14:17:08) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/22/2023 14:17:12'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/22/2023 14:17:12'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/22/2023 14:17:12'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/22/2023 14:17:12'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/22/2023 14:17:12'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/22/2023 14:17:12'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/22/2023 14:17:12'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 14:17:12'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/22/2023 14:17:12'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 14:17:12'!
PASSED!

!methodRemoval: StackPointerElement #pop stamp: 'NB 4/22/2023 14:19:04'!
pop

	^self!

!methodRemoval: StackPointerElement #top stamp: 'NB 4/22/2023 14:19:08'!
top

	^value !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/22/2023 14:19:11'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/22/2023 14:19:11'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/22/2023 14:19:11'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/22/2023 14:19:11'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/22/2023 14:19:11'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/22/2023 14:19:11'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/22/2023 14:19:11'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 14:19:11'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/22/2023 14:19:11'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 14:19:11'!
PASSED!

!methodRemoval: StackBaseElement #pop stamp: 'NB 4/22/2023 14:19:20'!
pop

	self error: OOStack stackEmptyErrorDescription.!

!methodRemoval: StackBaseElement #top stamp: 'NB 4/22/2023 14:19:25'!
top

	self error: OOStack stackEmptyErrorDescription.!

!methodRemoval: StackElement #pop stamp: 'NB 4/22/2023 14:19:30'!
pop 

	self subclassResponsibility !

!methodRemoval: StackElement #top stamp: 'NB 4/22/2023 14:19:36'!
top 

	self subclassResponsibility !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/22/2023 14:19:38'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/22/2023 14:19:38'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/22/2023 14:19:38'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/22/2023 14:19:38'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/22/2023 14:19:38'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/22/2023 14:19:38'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/22/2023 14:19:38'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 14:19:38'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/22/2023 14:19:38'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 14:19:38'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/22/2023 14:20:00'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/22/2023 14:20:00'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/22/2023 14:20:00'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/22/2023 14:20:00'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/22/2023 14:20:00'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/22/2023 14:20:00'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/22/2023 14:20:00'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 14:20:00'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/22/2023 14:20:00'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 14:20:00'!
PASSED!

----SNAPSHOT----(22 April 2023 14:21:55) CuisUniversity-5706.image priorSource: 9557047!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/22/2023 14:21:57'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/22/2023 14:21:57'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/22/2023 14:21:57'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/22/2023 14:21:57'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/22/2023 14:21:57'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/22/2023 14:21:57'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/22/2023 14:21:57'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 14:21:57'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/22/2023 14:21:57'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/22/2023 14:21:57'!
PASSED!

!classRemoval: #StackPointerElement stamp: 'NB 4/22/2023 19:04:41'!
StackElement subclass: #StackPointerElement
	instanceVariableNames: 'value elementBelow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #StackBaseElement stamp: 'NB 4/22/2023 19:04:41'!
StackElement subclass: #StackBaseElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #StackElement stamp: 'NB 4/22/2023 19:04:41'!
Object subclass: #StackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefix stamp: 'NB 4/22/2023 19:04:41'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'NB 4/22/2023 19:04:41'!
Object subclass: #OOStack
	instanceVariableNames: 'currentElementAtTheTop'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'NB 4/22/2023 19:04:42'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'NB 4/22/2023 19:04:42'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of /Users/nico/Documents/inge1/inge1-2023-1c/03-Stack/Stack-Exercise.st----!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'NB 4/22/2023 19:05:43' prior: 50630825!
findThePrefix: aStringPrefix onTheStack: anOOStackWithSentences
	
	^ self prefixes: prefix inStack: stack.
	! !

!testRun: #SentenceFinderByPrefixTest #test01PrefixExistOnlyOnce stamp: 'NB 4/22/2023 19:05:44'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixExistTwice stamp: 'NB 4/22/2023 19:05:44'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03PrefixDosentExist stamp: 'NB 4/22/2023 19:05:44'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FindPrefixOnEmptyStack stamp: 'NB 4/22/2023 19:05:44'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05FindPrefixDontModifiesStack stamp: 'NB 4/22/2023 19:05:44'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06FindPrefixIsCaseSensitive stamp: 'NB 4/22/2023 19:05:44'!
PASSED!

----SNAPSHOT----(22 April 2023 21:20:47) CuisUniversity-5706.image priorSource: 9562058!

----STARTUP---- (23 April 2023 15:27:32) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'sentencesWithPrefix stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'NB 4/23/2023 15:31:56'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'sentencesWithPrefix stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:33:13'!
findSentencesThatStartWith
	values:= OrderedCollection new.
	^ self prefixes: prefix inStack: stack.
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:33:13' prior: 50630681!
test02PrefixExistTwice

	| buscador pila result |
	pila := OOStack new.
	pila push: 'winter is coming'.
	pila push: 'winning is everything'.
	pila push: 'The winds of Winter'.
	pila push: 'Winter is here'.
	buscador := SentenceFinderByPrefix for: 'win' in: pila.
	result := buscador findSentencesThatStartWith.
	self assert: result includes: 'winter is coming'.
	self assert: result includes: 'winning is everything'.
	self assert: result size equals: 2.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:33:13' prior: 50630722!
test05FindPrefixDontModifiesStack

	| buscador pila |
	pila := OOStack new.
	pila push: 'winning is everything'.
	pila push: 'The winds of Winter'.
	buscador := SentenceFinderByPrefix for: 'dog' in: pila.
	buscador findSentencesThatStartWith.
	self assert: pila pop equals: 'The winds of Winter'.
	self assert: pila pop equals: 'winning is everything'.
	self assert: pila isEmpty.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:33:13' prior: 50630712!
test04FindPrefixOnEmptyStack

	| buscador pila result |
	pila := OOStack new.
	buscador := SentenceFinderByPrefix for: 'dog' in: pila.
	result := buscador findSentencesThatStartWith.
	self assert: result isEmpty.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:33:13' prior: 50630698!
test03PrefixDosentExist

	| buscador pila result |
	pila := OOStack new.
	pila push: 'winter is coming'.
	pila push: 'winning is everything'.
	pila push: 'The winds of Winter'.
	pila push: 'Winter is here'.
	buscador := SentenceFinderByPrefix for: 'dog' in: pila.
	result := buscador findSentencesThatStartWith.
	self assert: result isEmpty.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:33:13' prior: 50630737!
test06FindPrefixIsCaseSensitive

	| buscador pila result|
	pila := OOStack new.
	pila push: 'The winds of Winter'.
	buscador := SentenceFinderByPrefix for: 'the' in: pila.
	result := buscador findSentencesThatStartWith.
	self assert: result isEmpty.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:33:13' prior: 50630665!
test01PrefixExistOnlyOnce

	| buscador pila result |
	pila := OOStack new.
	pila push: 'winter is coming'.
	pila push: 'winning is everything'.
	pila push: 'The winds of Winter'.
	pila push: 'Winter is here'.
	buscador := SentenceFinderByPrefix for: 'Wint' in: pila.
	result := buscador findSentencesThatStartWith.
	self assert: result includes: 'Winter is here'.
	self assert: result size equals: 1.! !

!methodRemoval: SentenceFinderByPrefix #findPrefixes stamp: 'NB 4/23/2023 15:33:13'!
findPrefixes
	values:= OrderedCollection new.
	^ self prefixes: prefix inStack: stack.
	!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:33:58'!
findSentencesThatStartWith: aPrefix
	sentencesWithPrefix := OrderedCollection new.
	^ self prefixes: aPrefix inStack: stack.
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:34:31' prior: 50631136!
findSentencesThatStartWith: aStringPrefix
	sentencesWithPrefix := OrderedCollection new.
	^ self prefixes: aStringPrefix inStack: stack.
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:34:45' prior: 50630989!
findThePrefix: aStringPrefix onTheStack: anOOStackWithSentences
	
	^ self prefixes: aStringPrefix inStack: stack.
	! !

!methodRemoval: SentenceFinderByPrefix #findSentencesThatStartWith stamp: 'NB 4/23/2023 15:34:54'!
findSentencesThatStartWith
	values:= OrderedCollection new.
	^ self prefixes: prefix inStack: stack.
	!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:37:49' prior: 50630838!
prefixes: aStringPrefix inStack: anOOStackWithSentences
	
	| elementAtTheTop 	|
	anOOStackWithSentences isEmpty ifFalse:
	[
		elementAtTheTop :=anOOStackWithSentences pop.
		(elementAtTheTop is: aStringPrefix substringAt: 1) ifTrue: [sentencesWithPrefix add: elementAtTheTop] .
		self prefixes: aStringPrefix inStack: anOOStackWithSentences.
		anOOStackWithSentences push: elementAtTheTop. 
	].
	^sentencesWithPrefix.! !

!methodRemoval: SentenceFinderByPrefix #findThePrefix:onTheStack: stamp: 'NB 4/23/2023 15:38:26'!
findThePrefix: aStringPrefix onTheStack: anOOStackWithSentences
	
	^ self prefixes: aStringPrefix inStack: stack.
	!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:39:06'!
initializeWith: anOOStack
	stack := anOOStack.! !

!methodRemoval: SentenceFinderByPrefix #initializeWith:and: stamp: 'NB 4/23/2023 15:39:12'!
initializeWith: aprefix and: aStack
	prefix :=aprefix.
	stack := aStack.!
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:40:32'!
for: anOOStack
	^self new initializeWith: anOOStack.! !

!methodRemoval: SentenceFinderByPrefix class #for:in: stamp: 'NB 4/23/2023 15:40:37'!
for: aPrefix in: aStack
	^self new initializeWith: aPrefix and: aStack.!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:41:56' prior: 50631115!
test01PrefixExistOnlyOnce

	| sentenceFinder stack sentences |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder findSentencesThatStartWith: 'Wint'.
	self assert: sentences includes: 'Winter is here'.
	self assert: sentences size equals: 1.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:43:06' prior: 50631043!
test02PrefixExistTwice

	| sentenceFinder stack sentences |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder findSentencesThatStartWith: 'win'.
	self assert: sentences includes: 'winter is coming'.
	self assert: sentences includes: 'winning is everything'.
	self assert: sentences size equals: 2.! !

!testRun: #SentenceFinderByPrefixTest #test01PrefixExistOnlyOnce stamp: 'NB 4/23/2023 15:43:09'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixExistTwice stamp: 'NB 4/23/2023 15:43:11'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:44:26' prior: 50631088!
test03PrefixDosentExist

	| sentenceFinder stack sentences |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder findSentencesThatStartWith: 'dog'.
	self assert: sentences isEmpty.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:45:41' prior: 50631077!
test04FindPrefixOnEmptyStack

	| sentenceFinder stack sentences |
	stack := OOStack new.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder findSentencesThatStartWith: 'dog'.
	self assert: sentences isEmpty.! !

!testRun: #SentenceFinderByPrefixTest #test04FindPrefixOnEmptyStack stamp: 'NB 4/23/2023 15:45:43'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01PrefixExistOnlyOnce stamp: 'NB 4/23/2023 15:45:43'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixExistTwice stamp: 'NB 4/23/2023 15:45:44'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03PrefixDosentExist stamp: 'NB 4/23/2023 15:45:44'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FindPrefixOnEmptyStack stamp: 'NB 4/23/2023 15:45:44'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05FindPrefixDontModifiesStack stamp: 'NB 4/23/2023 15:45:44'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test06FindPrefixIsCaseSensitive stamp: 'NB 4/23/2023 15:45:44'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:46:26' prior: 50631061!
test05FindPrefixDontModifiesStack

	| sentenceFinder stack |
	stack := OOStack new.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	sentenceFinder := SentenceFinderByPrefix for: 'dog' in: stack.
	sentenceFinder findSentencesThatStartWith: 'dog'.
	self assert: stack pop equals: 'The winds of Winter'.
	self assert: stack pop equals: 'winning is everything'.
	self assert: stack isEmpty.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:47:20' prior: 50631103!
test06FindPrefixIsCaseSensitive

	| sentenceFinder stack sentences|
	stack := OOStack new.
	stack push: 'The winds of Winter'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder findSentencesThatStartWith: 'the'.
	self assert: sentences isEmpty.! !

!testRun: #SentenceFinderByPrefixTest #test01PrefixExistOnlyOnce stamp: 'NB 4/23/2023 15:47:23'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixExistTwice stamp: 'NB 4/23/2023 15:47:23'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03PrefixDosentExist stamp: 'NB 4/23/2023 15:47:23'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FindPrefixOnEmptyStack stamp: 'NB 4/23/2023 15:47:23'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05FindPrefixDontModifiesStack stamp: 'NB 4/23/2023 15:47:23'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test06FindPrefixIsCaseSensitive stamp: 'NB 4/23/2023 15:47:23'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05FindPrefixDontModifiesStack stamp: 'NB 4/23/2023 15:47:23'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:47:34' prior: 50631305!
test05FindPrefixDontModifiesStack

	| sentenceFinder stack |
	stack := OOStack new.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentenceFinder findSentencesThatStartWith: 'dog'.
	self assert: stack pop equals: 'The winds of Winter'.
	self assert: stack pop equals: 'winning is everything'.
	self assert: stack isEmpty.! !

!testRun: #SentenceFinderByPrefixTest #test01PrefixExistOnlyOnce stamp: 'NB 4/23/2023 15:47:37'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixExistTwice stamp: 'NB 4/23/2023 15:47:37'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03PrefixDosentExist stamp: 'NB 4/23/2023 15:47:37'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FindPrefixOnEmptyStack stamp: 'NB 4/23/2023 15:47:37'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05FindPrefixDontModifiesStack stamp: 'NB 4/23/2023 15:47:37'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06FindPrefixIsCaseSensitive stamp: 'NB 4/23/2023 15:47:37'!
PASSED!

----SNAPSHOT----(23 April 2023 15:47:40) CuisUniversity-5706.image priorSource: 9579671!

----SNAPSHOT----(23 April 2023 15:50:11) CuisUniversity-5706.image priorSource: 9591774!

----SNAPSHOT----(23 April 2023 15:53:04) CuisUniversity-5706.image priorSource: 9591864!

----SNAPSHOT----(23 April 2023 15:53:08) CuisUniversity-5706.image priorSource: 9591954!
!SentenceFinderByPrefix methodsFor: 'enumerating' stamp: 'NB 4/23/2023 15:58:04'!
selectSentencesThatStartWith: aStringPrefix
	sentencesWithPrefix := OrderedCollection new.
	^ self prefixes: aStringPrefix inStack: stack.
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:58:04' prior: 50631358!
test05FindPrefixDontModifiesStack

	| sentenceFinder stack |
	stack := OOStack new.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentenceFinder selectSentencesThatStartWith: 'dog'.
	self assert: stack pop equals: 'The winds of Winter'.
	self assert: stack pop equals: 'winning is everything'.
	self assert: stack isEmpty.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:58:04' prior: 50631228!
test02PrefixExistTwice

	| sentenceFinder stack sentences |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'win'.
	self assert: sentences includes: 'winter is coming'.
	self assert: sentences includes: 'winning is everything'.
	self assert: sentences size equals: 2.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:58:05' prior: 50631254!
test03PrefixDosentExist

	| sentenceFinder stack sentences |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'dog'.
	self assert: sentences isEmpty.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:58:05' prior: 50631270!
test04FindPrefixOnEmptyStack

	| sentenceFinder stack sentences |
	stack := OOStack new.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'dog'.
	self assert: sentences isEmpty.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:58:05' prior: 50631210!
test01PrefixExistOnlyOnce

	| sentenceFinder stack sentences |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'Wint'.
	self assert: sentences includes: 'Winter is here'.
	self assert: sentences size equals: 1.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'NB 4/23/2023 15:58:05' prior: 50631322!
test06FindPrefixIsCaseSensitive

	| sentenceFinder stack sentences|
	stack := OOStack new.
	stack push: 'The winds of Winter'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'the'.
	self assert: sentences isEmpty.! !

!methodRemoval: SentenceFinderByPrefix #findSentencesThatStartWith: stamp: 'NB 4/23/2023 15:58:05'!
findSentencesThatStartWith: aStringPrefix
	sentencesWithPrefix := OrderedCollection new.
	^ self prefixes: aStringPrefix inStack: stack.
	!

!testRun: #SentenceFinderByPrefixTest #test01PrefixExistOnlyOnce stamp: 'NB 4/23/2023 15:58:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixExistTwice stamp: 'NB 4/23/2023 15:58:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03PrefixDosentExist stamp: 'NB 4/23/2023 15:58:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FindPrefixOnEmptyStack stamp: 'NB 4/23/2023 15:58:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05FindPrefixDontModifiesStack stamp: 'NB 4/23/2023 15:58:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06FindPrefixIsCaseSensitive stamp: 'NB 4/23/2023 15:58:07'!
PASSED!

----SNAPSHOT----(23 April 2023 15:58:19) CuisUniversity-5706.image priorSource: 9592044!

----SNAPSHOT----(23 April 2023 16:01:06) CuisUniversity-5706.image priorSource: 9596275!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/23/2023 16:01:25'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/23/2023 16:01:25'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/23/2023 16:01:25'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/23/2023 16:01:25'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/23/2023 16:01:25'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/23/2023 16:01:25'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/23/2023 16:01:25'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/23/2023 16:01:25'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/23/2023 16:01:25'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/23/2023 16:01:25'!
PASSED!

----SNAPSHOT----(23 April 2023 16:01:58) CuisUniversity-5706.image priorSource: 9596365!

----SNAPSHOT----(23 April 2023 16:02:00) CuisUniversity-5706.image priorSource: 9597499!

----SNAPSHOT----(23 April 2023 16:03:25) CuisUniversity-5706.image priorSource: 9597589!

----SNAPSHOT----(23 April 2023 16:04:10) CuisUniversity-5706.image priorSource: 9597679!

----SNAPSHOT----(23 April 2023 16:05:39) CuisUniversity-5706.image priorSource: 9597769!

----SNAPSHOT----(23 April 2023 16:05:58) CuisUniversity-5706.image priorSource: 9597859!

----SNAPSHOT----(23 April 2023 16:06:15) CuisUniversity-5706.image priorSource: 9597949!

----SNAPSHOT----(23 April 2023 16:06:17) CuisUniversity-5706.image priorSource: 9598039!

----SNAPSHOT----(23 April 2023 16:06:37) CuisUniversity-5706.image priorSource: 9598129!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:08:42'!
test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOnePrefix

	| sentenceFinder stack sentences |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'Wint'.
	self assert: sentences includes: 'Winter is here'.
	self assert: sentences size equals: 1.! !

!methodRemoval: SentenceFinderByPrefixTest #test01PrefixExistOnlyOnce stamp: 'NB 4/23/2023 16:08:42'!
test01PrefixExistOnlyOnce

	| sentenceFinder stack sentences |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'Wint'.
	self assert: sentences includes: 'Winter is here'.
	self assert: sentences size equals: 1.!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:09:51'!
test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoPrefixes

	| sentenceFinder stack sentences |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'win'.
	self assert: sentences includes: 'winter is coming'.
	self assert: sentences includes: 'winning is everything'.
	self assert: sentences size equals: 2.! !

!methodRemoval: SentenceFinderByPrefixTest #test02PrefixExistTwice stamp: 'NB 4/23/2023 16:09:51'!
test02PrefixExistTwice

	| sentenceFinder stack sentences |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'win'.
	self assert: sentences includes: 'winter is coming'.
	self assert: sentences includes: 'winning is everything'.
	self assert: sentences size equals: 2.!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:10:38'!
test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOneSentenceWithPrefix

	| sentenceFinder stack sentences |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'Wint'.
	self assert: sentences includes: 'Winter is here'.
	self assert: sentences size equals: 1.! !

!methodRemoval: SentenceFinderByPrefixTest #test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOnePrefix stamp: 'NB 4/23/2023 16:10:38'!
test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOnePrefix

	| sentenceFinder stack sentences |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'Wint'.
	self assert: sentences includes: 'Winter is here'.
	self assert: sentences size equals: 1.!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:10:53'!
test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoSentencesWithPrefix

	| sentenceFinder stack sentences |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'win'.
	self assert: sentences includes: 'winter is coming'.
	self assert: sentences includes: 'winning is everything'.
	self assert: sentences size equals: 2.! !

!methodRemoval: SentenceFinderByPrefixTest #test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoPrefixes stamp: 'NB 4/23/2023 16:10:53'!
test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoPrefixes

	| sentenceFinder stack sentences |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'win'.
	self assert: sentences includes: 'winter is coming'.
	self assert: sentences includes: 'winning is everything'.
	self assert: sentences size equals: 2.!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:11:30'!
test03SentenceFinderDoesNotReturnSentencesWhenStackDoesNotContainsSentencesWithPrefix

	| sentenceFinder stack sentences |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'dog'.
	self assert: sentences isEmpty.! !

!methodRemoval: SentenceFinderByPrefixTest #test03PrefixDosentExist stamp: 'NB 4/23/2023 16:11:30'!
test03PrefixDosentExist

	| sentenceFinder stack sentences |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'dog'.
	self assert: sentences isEmpty.!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:12:04'!
test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty

	| sentenceFinder stack sentences |
	stack := OOStack new.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'dog'.
	self assert: sentences isEmpty.! !

!methodRemoval: SentenceFinderByPrefixTest #test04FindPrefixOnEmptyStack stamp: 'NB 4/23/2023 16:12:04'!
test04FindPrefixOnEmptyStack

	| sentenceFinder stack sentences |
	stack := OOStack new.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'dog'.
	self assert: sentences isEmpty.!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:12:31'!
test05SentenceFinderDoesNotModifyStack

	| sentenceFinder stack |
	stack := OOStack new.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentenceFinder selectSentencesThatStartWith: 'dog'.
	self assert: stack pop equals: 'The winds of Winter'.
	self assert: stack pop equals: 'winning is everything'.
	self assert: stack isEmpty.! !

!methodRemoval: SentenceFinderByPrefixTest #test05FindPrefixDontModifiesStack stamp: 'NB 4/23/2023 16:12:31'!
test05FindPrefixDontModifiesStack

	| sentenceFinder stack |
	stack := OOStack new.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentenceFinder selectSentencesThatStartWith: 'dog'.
	self assert: stack pop equals: 'The winds of Winter'.
	self assert: stack pop equals: 'winning is everything'.
	self assert: stack isEmpty.!

----SNAPSHOT----(23 April 2023 16:12:34) CuisUniversity-5706.image priorSource: 9598219!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:12:53'!
test06SentenceFinderIsCaseSensitive

	| sentenceFinder stack sentences|
	stack := OOStack new.
	stack push: 'The winds of Winter'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'the'.
	self assert: sentences isEmpty.! !

!methodRemoval: SentenceFinderByPrefixTest #test06FindPrefixIsCaseSensitive stamp: 'NB 4/23/2023 16:12:53'!
test06FindPrefixIsCaseSensitive

	| sentenceFinder stack sentences|
	stack := OOStack new.
	stack push: 'The winds of Winter'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'the'.
	self assert: sentences isEmpty.!

----SNAPSHOT----(23 April 2023 16:12:56) CuisUniversity-5706.image priorSource: 9605987!

----SNAPSHOT----(23 April 2023 16:13:22) CuisUniversity-5706.image priorSource: 9606852!

----SNAPSHOT----(23 April 2023 16:16:54) CuisUniversity-5706.image priorSource: 9606942!
!SentenceFinderByPrefix methodsFor: 'enumerating' stamp: 'NB 4/23/2023 16:23:36' prior: 50631405!
selectSentencesThatStartWith: aStringPrefix

	aStringPrefix isEmpty ifTrue: [self error: self class prefixEmptyErrorDescription].
	(aStringPrefix includesSubString: ' ') ifTrue: [self error: self class prefixWithSpacesErrorDescription].
	
	
	sentencesWithPrefix := OrderedCollection new.
	^ self prefixes: aStringPrefix inStack: stack.
	! !

----SNAPSHOT----(23 April 2023 16:24:03) CuisUniversity-5706.image priorSource: 9607032!
!SentenceFinderByPrefix class methodsFor: 'initialization' stamp: 'NB 4/23/2023 16:24:54'!
prefixEmptyErrorDescription
	
	^'Prefix should not be empty'.! !
!SentenceFinderByPrefix class methodsFor: 'initialization' stamp: 'NB 4/23/2023 16:25:54'!
prefixWithSpacesErrorDescription
	
	^'Prefix should not contain spaces'.! !
!SentenceFinderByPrefix methodsFor: 'enumerating' stamp: 'NB 4/23/2023 16:27:25'!
assertPrefixIsValid: aStringPrefix

	aStringPrefix isEmpty ifTrue: [self error: self class prefixEmptyErrorDescription].
	(aStringPrefix includesSubString: ' ') ifTrue: [self error: self class prefixWithSpacesErrorDescription]! !
!SentenceFinderByPrefix methodsFor: 'enumerating' stamp: 'NB 4/23/2023 16:27:25' prior: 50631874!
selectSentencesThatStartWith: aStringPrefix

	self assertPrefixIsValid: aStringPrefix.
	
	
	sentencesWithPrefix := OrderedCollection new.
	^ self prefixes: aStringPrefix inStack: stack.
	! !
!SentenceFinderByPrefix methodsFor: 'enumerating' stamp: 'NB 4/23/2023 16:27:31' prior: 50631912!
selectSentencesThatStartWith: aStringPrefix

	self assertPrefixIsValid: aStringPrefix.
	
	sentencesWithPrefix := OrderedCollection new.
	^ self prefixes: aStringPrefix inStack: stack.
	! !

----SNAPSHOT----(23 April 2023 16:27:43) CuisUniversity-5706.image priorSource: 9607572!
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'NB 4/23/2023 16:28:01' prior: 50631166!
prefixes: aStringPrefix inStack: anOOStackWithSentences
	
	| elementAtTheTop 	|
	anOOStackWithSentences isEmpty ifFalse:
	[
		elementAtTheTop :=anOOStackWithSentences pop.
		(elementAtTheTop beginsWith: aStringPrefix) ifTrue: [sentencesWithPrefix add: elementAtTheTop] .
		self prefixes: aStringPrefix inStack: anOOStackWithSentences.
		anOOStackWithSentences push: elementAtTheTop. 
	].
	^sentencesWithPrefix.! !

----SNAPSHOT----(23 April 2023 16:28:03) CuisUniversity-5706.image priorSource: 9608956!

----SNAPSHOT----(23 April 2023 16:28:28) CuisUniversity-5706.image priorSource: 9609565!

!testRun: #SentenceFinderByPrefixTest #test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOneSentenceWithPrefix stamp: 'NB 4/23/2023 16:28:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoSentencesWithPrefix stamp: 'NB 4/23/2023 16:28:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03SentenceFinderDoesNotReturnSentencesWhenStackDoesNotContainsSentencesWithPrefix stamp: 'NB 4/23/2023 16:28:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty stamp: 'NB 4/23/2023 16:28:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceFinderDoesNotModifyStack stamp: 'NB 4/23/2023 16:28:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06SentenceFinderIsCaseSensitive stamp: 'NB 4/23/2023 16:28:30'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:29:23'!
test07SentenceFinderShouldRaiseErrorIfPrefixIsEmpty

	| sentenceFinder stack sentences|
	stack := OOStack new.
	stack push: 'The winds of Winter'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	sentences := sentenceFinder selectSentencesThatStartWith: 'the'.
	self assert: sentences isEmpty.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:31:08' prior: 50631983!
test07SentenceFinderShouldRaiseErrorIfPrefixIsEmpty

	| sentenceFinder stack |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	self should: [sentenceFinder selectSentencesThatStartWith: '']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText = SentenceFinderByPrefix prefixEmptyErrorDescription ].! !

!testRun: #SentenceFinderByPrefixTest #test07SentenceFinderShouldRaiseErrorIfPrefixIsEmpty stamp: 'NB 4/23/2023 16:31:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOneSentenceWithPrefix stamp: 'NB 4/23/2023 16:31:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoSentencesWithPrefix stamp: 'NB 4/23/2023 16:31:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03SentenceFinderDoesNotReturnSentencesWhenStackDoesNotContainsSentencesWithPrefix stamp: 'NB 4/23/2023 16:31:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty stamp: 'NB 4/23/2023 16:31:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceFinderDoesNotModifyStack stamp: 'NB 4/23/2023 16:31:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06SentenceFinderIsCaseSensitive stamp: 'NB 4/23/2023 16:31:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07SentenceFinderShouldRaiseErrorIfPrefixIsEmpty stamp: 'NB 4/23/2023 16:31:18'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:31:42'!
test08SentenceFinderShouldRaiseErrorIfPrefixContainsSpaces

	| sentenceFinder stack |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	self should: [sentenceFinder selectSentencesThatStartWith: '']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText = SentenceFinderByPrefix prefixEmptyErrorDescription ].! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:31:54' prior: 50632050!
test08SentenceFinderShouldRaiseErrorIfPrefixContainsSpaces

	| sentenceFinder stack |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	self should: [sentenceFinder selectSentencesThatStartWith: 'The winds of Winter']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText = SentenceFinderByPrefix prefixEmptyErrorDescription ].! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:32:33' prior: 50632069!
test08SentenceFinderShouldRaiseErrorIfPrefixContainsSpaces

	| sentenceFinder stack |
	stack := OOStack new.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	self should: [sentenceFinder selectSentencesThatStartWith: 'The winds of Winter']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText = SentenceFinderByPrefix prefixWithSpacesErrorDescription ].! !

!testRun: #SentenceFinderByPrefixTest #test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOneSentenceWithPrefix stamp: 'NB 4/23/2023 16:32:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoSentencesWithPrefix stamp: 'NB 4/23/2023 16:32:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03SentenceFinderDoesNotReturnSentencesWhenStackDoesNotContainsSentencesWithPrefix stamp: 'NB 4/23/2023 16:32:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty stamp: 'NB 4/23/2023 16:32:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceFinderDoesNotModifyStack stamp: 'NB 4/23/2023 16:32:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06SentenceFinderIsCaseSensitive stamp: 'NB 4/23/2023 16:32:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07SentenceFinderShouldRaiseErrorIfPrefixIsEmpty stamp: 'NB 4/23/2023 16:32:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08SentenceFinderShouldRaiseErrorIfPrefixContainsSpaces stamp: 'NB 4/23/2023 16:32:36'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/23/2023 16:32:39'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/23/2023 16:32:39'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/23/2023 16:32:39'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/23/2023 16:32:39'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/23/2023 16:32:39'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/23/2023 16:32:39'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/23/2023 16:32:39'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/23/2023 16:32:39'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/23/2023 16:32:39'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/23/2023 16:32:39'!
PASSED!

----SNAPSHOT----(23 April 2023 16:32:42) CuisUniversity-5706.image priorSource: 9609655!

----SNAPSHOT----(23 April 2023 16:34:42) CuisUniversity-5706.image priorSource: 9616818!

TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack sentenceFinder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack2 sentenceFinder2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefixTest category: 'Stack-Exercise' stamp: 'NB 4/23/2023 16:36:41'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack2 sentenceFinder2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:38:04' prior: 50631672!
test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOneSentenceWithPrefix

	| sentences |
	stack2 push: 'winter is coming'.
	stack2 push: 'winning is everything'.
	stack2 push: 'The winds of Winter'.
	stack2 push: 'Winter is here'.
	sentences := sentenceFinder2 selectSentencesThatStartWith: 'Wint'.
	self assert: sentences includes: 'Winter is here'.
	self assert: sentences size equals: 1.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:38:27' prior: 50631710!
test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoSentencesWithPrefix

	| sentences |
	stack2 := OOStack new.
	stack2 push: 'winter is coming'.
	stack2 push: 'winning is everything'.
	stack2 push: 'The winds of Winter'.
	stack2 push: 'Winter is here'.
	sentences := sentenceFinder2 selectSentencesThatStartWith: 'win'.
	self assert: sentences includes: 'winter is coming'.
	self assert: sentences includes: 'winning is everything'.
	self assert: sentences size equals: 2.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:38:48' prior: 50631752!
test03SentenceFinderDoesNotReturnSentencesWhenStackDoesNotContainsSentencesWithPrefix

	| sentences |
	stack2 push: 'winter is coming'.
	stack2 push: 'winning is everything'.
	stack2 push: 'The winds of Winter'.
	stack2 push: 'Winter is here'.
	sentences := sentenceFinder2 selectSentencesThatStartWith: 'dog'.
	self assert: sentences isEmpty.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:39:04' prior: 50631784!
test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty

	| sentences |
	sentences := sentenceFinder2 selectSentencesThatStartWith: 'dog'.
	self assert: sentences isEmpty.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:39:22' prior: 50631806!
test05SentenceFinderDoesNotModifyStack

	stack2 push: 'winning is everything'.
	stack2 push: 'The winds of Winter'.
	sentenceFinder2 selectSentencesThatStartWith: 'dog'.
	self assert: stack2 pop equals: 'The winds of Winter'.
	self assert: stack2 pop equals: 'winning is everything'.
	self assert: stack2 isEmpty.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:39:40' prior: 50631841!
test06SentenceFinderIsCaseSensitive

	| sentences|
	stack2 push: 'The winds of Winter'.
	sentences := sentenceFinder2 selectSentencesThatStartWith: 'the'.
	self assert: sentences isEmpty.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:40:05' prior: 50631996!
test07SentenceFinderShouldRaiseErrorIfPrefixIsEmpty

	stack2 push: 'winter is coming'.
	stack2 push: 'winning is everything'.
	stack2 push: 'The winds of Winter'.
	stack2 push: 'Winter is here'.
	self should: [sentenceFinder2 selectSentencesThatStartWith: '']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText = SentenceFinderByPrefix prefixEmptyErrorDescription ].! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:40:20' prior: 50632089!
test08SentenceFinderShouldRaiseErrorIfPrefixContainsSpaces

	stack2 push: 'winter is coming'.
	stack2 push: 'winning is everything'.
	stack2 push: 'The winds of Winter'.
	stack2 push: 'Winter is here'.
	self should: [sentenceFinder2 selectSentencesThatStartWith: 'The winds of Winter']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText = SentenceFinderByPrefix prefixWithSpacesErrorDescription ].! !

TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack sentenceFinder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefixTest category: 'Stack-Exercise' stamp: 'NB 4/23/2023 16:40:31'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack sentenceFinder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:41:11' overrides: 16961394!
setUp

	stack:= OOStack new.
	sentenceFinder := SentenceFinderByPrefix for: stack.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:41:31' prior: 50632202!
test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOneSentenceWithPrefix

	| sentences |
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.
	sentences := sentenceFinder selectSentencesThatStartWith: 'Wint'.
	self assert: sentences includes: 'Winter is here'.
	self assert: sentences size equals: 1.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:41:46' prior: 50632329 overrides: 16961394!
setUp

	stack:= OOStack new.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:42:03' prior: 50632335!
test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOneSentenceWithPrefix

	| sentences |
	sentences := sentenceFinder selectSentencesThatStartWith: 'Wint'.
	self assert: sentences includes: 'Winter is here'.
	self assert: sentences size equals: 1.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:42:21' prior: 50632218!
test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoSentencesWithPrefix

	| sentences |
	sentences := sentenceFinder selectSentencesThatStartWith: 'win'.
	self assert: sentences includes: 'winter is coming'.
	self assert: sentences includes: 'winning is everything'.
	self assert: sentences size equals: 2.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:42:31' prior: 50632237!
test03SentenceFinderDoesNotReturnSentencesWhenStackDoesNotContainsSentencesWithPrefix

	| sentences |
	sentences := sentenceFinder selectSentencesThatStartWith: 'dog'.
	self assert: sentences isEmpty.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:42:42' prior: 50632251!
test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty

	| sentences |
	sentences := sentenceFinder selectSentencesThatStartWith: 'dog'.
	self assert: sentences isEmpty.! !

TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack sentenceFinder emptyStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefixTest category: 'Stack-Exercise' stamp: 'NB 4/23/2023 16:42:54'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack sentenceFinder emptyStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:43:06' prior: 50632351 overrides: 16961394!
setUp

	stack:= OOStack new.
	emptyStack := OOStack new.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:43:47' prior: 50632396!
test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty

	| sentences |
	sentences := sentenceFinder selectSentencesThatStartWith: 'dog'.
	self assert: sentences isEmpty.! !

TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack sentenceFinder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefixTest category: 'Stack-Exercise' stamp: 'NB 4/23/2023 16:43:55'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack sentenceFinder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:44:40' prior: 50632431!
test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty

	| emptyStack sentenceFinderForEmptyStack sentences |
	emptyStack := OOStack new.
	sentenceFinderForEmptyStack := SentenceFinderByPrefix for: emptyStack .
	sentences := sentenceFinderForEmptyStack selectSentencesThatStartWith: 'dog'.
	self assert: sentences isEmpty.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:45:07' prior: 50632273!
test06SentenceFinderIsCaseSensitive

	| sentences|
	sentences := sentenceFinder selectSentencesThatStartWith: 'the'.
	self assert: sentences isEmpty.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:45:20' prior: 50632282!
test07SentenceFinderShouldRaiseErrorIfPrefixIsEmpty

	self should: [sentenceFinder selectSentencesThatStartWith: '']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText = SentenceFinderByPrefix prefixEmptyErrorDescription ].! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:45:26' prior: 50632298!
test08SentenceFinderShouldRaiseErrorIfPrefixContainsSpaces

	self should: [sentenceFinder selectSentencesThatStartWith: 'The winds of Winter']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText = SentenceFinderByPrefix prefixWithSpacesErrorDescription ].! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:48:11' prior: 50632260!
test05SentenceFinderDoesNotModifyStack

	| stackForCheckingModification sentenceFinderForStackCheckingModification |
	
	stackForCheckingModification := OOStack new.
	sentenceFinderForStackCheckingModification := SentenceFinderByPrefix for: stackForCheckingModification.
	stackForCheckingModification push: 'winning is everything'.
	stackForCheckingModification push: 'The winds of Winter'.
	stackForCheckingModification selectSentencesThatStartWith: 'dog'.
	self assert: stackForCheckingModification pop equals: 'The winds of Winter'.
	self assert: stackForCheckingModification pop equals: 'winning is everything'.
	self assert: stackForCheckingModification isEmpty.! !

----SNAPSHOT----(23 April 2023 16:48:28) CuisUniversity-5706.image priorSource: 9616908!

!testRun: #SentenceFinderByPrefixTest #test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOneSentenceWithPrefix stamp: 'NB 4/23/2023 16:48:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoSentencesWithPrefix stamp: 'NB 4/23/2023 16:48:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03SentenceFinderDoesNotReturnSentencesWhenStackDoesNotContainsSentencesWithPrefix stamp: 'NB 4/23/2023 16:48:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty stamp: 'NB 4/23/2023 16:48:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceFinderDoesNotModifyStack stamp: 'NB 4/23/2023 16:48:30'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test06SentenceFinderIsCaseSensitive stamp: 'NB 4/23/2023 16:48:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07SentenceFinderShouldRaiseErrorIfPrefixIsEmpty stamp: 'NB 4/23/2023 16:48:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08SentenceFinderShouldRaiseErrorIfPrefixContainsSpaces stamp: 'NB 4/23/2023 16:48:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceFinderDoesNotModifyStack stamp: 'NB 4/23/2023 16:48:30'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:48:43' prior: 50632420 overrides: 16961394!
setUp

	stack:= OOStack new.
	sentenceFinder := SentenceFinderByPrefix for: stack.
	stack push: 'winter is coming'.
	stack push: 'winning is everything'.
	stack push: 'The winds of Winter'.
	stack push: 'Winter is here'.! !

!testRun: #SentenceFinderByPrefixTest #test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOneSentenceWithPrefix stamp: 'NB 4/23/2023 16:48:52'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoSentencesWithPrefix stamp: 'NB 4/23/2023 16:48:52'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03SentenceFinderDoesNotReturnSentencesWhenStackDoesNotContainsSentencesWithPrefix stamp: 'NB 4/23/2023 16:48:52'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty stamp: 'NB 4/23/2023 16:48:52'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceFinderDoesNotModifyStack stamp: 'NB 4/23/2023 16:48:52'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test06SentenceFinderIsCaseSensitive stamp: 'NB 4/23/2023 16:48:52'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07SentenceFinderShouldRaiseErrorIfPrefixIsEmpty stamp: 'NB 4/23/2023 16:48:52'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08SentenceFinderShouldRaiseErrorIfPrefixContainsSpaces stamp: 'NB 4/23/2023 16:48:52'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceFinderDoesNotModifyStack stamp: 'NB 4/23/2023 16:48:52'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOneSentenceWithPrefix stamp: 'NB 4/23/2023 16:48:58'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoSentencesWithPrefix stamp: 'NB 4/23/2023 16:49:01'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03SentenceFinderDoesNotReturnSentencesWhenStackDoesNotContainsSentencesWithPrefix stamp: 'NB 4/23/2023 16:49:04'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty stamp: 'NB 4/23/2023 16:49:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceFinderDoesNotModifyStack stamp: 'NB 4/23/2023 16:49:08'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test05SentenceFinderDoesNotModifyStack stamp: 'NB 4/23/2023 16:49:08'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'NB 4/23/2023 16:49:26' prior: 50632499!
test05SentenceFinderDoesNotModifyStack

	| stackForCheckingModification sentenceFinderForStackCheckingModification |
	
	stackForCheckingModification := OOStack new.
	sentenceFinderForStackCheckingModification := SentenceFinderByPrefix for: stackForCheckingModification.
	stackForCheckingModification push: 'winning is everything'.
	stackForCheckingModification push: 'The winds of Winter'.
	sentenceFinderForStackCheckingModification selectSentencesThatStartWith: 'dog'.
	self assert: stackForCheckingModification pop equals: 'The winds of Winter'.
	self assert: stackForCheckingModification pop equals: 'winning is everything'.
	self assert: stackForCheckingModification isEmpty.! !

!testRun: #SentenceFinderByPrefixTest #test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOneSentenceWithPrefix stamp: 'NB 4/23/2023 16:49:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoSentencesWithPrefix stamp: 'NB 4/23/2023 16:49:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03SentenceFinderDoesNotReturnSentencesWhenStackDoesNotContainsSentencesWithPrefix stamp: 'NB 4/23/2023 16:49:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty stamp: 'NB 4/23/2023 16:49:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceFinderDoesNotModifyStack stamp: 'NB 4/23/2023 16:49:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06SentenceFinderIsCaseSensitive stamp: 'NB 4/23/2023 16:49:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07SentenceFinderShouldRaiseErrorIfPrefixIsEmpty stamp: 'NB 4/23/2023 16:49:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08SentenceFinderShouldRaiseErrorIfPrefixContainsSpaces stamp: 'NB 4/23/2023 16:49:29'!
PASSED!

----SNAPSHOT----(23 April 2023 16:49:32) CuisUniversity-5706.image priorSource: 9627901!

!testRun: #SentenceFinderByPrefixTest #test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOneSentenceWithPrefix stamp: 'NB 4/23/2023 16:49:35'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoSentencesWithPrefix stamp: 'NB 4/23/2023 16:49:35'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03SentenceFinderDoesNotReturnSentencesWhenStackDoesNotContainsSentencesWithPrefix stamp: 'NB 4/23/2023 16:49:35'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty stamp: 'NB 4/23/2023 16:49:35'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceFinderDoesNotModifyStack stamp: 'NB 4/23/2023 16:49:35'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06SentenceFinderIsCaseSensitive stamp: 'NB 4/23/2023 16:49:35'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07SentenceFinderShouldRaiseErrorIfPrefixIsEmpty stamp: 'NB 4/23/2023 16:49:35'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08SentenceFinderShouldRaiseErrorIfPrefixContainsSpaces stamp: 'NB 4/23/2023 16:49:35'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOneSentenceWithPrefix stamp: 'NB 4/23/2023 16:49:39'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoSentencesWithPrefix stamp: 'NB 4/23/2023 16:49:39'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03SentenceFinderDoesNotReturnSentencesWhenStackDoesNotContainsSentencesWithPrefix stamp: 'NB 4/23/2023 16:49:39'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty stamp: 'NB 4/23/2023 16:49:39'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceFinderDoesNotModifyStack stamp: 'NB 4/23/2023 16:49:39'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06SentenceFinderIsCaseSensitive stamp: 'NB 4/23/2023 16:49:39'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07SentenceFinderShouldRaiseErrorIfPrefixIsEmpty stamp: 'NB 4/23/2023 16:49:39'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08SentenceFinderShouldRaiseErrorIfPrefixContainsSpaces stamp: 'NB 4/23/2023 16:49:39'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/23/2023 16:50:18'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/23/2023 16:50:18'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/23/2023 16:50:18'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/23/2023 16:50:18'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/23/2023 16:50:18'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/23/2023 16:50:18'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/23/2023 16:50:18'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/23/2023 16:50:18'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/23/2023 16:50:18'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/23/2023 16:50:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOneSentenceWithPrefix stamp: 'NB 4/23/2023 16:50:22'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoSentencesWithPrefix stamp: 'NB 4/23/2023 16:50:22'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03SentenceFinderDoesNotReturnSentencesWhenStackDoesNotContainsSentencesWithPrefix stamp: 'NB 4/23/2023 16:50:22'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty stamp: 'NB 4/23/2023 16:50:22'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceFinderDoesNotModifyStack stamp: 'NB 4/23/2023 16:50:22'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06SentenceFinderIsCaseSensitive stamp: 'NB 4/23/2023 16:50:22'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07SentenceFinderShouldRaiseErrorIfPrefixIsEmpty stamp: 'NB 4/23/2023 16:50:22'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08SentenceFinderShouldRaiseErrorIfPrefixContainsSpaces stamp: 'NB 4/23/2023 16:50:22'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/23/2023 16:50:28'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/23/2023 16:50:28'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/23/2023 16:50:28'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/23/2023 16:50:28'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/23/2023 16:50:28'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/23/2023 16:50:28'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/23/2023 16:50:28'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/23/2023 16:50:28'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/23/2023 16:50:28'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/23/2023 16:50:28'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOneSentenceWithPrefix stamp: 'NB 4/23/2023 16:50:31'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoSentencesWithPrefix stamp: 'NB 4/23/2023 16:50:31'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03SentenceFinderDoesNotReturnSentencesWhenStackDoesNotContainsSentencesWithPrefix stamp: 'NB 4/23/2023 16:50:31'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty stamp: 'NB 4/23/2023 16:50:31'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceFinderDoesNotModifyStack stamp: 'NB 4/23/2023 16:50:31'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06SentenceFinderIsCaseSensitive stamp: 'NB 4/23/2023 16:50:31'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07SentenceFinderShouldRaiseErrorIfPrefixIsEmpty stamp: 'NB 4/23/2023 16:50:31'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08SentenceFinderShouldRaiseErrorIfPrefixContainsSpaces stamp: 'NB 4/23/2023 16:50:31'!
PASSED!

----SNAPSHOT----(23 April 2023 16:50:46) CuisUniversity-5706.image priorSource: 9633658!

----SNAPSHOT----(23 April 2023 16:50:53) CuisUniversity-5706.image priorSource: 9640376!

----SNAPSHOT----(23 April 2023 16:53:02) CuisUniversity-5706.image priorSource: 9640466!

----STARTUP---- (23 April 2023 21:03:20) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


!classRemoval: #StackPointerElement stamp: 'NB 4/23/2023 21:04:32'!
StackElement subclass: #StackPointerElement
	instanceVariableNames: 'value elementBelow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #StackBaseElement stamp: 'NB 4/23/2023 21:04:32'!
StackElement subclass: #StackBaseElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #StackElement stamp: 'NB 4/23/2023 21:04:33'!
Object subclass: #StackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefix stamp: 'NB 4/23/2023 21:04:33'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'sentencesWithPrefix stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'NB 4/23/2023 21:04:33'!
Object subclass: #OOStack
	instanceVariableNames: 'currentElementAtTheTop'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'NB 4/23/2023 21:04:33'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack sentenceFinder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'NB 4/23/2023 21:04:33'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of /Users/nico/Documents/inge1/inge1-2023-1c/03-Stack/Stack-Exercise.st----!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/23/2023 21:04:55'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/23/2023 21:04:55'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/23/2023 21:04:55'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/23/2023 21:04:55'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/23/2023 21:04:55'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/23/2023 21:04:55'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/23/2023 21:04:55'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/23/2023 21:04:55'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/23/2023 21:04:55'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/23/2023 21:04:55'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOneSentenceWithPrefix stamp: 'NB 4/23/2023 21:04:57'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoSentencesWithPrefix stamp: 'NB 4/23/2023 21:04:57'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03SentenceFinderDoesNotReturnSentencesWhenStackDoesNotContainsSentencesWithPrefix stamp: 'NB 4/23/2023 21:04:57'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty stamp: 'NB 4/23/2023 21:04:57'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceFinderDoesNotModifyStack stamp: 'NB 4/23/2023 21:04:57'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06SentenceFinderIsCaseSensitive stamp: 'NB 4/23/2023 21:04:57'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07SentenceFinderShouldRaiseErrorIfPrefixIsEmpty stamp: 'NB 4/23/2023 21:04:57'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08SentenceFinderShouldRaiseErrorIfPrefixContainsSpaces stamp: 'NB 4/23/2023 21:04:57'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/23/2023 21:07:18'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/23/2023 21:07:18'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/23/2023 21:07:18'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/23/2023 21:07:18'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/23/2023 21:07:18'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/23/2023 21:07:18'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/23/2023 21:07:18'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/23/2023 21:07:18'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/23/2023 21:07:18'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/23/2023 21:07:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOneSentenceWithPrefix stamp: 'NB 4/23/2023 21:07:20'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoSentencesWithPrefix stamp: 'NB 4/23/2023 21:07:20'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03SentenceFinderDoesNotReturnSentencesWhenStackDoesNotContainsSentencesWithPrefix stamp: 'NB 4/23/2023 21:07:20'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty stamp: 'NB 4/23/2023 21:07:20'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceFinderDoesNotModifyStack stamp: 'NB 4/23/2023 21:07:20'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06SentenceFinderIsCaseSensitive stamp: 'NB 4/23/2023 21:07:20'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07SentenceFinderShouldRaiseErrorIfPrefixIsEmpty stamp: 'NB 4/23/2023 21:07:20'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08SentenceFinderShouldRaiseErrorIfPrefixContainsSpaces stamp: 'NB 4/23/2023 21:07:20'!
PASSED!

----SNAPSHOT----(23 April 2023 21:08:42) CuisUniversity-5706.image priorSource: 9640556!

----SNAPSHOT----(23 April 2023 21:08:44) CuisUniversity-5706.image priorSource: 9662076!

----SNAPSHOT----(23 April 2023 21:08:46) CuisUniversity-5706.image priorSource: 9662166!

!testRun: #SentenceFinderByPrefixTest #test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOneSentenceWithPrefix stamp: 'NB 4/23/2023 21:08:51'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoSentencesWithPrefix stamp: 'NB 4/23/2023 21:08:51'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03SentenceFinderDoesNotReturnSentencesWhenStackDoesNotContainsSentencesWithPrefix stamp: 'NB 4/23/2023 21:08:51'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty stamp: 'NB 4/23/2023 21:08:51'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceFinderDoesNotModifyStack stamp: 'NB 4/23/2023 21:08:51'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06SentenceFinderIsCaseSensitive stamp: 'NB 4/23/2023 21:08:51'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07SentenceFinderShouldRaiseErrorIfPrefixIsEmpty stamp: 'NB 4/23/2023 21:08:51'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08SentenceFinderShouldRaiseErrorIfPrefixContainsSpaces stamp: 'NB 4/23/2023 21:08:51'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/23/2023 21:08:54'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/23/2023 21:08:54'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/23/2023 21:08:54'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/23/2023 21:08:54'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/23/2023 21:08:54'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/23/2023 21:08:54'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/23/2023 21:08:54'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/23/2023 21:08:54'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/23/2023 21:08:54'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/23/2023 21:08:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01SentenceFinderReturnsOnlyOneSentenceWhenStackContainsOneSentenceWithPrefix stamp: 'NB 4/23/2023 21:08:55'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02SentenceFinderReturnsOnlyTwoSentencesWhenStackContainsTwoSentencesWithPrefix stamp: 'NB 4/23/2023 21:08:55'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03SentenceFinderDoesNotReturnSentencesWhenStackDoesNotContainsSentencesWithPrefix stamp: 'NB 4/23/2023 21:08:55'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceFinderDoesNotReturnSentencesWhenStackIsEmpty stamp: 'NB 4/23/2023 21:08:55'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceFinderDoesNotModifyStack stamp: 'NB 4/23/2023 21:08:55'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06SentenceFinderIsCaseSensitive stamp: 'NB 4/23/2023 21:08:55'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07SentenceFinderShouldRaiseErrorIfPrefixIsEmpty stamp: 'NB 4/23/2023 21:08:55'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08SentenceFinderShouldRaiseErrorIfPrefixContainsSpaces stamp: 'NB 4/23/2023 21:08:55'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'NB 4/23/2023 21:08:57'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'NB 4/23/2023 21:08:57'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'NB 4/23/2023 21:08:57'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'NB 4/23/2023 21:08:57'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'NB 4/23/2023 21:08:57'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'NB 4/23/2023 21:08:57'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'NB 4/23/2023 21:08:57'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/23/2023 21:08:57'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'NB 4/23/2023 21:08:57'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'NB 4/23/2023 21:08:57'!
PASSED!

----STARTUP---- (28 April 2023 20:45:47) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


----End fileIn of /Users/nico/Documents/inge1/Parciales/2022-2c/1erParcial/ISW1-2022-2C-1erParcial.st----!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/28/2023 20:53:44'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/28/2023 20:53:44'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/28/2023 20:53:44'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/28/2023 20:53:44'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/28/2023 20:53:44'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/28/2023 20:53:44'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/28/2023 20:53:44'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/28/2023 20:53:44'!
PASSED!
!Map methodsFor: 'as yet unclassified' stamp: 'NB 4/28/2023 20:55:08' prior: 50634145!
lastPosition

	| acc ix |
	
	^startPosition + steps.
	
	"acc := startPosition.
	ix := 1.
	
	[ix <= steps size] whileTrue: [
		acc := acc + (steps at: ix)	.
		ix := ix + 1.
	].

	^ acc"
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/28/2023 20:55:18'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/28/2023 20:55:18'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/28/2023 20:55:18'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/28/2023 20:55:18'!
FAILURE!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/28/2023 20:55:18'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/28/2023 20:55:18'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/28/2023 20:55:18'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/28/2023 20:55:18'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/28/2023 20:55:18'!
FAILURE!
!Map methodsFor: 'as yet unclassified' stamp: 'NB 4/28/2023 20:57:43' prior: 50634228!
lastPosition

	| acc ix |
	
	acc := startPosition.
	ix := 1.
	
	[ix <= steps size] whileTrue: [
		acc := acc + (steps at: ix)	.
		ix := ix + 1.
	].

	^ acc
	
	! !
!Map methodsFor: 'as yet unclassified' stamp: 'NB 4/28/2023 21:01:06' prior: 50634266!
lastPosition

	| acc ix |
	
	^steps reduce: [:start :step | start + step ].
	
	"acc := startPosition.
	ix := 1.
	
	[ix <= steps size] whileTrue: [
		acc := acc + (steps at: ix)	.
		ix := ix + 1.
	].

	^ acc"
	
	! !
!Map methodsFor: 'as yet unclassified' stamp: 'NB 4/28/2023 21:01:51' prior: 50634274!
lastPosition

	| acc ix |
	
	^steps inject: startPosition into: [:start :step | start + step ].
	
	"acc := startPosition.
	ix := 1.
	
	[ix <= steps size] whileTrue: [
		acc := acc + (steps at: ix)	.
		ix := ix + 1.
	].

	^ acc"
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/28/2023 21:01:56'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/28/2023 21:01:56'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/28/2023 21:01:56'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/28/2023 21:01:56'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/28/2023 21:01:56'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/28/2023 21:01:56'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/28/2023 21:01:56'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/28/2023 21:01:56'!
PASSED!
!Map methodsFor: 'as yet unclassified' stamp: 'NB 4/28/2023 21:02:08' prior: 50634284!
lastPosition

	
	
	^steps inject: startPosition into: [:start :step | start + step ].
	
	! !
!Map methodsFor: 'as yet unclassified' stamp: 'NB 4/28/2023 21:02:13' prior: 50634320!
lastPosition

	
	^steps inject: startPosition into: [:start :step | start + step ].
	
	! !

----SNAPSHOT----(28 April 2023 21:20:47) CuisUniversity-5706.image priorSource: 9662256!

----SNAPSHOT----(28 April 2023 21:20:49) CuisUniversity-5706.image priorSource: 9685786!

!classRenamed: #Pirate as: #PirateRange stamp: 'NB 4/28/2023 21:22:17'!
Smalltalk renameClassNamed: #Pirate as: #PirateRange!

PirateRange subclass: #Captain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Captain category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/28/2023 21:22:46'!
PirateRange subclass: #Captain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

PirateRange subclass: #SimplePirate
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #SimplePirate category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/28/2023 21:22:55'!
PirateRange subclass: #SimplePirate
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!PirateRange methodsFor: 'no messages' stamp: 'NB 4/28/2023 21:24:04'!
searchTreasureIn: island with: aMap

	self subclassResponsibility 
	! !
!Captain methodsFor: 'no messages' stamp: 'NB 4/28/2023 21:24:24' overrides: 50634365!
searchTreasureIn: island with: aMap

	^true.
	! !
!SimplePirate methodsFor: 'no messages' stamp: 'NB 4/28/2023 21:24:47' overrides: 50634365!
searchTreasureIn: island with: aMap

	self error: 'I am a simple pirate!!'.
	! !

!classRenamed: #PirateRange as: #PirateRank stamp: 'NB 4/28/2023 21:25:11'!
Smalltalk renameClassNamed: #PirateRange as: #PirateRank!
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/28/2023 21:25:27' prior: 50633820 overrides: 16920235!
initialize

	rank := SimplePirate new.! !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/28/2023 21:26:08' prior: 50633824!
searchTreasureIn: island with: aMap

	rank searchTreasureIn: island with: aMap
	! !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/28/2023 21:26:17' prior: 50634391!
searchTreasureIn: island with: aMap

	^rank searchTreasureIn: island with: aMap
	! !
!Corsario methodsFor: 'as yet unclassified' stamp: 'NB 4/28/2023 21:26:48' prior: 50633885!
searchTreasureIn: island with: aMap

	^rank searchTreasureIn: island with: aMap
	! !
!Filibustero methodsFor: 'as yet unclassified' stamp: 'NB 4/28/2023 21:27:04' prior: 50634021 overrides: 16920235!
initialize

	rank := SimplePirate new.! !
!Filibustero methodsFor: 'as yet unclassified' stamp: 'NB 4/28/2023 21:27:10' prior: 50634025!
searchTreasureIn: island with: aMap

	^rank searchTreasureIn: island with: aMap
	! !
!Filibustero methodsFor: 'as yet unclassified' stamp: 'NB 4/28/2023 21:27:19' prior: 50634016!
aCaptainIWasMeantToBe

	rank := Captain new.! !
!Corsario methodsFor: 'as yet unclassified' stamp: 'NB 4/28/2023 21:27:27' prior: 50633860!
aCaptainIWasMeantToBe

	rank := Captain new.! !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/28/2023 21:27:37' prior: 50633815!
aCaptainIWasMeantToBe

	rank := Captain new.! !

!methodRemoval: Corsario #initialize stamp: 'NB 4/28/2023 21:28:54'!
initialize

	rank := #NoRank!
!Corsario methodsFor: 'as yet unclassified' stamp: 'NB 4/28/2023 21:29:11' prior: 50633880!
initializeWith: aMap

	rank := SimplePirate new.
	map := aMap! !

----SNAPSHOT----(28 April 2023 21:29:14) CuisUniversity-5706.image priorSource: 9685876!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/28/2023 21:29:16'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/28/2023 21:29:16'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/28/2023 21:29:16'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/28/2023 21:29:16'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/28/2023 21:29:16'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/28/2023 21:29:16'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/28/2023 21:29:16'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/28/2023 21:29:16'!
PASSED!

----SNAPSHOT----(28 April 2023 21:34:37) CuisUniversity-5706.image priorSource: 9689376!

----SNAPSHOT----(28 April 2023 21:35:58) CuisUniversity-5706.image priorSource: 9690279!

----STARTUP---- (30 April 2023 14:56:44) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!

!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 14:57:27'!
buryTreasureAt: aPosition! !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 14:58:07' prior: 50634481!
buryTreasureAt: aPosition

	| terrain island |
	
	terrain := island terrainAt: aPosition.! !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 14:59:32'!
buryTreasureAt: aPosition in: anIsland

	| terrain|
	
	terrain := anIsland terrainAt: aPosition.! !

!methodRemoval: Bucanero #buryTreasureAt: stamp: 'NB 4/30/2023 14:59:41'!
buryTreasureAt: aPosition

	| terrain island |
	
	terrain := island terrainAt: aPosition.!
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:00:15' prior: 50634491!
buryTreasureAt: aPosition in: anIsland

	| terrain|
	
	terrain := anIsland terrainAt: aPosition.
	
	terrain = #Tree ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ].
			terrain = #Empty ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ]	.
			terrain = #Diggable ifTrue: [ anIsland receiveTreasureAt: aPosition ].! !
!Corsario methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:00:37'!
buryTreasureAt: aPosition in: anIsland

	| terrain|
	
	terrain := anIsland terrainAt: aPosition.
	
	terrain = #Tree ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ].
			terrain = #Empty ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ]	.
			terrain = #Diggable ifTrue: [ anIsland receiveTreasureAt: aPosition ].! !
!Corsario methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:01:08' prior: 50634517!
buryTreasureAt: aPosition in: anIsland

	| terrain|
	
	terrain := anIsland terrainAt: aPosition.
	
	terrain = #Tree ifTrue: [].
			terrain = #Empty ifTrue: [].
			terrain = #Diggable ifTrue: [ 				self drawTreasureMarkAt: aPosition ].! !
!Filibustero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:01:37'!
buryTreasureAt: aPosition in: anIsland

	| terrain|
	
	terrain := anIsland terrainAt: aPosition.
	
	terrain = #Tree ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ].
			terrain = #Empty ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ]	.
			terrain = #Diggable ifTrue: [ anIsland receiveTreasureAt: aPosition ].! !
!Filibustero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:01:58' prior: 50634541!
buryTreasureAt: aPosition in: anIsland

	| terrain|
	
	terrain := anIsland terrainAt: aPosition.
	
	terrain = #Tree ifTrue: [].
			terrain = #Empty ifTrue: [].
			terrain = #Diggable ifTrue: [].! !

Object subclass: #Pirate
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Pirate category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 15:02:39'!
Object subclass: #Pirate
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Pirate subclass: #Bucanero
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Pirate subclass: #Bucanero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Bucanero category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 15:02:53'!
Pirate subclass: #Bucanero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Pirate subclass: #Corsario
	instanceVariableNames: 'map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Corsario category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 15:03:04'!
Pirate subclass: #Corsario
	instanceVariableNames: 'map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Pirate subclass: #Filibustero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Filibustero category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 15:03:11'!
Pirate subclass: #Filibustero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 15:03:36'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 15:03:36'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 15:03:36'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 15:03:36'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 15:03:36'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 15:03:36'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 15:03:36'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 15:03:36'!
PASSED!

----SNAPSHOT----(30 April 2023 15:03:39) CuisUniversity-5706.image priorSource: 9690369!
!Crew methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:04:25' prior: 50633919!
buryTreasureAt: aPosition

	| ix terrain |
	
	terrain := island terrainAt: aPosition.
	
	ix := 1.
	[ix <= pirates size] whileTrue: [ | pirate |
		pirate := pirates at: ix.
		
		pirate buryTreasureAt: aPosition in: island.
		
		ix := ix + 1.
	].
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 15:04:38'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 15:04:38'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 15:04:38'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 15:04:38'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 15:04:38'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 15:04:38'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 15:04:38'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 15:04:38'!
PASSED!
!Crew methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:04:50' prior: 50634645!
buryTreasureAt: aPosition

	| ix |
	
	ix := 1.
	[ix <= pirates size] whileTrue: [ | pirate |
		pirate := pirates at: ix.
		
		pirate buryTreasureAt: aPosition in: island.
		
		ix := ix + 1.
	].
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 15:04:52'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 15:04:52'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 15:04:52'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 15:04:52'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 15:04:52'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 15:04:52'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 15:04:52'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 15:04:52'!
PASSED!
!Crew methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:05:35' prior: 50634681!
buryTreasureAt: aPosition
	
	pirates do: [:pirate | pirate buryTreasureAt: aPosition in: island.]
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 15:05:40'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 15:05:40'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 15:05:40'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 15:05:40'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 15:05:40'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 15:05:40'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 15:05:40'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 15:05:40'!
PASSED!

Object subclass: #Terrain
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Terrain category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 15:07:08'!
Object subclass: #Terrain
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Terrain subclass: #Tree
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Terrain subclass: #Tree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Tree category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 15:07:21'!
Terrain subclass: #Tree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Object subclass: #Terrain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Terrain category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 15:07:24'!
Object subclass: #Terrain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Terrain subclass: #Empaty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Empaty category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 15:07:31'!
Terrain subclass: #Empaty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRenamed: #Empaty as: #Empty stamp: 'NB 4/30/2023 15:07:40'!
Smalltalk renameClassNamed: #Empaty as: #Empty!
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:07:40' prior: 50634503!
buryTreasureAt: aPosition in: anIsland

	| terrain|
	
	terrain := anIsland terrainAt: aPosition.
	
	terrain = #Tree ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ].
			terrain = #Empty ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ]	.
			terrain = #Diggable ifTrue: [ anIsland receiveTreasureAt: aPosition ].! !
!Island methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:07:40' prior: 50634087!
terrainAt: aPosition

	| ix |
	
	ix := 1.
	[ix <= treesAt size] whileTrue: [ | pos |
		pos := treesAt at: ix.
		(aPosition = pos) ifTrue: [ ^ #Tree ].		
		ix := ix + 1.
	].

	ix := 1.
	[ix <= digsAt size] whileTrue: [ | pos |
		pos := digsAt at: ix.
		(aPosition = pos) ifTrue: [ ^ #Diggable ].
		ix := ix + 1.
	].

	^ #Empty.
	
! !
!Corsario methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:07:40' prior: 50634531!
buryTreasureAt: aPosition in: anIsland

	| terrain|
	
	terrain := anIsland terrainAt: aPosition.
	
	terrain = #Tree ifTrue: [].
			terrain = #Empty ifTrue: [].
			terrain = #Diggable ifTrue: [ 				self drawTreasureMarkAt: aPosition ].! !
!Filibustero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:07:40' prior: 50634556!
buryTreasureAt: aPosition in: anIsland

	| terrain|
	
	terrain := anIsland terrainAt: aPosition.
	
	terrain = #Tree ifTrue: [].
			terrain = #Empty ifTrue: [].
			terrain = #Diggable ifTrue: [].! !
!Crew methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:07:40' prior: 50633955!
moveTo: aPosition

	| acc ix terrain |
	
	terrain := island terrainAt: aPosition.
	
	acc := true.
	ix := 1.
	
	[ix <= pirates size] whileTrue: [ | pirate |
		pirate := pirates at: ix.
		
		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				acc := acc & true 
			].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				acc := acc & false
			].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		ix := ix + 1.
	].

	"nos movemos si todos pueden moverse"
	acc ifTrue: [ island crewAt: aPosition ].
	
	! !

Terrain subclass: #Diggable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Diggable category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 15:07:50'!
Terrain subclass: #Diggable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!Terrain methodsFor: 'no messages' stamp: 'NB 4/30/2023 15:09:21'!
buryTreasureByBucanero

	self subclassResponsibility ! !
!Tree methodsFor: 'no messages' stamp: 'NB 4/30/2023 15:09:42' overrides: 50634896!
buryTreasureByBucanero

	self subclassResponsibility ! !
!Empty methodsFor: 'no messages' stamp: 'NB 4/30/2023 15:09:48' overrides: 50634896!
buryTreasureByBucanero

	self subclassResponsibility ! !
!Empty methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:10:06' prior: 50634906 overrides: 50634896!
buryTreasureByBucanero

	 self error: 'Arrgh!! I cannot dig this type of terrain!!'.! !
!Empty methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:11:43'!
buryTreasureByBucanero: aPirateBulcanero

	 aPirateBulcanero buryTreaseureInAnEmptyTerrain: self.! !

!methodRemoval: Empty #buryTreasureByBucanero stamp: 'NB 4/30/2023 15:11:50'!
buryTreasureByBucanero

	 self error: 'Arrgh!! I cannot dig this type of terrain!!'.!
!Empty methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:12:03' prior: 50634918!
buryTreasureByBucanero: aPirateBucanero

	 aPirateBucanero buryTreaseureInAnEmptyTerrain: self.! !
!Terrain methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:12:12'!
buryTreasureByBucanero: aPirate

	self subclassResponsibility ! !

!methodRemoval: Terrain #buryTreasureByBucanero stamp: 'NB 4/30/2023 15:12:16'!
buryTreasureByBucanero

	self subclassResponsibility !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:12:53'!
buryTreaseureInAnEmptyTerrain: anEmptyTerrain

	self error: 'Arrgh!! I cannot dig this type of terrain!!'
	! !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:13:20'!
buryTreaseureInATreeTerrain: aTreeTerrain

	self error: 'Arrgh!! I cannot dig this type of terrain!!'
	! !
!Terrain methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:16:20'!
buryTreasureByBucanero: aPirate in: anIsland

	self subclassResponsibility ! !

!methodRemoval: Terrain #buryTreasureByBucanero: stamp: 'NB 4/30/2023 15:16:25'!
buryTreasureByBucanero: aPirate

	self subclassResponsibility !
!Empty methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:16:42' overrides: 50634957!
buryTreasureByBucanero: aPirateBucanero in: anIsland

	 aPirateBucanero buryTreaseureInAnEmptyTerrain: self.! !
!Empty methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:16:50' prior: 50634967 overrides: 50634957!
buryTreasureByBucanero: aPirateBucanero in: anIsland

	 aPirateBucanero buryTreaseureInAnEmptyTerrain: self in: anIsland.! !

!methodRemoval: Empty #buryTreasureByBucanero: stamp: 'NB 4/30/2023 15:16:58'!
buryTreasureByBucanero: aPirateBucanero

	 aPirateBucanero buryTreaseureInAnEmptyTerrain: self.!
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:17:18'!
buryTreaseureInAnEmptyTerrain: anEmptyTerrain in: anIsland

	self error: 'Arrgh!! I cannot dig this type of terrain!!'
	! !

!methodRemoval: Bucanero #buryTreaseureInAnEmptyTerrain: stamp: 'NB 4/30/2023 15:17:21'!
buryTreaseureInAnEmptyTerrain: anEmptyTerrain

	self error: 'Arrgh!! I cannot dig this type of terrain!!'
	!
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:17:29'!
buryTreaseureInATreeTerrain: aTreeTerrain in: anIsland

	self error: 'Arrgh!! I cannot dig this type of terrain!!'
	! !

!methodRemoval: Bucanero #buryTreaseureInATreeTerrain: stamp: 'NB 4/30/2023 15:17:33'!
buryTreaseureInATreeTerrain: aTreeTerrain

	self error: 'Arrgh!! I cannot dig this type of terrain!!'
	!

Object subclass: #Crew
	instanceVariableNames: 'pirates'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Crew category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 15:22:48'!
Object subclass: #Crew
	instanceVariableNames: 'pirates'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!Crew methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:23:00' prior: 50634716!
buryTreasureAt: aPosition
	
	pirates do: [:pirate | pirate buryTreasureAt: aPosition].
	
	! !

!classDefinition: #Crew category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 15:46:59'!
Object subclass: #Crew
	instanceVariableNames: 'pirates island'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!Crew methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:46:58' prior: 50635024!
buryTreasureAt: aPosition
	
	pirates do: [:pirate | pirate buryTreasureAt: aPosition in: island].
	
	! !
!Terrain methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:47:43'!
buryTreasureByBucanero: aPirate in: anIsland at: aPosition

	self subclassResponsibility ! !

!methodRemoval: Terrain #buryTreasureByBucanero:in: stamp: 'NB 4/30/2023 15:47:47'!
buryTreasureByBucanero: aPirate in: anIsland

	self subclassResponsibility !
!Empty methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:47:59' overrides: 50635044!
buryTreasureByBucanero: aPirateBucanero in: anIsland at: aPosition

	 aPirateBucanero buryTreaseureInAnEmptyTerrain: self in: anIsland.! !

!methodRemoval: Empty #buryTreasureByBucanero:in: stamp: 'NB 4/30/2023 15:48:05'!
buryTreasureByBucanero: aPirateBucanero in: anIsland

	 aPirateBucanero buryTreaseureInAnEmptyTerrain: self in: anIsland.!
!Empty methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:48:15' prior: 50635055 overrides: 50635044!
buryTreasureByBucanero: aPirateBucanero in: anIsland at: aPosition

	 aPirateBucanero buryTreaseureInAnEmptyTerrain: self in: anIsland at: aPosition.! !
!Tree methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:48:40' overrides: 50635044!
buryTreasureByBucanero: aPirateBucanero in: anIsland at: aPosition

	 aPirateBucanero buryTreaseureInATreeTerrain: self in: anIsland at: aPosition.! !

!methodRemoval: Tree #buryTreasureByBucanero stamp: 'NB 4/30/2023 15:48:44'!
buryTreasureByBucanero

	self subclassResponsibility !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:49:13'!
buryTreaseureInATreeTerrain: aTreeTerrain in: anIsland at: aPosition

	self error: 'Arrgh!! I cannot dig this type of terrain!!'
	! !

!methodRemoval: Bucanero #buryTreaseureInATreeTerrain:in: stamp: 'NB 4/30/2023 15:49:18'!
buryTreaseureInATreeTerrain: aTreeTerrain in: anIsland

	self error: 'Arrgh!! I cannot dig this type of terrain!!'
	!
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:49:23'!
buryTreaseureInAnEmptyTerrain: anEmptyTerrain in: anIsland at: aPosition

	self error: 'Arrgh!! I cannot dig this type of terrain!!'
	! !

!methodRemoval: Bucanero #buryTreaseureInAnEmptyTerrain:in: stamp: 'NB 4/30/2023 15:49:27'!
buryTreaseureInAnEmptyTerrain: anEmptyTerrain in: anIsland

	self error: 'Arrgh!! I cannot dig this type of terrain!!'
	!
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:50:17'!
buryTreaseureInADiggableTerrain: aDiggableTerrain in: anIsland at: aPosition

	anIsland receiveTreasureAt: aPosition 
	! !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:51:38' prior: 50634802!
buryTreasureAt: aPosition in: anIsland

	| terrain|
	
	terrain := anIsland terrainAt: aPosition.
	terrain buryTreasureByBucanero: self in: anIsland at: aPosition. ! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 15:51:41'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 15:51:41'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 15:51:41'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 15:51:41'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 15:51:41'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 15:51:41'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 15:51:41'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 15:51:41'!
ERROR!
!Diggable methodsFor: 'no messages' stamp: 'NB 4/30/2023 15:52:31' overrides: 50635044!
buryTreasureByBucanero: aPirateBucanero in: anIsland at: aPosition

	 aPirateBucanero buryTreaseureInADiggableTerrain: self in: anIsland at: aPosition.! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 15:52:33'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 15:52:33'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 15:52:33'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 15:52:33'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 15:52:33'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 15:52:33'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 15:52:33'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 15:52:33'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 15:53:03'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 15:53:05'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 15:53:07'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 15:53:09'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 15:53:11'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 15:53:11'!
ERROR!
!Island methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:56:21' prior: 50634816!
terrainAt: aPosition

	| ix |
	
	ix := 1.
	[ix <= treesAt size] whileTrue: [ | pos |
		pos := treesAt at: ix.
		(aPosition = pos) ifTrue: [ ^ Tree new. ].		
		ix := ix + 1.
	].

	ix := 1.
	[ix <= digsAt size] whileTrue: [ | pos |
		pos := digsAt at: ix.
		(aPosition = pos) ifTrue: [ ^ #Diggable ].
		ix := ix + 1.
	].

	^ #Empty.
	
! !
!Island methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:56:27' prior: 50635212!
terrainAt: aPosition

	| ix |
	
	ix := 1.
	[ix <= treesAt size] whileTrue: [ | pos |
		pos := treesAt at: ix.
		(aPosition = pos) ifTrue: [ ^ Tree new. ].		
		ix := ix + 1.
	].

	ix := 1.
	[ix <= digsAt size] whileTrue: [ | pos |
		pos := digsAt at: ix.
		(aPosition = pos) ifTrue: [ ^ Diggable new. ].
		ix := ix + 1.
	].

	^ #Empty.
	
! !
!Island methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 15:56:32' prior: 50635226!
terrainAt: aPosition

	| ix |
	
	ix := 1.
	[ix <= treesAt size] whileTrue: [ | pos |
		pos := treesAt at: ix.
		(aPosition = pos) ifTrue: [ ^ Tree new. ].		
		ix := ix + 1.
	].

	ix := 1.
	[ix <= digsAt size] whileTrue: [ | pos |
		pos := digsAt at: ix.
		(aPosition = pos) ifTrue: [ ^ Diggable new. ].
		ix := ix + 1.
	].

	^ Empty new.
	
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 15:56:35'!
FAILURE!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 15:56:35'!
FAILURE!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 15:56:35'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 15:56:35'!
FAILURE!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 15:56:35'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 15:56:35'!
FAILURE!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 15:56:35'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 15:56:35'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 15:57:25'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 15:57:29'!
FAILURE!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 15:57:29'!
FAILURE!
!Corsario methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:01:22'!
buryTreaseureInATreeTerrain: aTreeTerrain in: anIsland at: aPosition

	! !
!Corsario methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:01:37'!
buryTreaseureInAnEmptyTerrain: anEmptyTerrain in: anIsland at: aPosition

	
	! !
!Corsario methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:02:25'!
buryTreaseureInADiggableTerrain: aDiggableTerrain in: anIsland at: aPosition

	anIsland receiveTreasureAt: aPosition 
	

	
	! !
!Corsario methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:02:39' prior: 50635299!
buryTreaseureInADiggableTerrain: aDiggableTerrain in: anIsland at: aPosition

	self drawTreasureMarkAt: aPosition
	

	
	! !
!Terrain methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:02:58'!
buryTreasureByCorsario: aPirate in: anIsland at: aPosition

	self subclassResponsibility ! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:03:36' overrides: 50635313!
buryTreasureByCorsario: aPirateCorsario in: anIsland at: aPosition

	 aPirateCorsario buryTreaseureInADiggableTerrain: self in: anIsland at: aPosition.! !
!Terrain methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:03:44' prior: 50635313!
buryTreasureByCorsario: aCorsario in: anIsland at: aPosition

	self subclassResponsibility ! !
!Empty methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:04:05' overrides: 50635327!
buryTreasureByCorsario: aPirateCorsario in: anIsland at: aPosition

	 aPirateCorsario buryTreaseureInAnEmptyTerrain: self in: anIsland at: aPosition.! !
!Tree methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:04:24' overrides: 50635327!
buryTreasureByCorsario: aPirateCorsario in: anIsland at: aPosition

	 aPirateCorsario buryTreaseureInATreeTerrain: self in: anIsland at: aPosition.! !
!Corsario methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:05:00' prior: 50634830!
buryTreasureAt: aPosition in: anIsland

	| terrain|
	
	terrain := anIsland terrainAt: aPosition.
	
	terrain buryTreasureByCorsario: self in: anIsland at: aPosition. ! !
!Filibustero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:05:51' prior: 50634841!
buryTreasureAt: aPosition in: anIsland

	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 16:05:53'!
FAILURE!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 16:05:53'!
FAILURE!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 16:05:53'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 16:05:53'!
FAILURE!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 16:05:53'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 16:05:53'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 16:05:53'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 16:05:53'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 16:06:14'!
FAILURE!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 16:06:14'!
FAILURE!
!Crew methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:08:40' prior: 50634850!
moveTo: aPosition

	| acc ix terrain |
	
	terrain := island terrainAt: aPosition.
	
	acc := true.
	ix := 1.
	
	[ix <= pirates size] whileTrue: [ | pirate |
		pirate := pirates at: ix.
		
		(pirate isKindOf: Corsario) ifTrue: [ 
			(terrain isKindOf:  Tree) ifTrue: [ acc := acc & false ].
			(terrain isKindOf:  Empty) ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				acc := acc & true 
			].
			(terrain isKindOf: Diggable) ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			(terrain  isKindOf: Tree) ifTrue: [ 
				island clearTerrainAt: aPosition.
				acc := acc & false
			].
			(terrain  isKindOf:  Empty) ifTrue: [ acc := acc & true ].
			(terrain isKindOf:  #Diggable) ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			(terrain isKindOf:  Tree) ifTrue: [ acc := acc & false ].
			(terrain isKindOf: Empty) ifTrue: [ acc := acc & true ].
			(terrain isKindOf: Diggable) ifTrue: [ acc := acc & true ].
		].
		
		ix := ix + 1.
	].

	"nos movemos si todos pueden moverse"
	acc ifTrue: [ island crewAt: aPosition ].
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 16:08:46'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 16:08:46'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 16:08:46'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 16:08:46'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 16:08:46'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 16:08:46'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 16:08:46'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 16:08:46'!
PASSED!
!Crew methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:09:07' prior: 50635395!
moveTo: aPosition

	| acc ix terrain |
	
	terrain := island terrainAt: aPosition.
	
	acc := true.
	ix := 1.
	
	[ix <= pirates size] whileTrue: [ | pirate |
		pirate := pirates at: ix.
		
		(pirate isKindOf: Corsario) ifTrue: [ 
			(terrain isKindOf:  Tree) ifTrue: [ acc := acc & false ].
			(terrain isKindOf:  Empty) ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				acc := acc & true 
			].
			(terrain isKindOf: Diggable) ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			(terrain  isKindOf: Tree) ifTrue: [ 
				island clearTerrainAt: aPosition.
				acc := acc & false
			].
			(terrain  isKindOf:  Empty) ifTrue: [ acc := acc & true ].
			(terrain isKindOf:  Diggable) ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			(terrain isKindOf:  Tree) ifTrue: [ acc := acc & false ].
			(terrain isKindOf: Empty) ifTrue: [ acc := acc & true ].
			(terrain isKindOf: Diggable) ifTrue: [ acc := acc & true ].
		].
		
		ix := ix + 1.
	].

	"nos movemos si todos pueden moverse"
	acc ifTrue: [ island crewAt: aPosition ].
	
	! !

----SNAPSHOT----(30 April 2023 16:09:52) CuisUniversity-5706.image priorSource: 9695722!
!Island methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:42:42' prior: 50634049!
clearTerrainAt: aPosition

	
	treesAt remove: aPosition.
	"[ix <= treesAt size] whileTrue: [ | pos |
		pos := treesAt at: ix.
		(aPosition = pos) ifTrue: [ ^ treesAt removeIndex: ix ].
		
		ix := ix + 1.
	]."
	
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 16:42:44'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 16:42:44'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 16:42:44'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 16:42:44'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 16:42:44'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 16:42:44'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 16:42:44'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 16:42:44'!
PASSED!
!Island methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:42:55' prior: 50635498!
clearTerrainAt: aPosition

	treesAt remove: aPosition.	
! !
!Island methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:45:10' prior: 50634073!
isEmptyAt: aPosition
	
	^treesAt includes: aPosition.! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 16:45:12'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 16:45:12'!
FAILURE!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 16:45:12'!
FAILURE!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 16:45:12'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 16:45:12'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 16:45:12'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 16:45:12'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 16:45:12'!
PASSED!
!Island methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:45:44' prior: 50635538!
isEmptyAt: aPosition
	
	^treesAt includes: aPosition not.! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 16:45:47'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 16:45:47'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 16:45:47'!
ERROR!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 16:45:47'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 16:45:47'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 16:45:47'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 16:45:47'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 16:45:47'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 16:47:27'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 16:47:30'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 16:47:30'!
ERROR!
!Island methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:47:55' prior: 50635569!
isEmptyAt: aPosition
	
	^(treesAt includes: aPosition) not.! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 16:47:58'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 16:47:58'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 16:47:58'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 16:47:58'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 16:47:58'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 16:47:58'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 16:47:58'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 16:47:58'!
PASSED!
!Island methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:53:02' prior: 50635240!
terrainAt: aPosition

	
	treesAt detect: [:aTreePosition | aTreePosition = aPosition] 
				ifFound: [^ Tree new] 
				ifNone: [ digsAt detect: [:adigPosition | adigPosition = aPosition] 
									ifFound: [^Diggable new.] 
									ifNone: [^ Empty new] ].
	
	
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 16:53:04'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 16:53:04'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 16:53:04'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 16:53:04'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 16:53:04'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 16:53:04'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 16:53:04'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 16:53:04'!
ERROR!
!Island methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:53:31' prior: 50635641!
terrainAt: aPosition

	
	^treesAt detect: [:aTreePosition | aTreePosition = aPosition] 
				ifFound: [^ Tree new] 
				ifNone: [ digsAt detect: [:adigPosition | adigPosition = aPosition] 
									ifFound: [^Diggable new.] 
									ifNone: [^ Empty new] ].
	
	
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 16:53:33'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 16:53:33'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 16:53:33'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 16:53:33'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 16:53:33'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 16:53:33'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 16:53:33'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 16:53:33'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 16:53:37'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 16:53:37'!
ERROR!
!Island methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:57:35' prior: 50635678!
terrainAt: aPosition

	^treesAt detect: [:aTreePosition | aTreePosition = aPosition] 
				ifFound: [:aTree | ^ Tree new] 
				ifNone: [ digsAt detect: [:adigPosition | adigPosition = aPosition] 
									ifFound: [:aDiggable |^Diggable new.] 
									ifNone: [^ Empty new] ].
	
	
! !
!Island methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 16:57:37' prior: 50635721!
terrainAt: aPosition

	treesAt detect: [:aTreePosition | aTreePosition = aPosition] 
				ifFound: [:aTree | ^ Tree new] 
				ifNone: [ digsAt detect: [:adigPosition | adigPosition = aPosition] 
									ifFound: [:aDiggable |^Diggable new.] 
									ifNone: [^ Empty new] ].
	
	
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 16:57:39'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 16:57:39'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 16:57:39'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 16:57:39'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 16:57:39'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 16:57:39'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 16:57:39'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 16:57:39'!
PASSED!

----SNAPSHOT----(30 April 2023 17:00:20) CuisUniversity-5706.image priorSource: 9723014!

----SNAPSHOT----(30 April 2023 17:20:32) CuisUniversity-5706.image priorSource: 9731816!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 18:42:54'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 18:42:54'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 18:42:54'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 18:42:54'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 18:42:54'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 18:42:54'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 18:42:54'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 18:42:54'!
PASSED!
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 18:48:50'!
moveTo: aPosition in: anIsland

	| acc terrain |
	
	terrain := anIsland terrainAt: aPosition.
	
	(terrain isKindOf:  Tree) ifTrue: [ acc := acc & false ].
	(terrain isKindOf: Empty) ifTrue: [ acc := acc & true ].
	(terrain isKindOf: Diggable) ifTrue: [ acc := acc & true ].
		

	! !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 18:49:13' prior: 50635801!
moveTo: aPosition in: anIsland

	| terrain |
	
	terrain := anIsland terrainAt: aPosition.
	
	(terrain isKindOf:  Tree) ifTrue: [ ^false ].
	(terrain isKindOf: Empty) ifTrue: [ ^true ].
	(terrain isKindOf: Diggable) ifTrue: [ ^true ].
		

	! !
!Corsario methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 18:51:49'!
moveTo: aPosition in: anIsland

	| terrain |
	
	terrain := anIsland terrainAt: aPosition.
	

	
				(terrain isKindOf:  Tree) ifTrue: [ ^false ].
				(terrain isKindOf:  Empty) ifTrue: [ 
					self drawDirectionTo: aPosition.
					^true 
				].
				(terrain isKindOf: Diggable) ifTrue: [ ^true ].
			
			
		! !
!Filibustero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 18:53:28'!
moveTo: aPosition in: anIsland

	| terrain |
	
	terrain := anIsland terrainAt: aPosition.
	

		
	
			(terrain  isKindOf: Tree) ifTrue: [ 
				anIsland clearTerrainAt: aPosition.
				^false
			].
			(terrain  isKindOf:  Empty) ifTrue: [ ^true ].
			(terrain isKindOf:  Diggable) ifTrue: [ ^true ].
		
		
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 18:56:31' prior: 50635458!
moveTo: aPosition
	
	(pirates allSatisfy: [:aPirate | aPirate moveTo: aPosition in: island]) ifTrue: [ island crewAt: aPosition].
	
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 18:56:34'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 18:56:34'!
FAILURE!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 18:56:34'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 18:56:34'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 18:56:34'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 18:56:34'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 18:56:34'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 18:56:34'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 18:56:34'!
FAILURE!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 18:57:02'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 18:57:04'!
FAILURE!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 18:57:04'!
FAILURE!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 18:58:08'!
FAILURE!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 18:58:19'!
FAILURE!
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 19:08:21'!
canMoveTo: aPosition in: anIsland

	| terrain |
	
	terrain := anIsland terrainAt: aPosition.
	
	(terrain isKindOf:  Tree) ifTrue: [ ^false ].
	(terrain isKindOf: Empty) ifTrue: [ ^true ].
	(terrain isKindOf: Diggable) ifTrue: [ ^true ].
		

	! !
!Corsario methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 19:08:59'!
canMoveTo: aPosition in: anIsland

	| terrain |
	
	terrain := anIsland terrainAt: aPosition.
	

	
				(terrain isKindOf:  Tree) ifTrue: [ ^false ].
				(terrain isKindOf:  Empty) ifTrue: [ ^true ].
				(terrain isKindOf: Diggable) ifTrue: [ ^true ].
			
			
		! !
!Filibustero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 19:09:19'!
canMoveTo: aPosition in: anIsland

	| terrain |
	
	terrain := anIsland terrainAt: aPosition.
	

		
	
			(terrain  isKindOf: Tree) ifTrue: [ ^false].
			(terrain  isKindOf:  Empty) ifTrue: [ ^true ].
			(terrain isKindOf:  Diggable) ifTrue: [ ^true ].
		
		
	! !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 19:09:31' prior: 50635813!
moveTo: aPosition in: anIsland

		

	! !
!Corsario methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 19:09:55' prior: 50635823!
moveTo: aPosition in: anIsland

	| terrain |
	
	terrain := anIsland terrainAt: aPosition.

				(terrain isKindOf:  Empty) ifTrue: [ 
					self drawDirectionTo: aPosition.	
				].
			
			
		! !
!Filibustero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 19:10:07' prior: 50635836!
moveTo: aPosition in: anIsland

	| terrain |
	
	terrain := anIsland terrainAt: aPosition.
	

		
	
			(terrain  isKindOf: Tree) ifTrue: [ 
				anIsland clearTerrainAt: aPosition.
			].
			
		
		
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 19:10:55' prior: 50635849!
moveTo: aPosition
	
	(pirates allSatisfy: [:aPirate | aPirate canMoveTo: aPosition in: island]) ifTrue: [ island crewAt: aPosition].
	pirates do: [:aPirate | aPirate moveTo: aPosition in: island ].
	
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 19:11:02'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 19:11:02'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 19:11:02'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 19:11:02'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 19:11:02'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 19:11:02'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 19:11:02'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 19:11:02'!
PASSED!
!Crew class methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 19:13:08'!
at: anIsland at: aPosition

	^ self new initializeWith: anIsland at: aPosition ! !

!methodRemoval: Crew class #at:composedBy:at: stamp: 'NB 4/30/2023 19:13:15'!
at: anIsland composedBy: aCrew at: aPosition

	^ self new initializeWith: anIsland pirates: aCrew at: aPosition !
!Crew methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 19:13:40'!
initializeWith: anIsland at: aPosition

	island := anIsland.
	pirates := ''.
	
	island crewAt: aPosition.! !
!Crew methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 19:14:09' prior: 50636005!
initializeWith: anIsland at: aPosition

	island := anIsland.
	pirates := (OrderedCollection with: (Corsario with: nil) with: Filibustero new with: Bucanero new).
	
	island crewAt: aPosition.! !
!Crew methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 19:15:30' prior: 50636012!
initializeWith: anIsland at: aPosition

	island := anIsland.
	pirates := (OrderedCollection with: (Corsario with: (Map of: island crewStartsAt: aPosition)) with: Filibustero new with: Bucanero new).
	island crewAt: aPosition.! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:15:57' prior: 50633614!
test01MovingCrewToTreePlaceDoesNotMove

	| island crew crewPosition treePosition |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).


	crew := Crew 
			at: island 
			at: crewPosition.
			
	crew moveTo: treePosition.
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:16:08' prior: 50633635!
test02MovingCrewToTreePlaceFilibusteroRemovesTree

	| island crew treePosition crewPosition |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	

	crew := Crew 
			at: island 
			at: crewPosition.

	self deny: (island isEmptyAt: treePosition).
				
	crew moveTo: treePosition.

	self assert: (island isEmptyAt: treePosition).
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:16:20' prior: 50633659!
test03MovingCrewToFreePlace

	| island crew treePosition crewPosition nextPosition  |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	
	crew := Crew 
			at: island 
			at: crewPosition.

	nextPosition := 2@1.
	self assert: (island isEmptyAt: nextPosition).
	
	crew moveTo: nextPosition.

	self deny: (island hasCrewAt: crewPosition).
	self assert: (island hasCrewAt: nextPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:16:52' prior: 50633682!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap

	| island crew treePosition crewPosition nextPosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	
	crew := Crew 
			at: island 
			at: crewPosition.

	nextPosition := 2@1.
	self assert: map isEmpty.

	crew moveTo: nextPosition.

	self assert: map stepsSize equals: 1. 
	self assert: map lastPosition equals: nextPosition.
! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:17:52' prior: 50633777!
test08SimplePirateCannotUseMap

	| island crew treePosition crewPosition map digPosition pirate |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	
	map := Map of: island crewStartsAt: crewPosition.
	
	crew := Crew 
			at: island 
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	
	self 
		should: [ pirate searchTreasureIn: island with: map ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'I am a simple pirate!!'
! !

Pirate subclass: #Corsario
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Corsario category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 19:19:39'!
Pirate subclass: #Corsario
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Object subclass: #Pirate
	instanceVariableNames: 'rank map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Pirate category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 19:19:44'!
Object subclass: #Pirate
	instanceVariableNames: 'rank map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!Bucanero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 19:20:07'!
searchTreasureIn: island

	^rank searchTreasureIn: island with: map
	! !

!methodRemoval: Bucanero #searchTreasureIn:with: stamp: 'NB 4/30/2023 19:20:12'!
searchTreasureIn: island with: aMap

	^rank searchTreasureIn: island with: aMap
	!
!Corsario methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 19:20:21'!
searchTreasureIn: island

	^rank searchTreasureIn: island with: map
	! !

!methodRemoval: Corsario #searchTreasureIn:with: stamp: 'NB 4/30/2023 19:20:26'!
searchTreasureIn: island with: aMap

	^rank searchTreasureIn: island with: aMap
	!
!Filibustero methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 19:20:39'!
searchTreasureIn: island

	^rank searchTreasureIn: island with: map
	! !

!methodRemoval: Filibustero #searchTreasureIn:with: stamp: 'NB 4/30/2023 19:20:44'!
searchTreasureIn: island with: aMap

	^rank searchTreasureIn: island with: aMap
	!
!Pirate methodsFor: 'no messages' stamp: 'NB 4/30/2023 19:21:19'!
initializeWith: aMap

	rank := SimplePirate new.
	map := aMap! !

!methodRemoval: Bucanero #initialize stamp: 'NB 4/30/2023 19:21:26'!
initialize

	rank := SimplePirate new.!

!methodRemoval: Corsario #initializeWith: stamp: 'NB 4/30/2023 19:21:31'!
initializeWith: aMap

	rank := SimplePirate new.
	map := aMap!

!methodRemoval: Filibustero #initialize stamp: 'NB 4/30/2023 19:21:37'!
initialize

	rank := SimplePirate new.!

!methodRemoval: Crew #initializeWith:pirates:at: stamp: 'NB 4/30/2023 19:21:52'!
initializeWith: anIsland pirates: aPirates at: aPosition

	island := anIsland.
	pirates := aPirates.
	
	island crewAt: aPosition.!
!Crew methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 19:22:12' prior: 50636021!
initializeWith: anIsland at: aPosition

	island := anIsland.
	pirates := (OrderedCollection with: (Corsario with: (Map of: island crewStartsAt: aPosition)) with: Filibustero with: (Map of: island crewStartsAt: aPosition) with: Bucanero with: (Map of: island crewStartsAt: aPosition)).
	island crewAt: aPosition.! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 19:22:16'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 19:22:16'!
ERROR!
!Pirate class methodsFor: 'no messages' stamp: 'NB 4/30/2023 19:22:40'!
with: aMap

	^ self new initializeWith: aMap.! !

!methodRemoval: Corsario class #with: stamp: 'NB 4/30/2023 19:22:47'!
with: aMap

	^ self new initializeWith: aMap.!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 19:22:53'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 19:22:53'!
ERROR!

----SNAPSHOT----(30 April 2023 19:22:57) CuisUniversity-5706.image priorSource: 9731906!
!Crew methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 19:23:26' prior: 50636205!
initializeWith: anIsland at: aPosition

	island := anIsland.
	pirates := (OrderedCollection with: (Corsario with: (Map of: island crewStartsAt: aPosition)) with: (Filibustero with: (Map of: island crewStartsAt: aPosition)) with: (Bucanero with: (Map of: island crewStartsAt: aPosition))).
	island crewAt: aPosition.! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 19:23:33'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 19:23:35'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 19:23:40'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:24:00' prior: 50636106!
test08SimplePirateCannotUseMap

	| island crew treePosition crewPosition digPosition pirate |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).

	
	crew := Crew 
			at: island 
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	
	self 
		should: [ pirate searchTreasureIn: island] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'I am a simple pirate!!'
! !

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 19:24:01'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 19:24:26'!
ERROR!
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:24:52' prior: 50636264!
test08SimplePirateCannotUseMap

	| island crew treePosition crewPosition map digPosition pirate |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	
	map := Map of: island crewStartsAt: crewPosition.
	
	crew := Crew 
			at: island 
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero with: map.
	
	self 
		should: [ pirate searchTreasureIn: island] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'I am a simple pirate!!'
! !

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 19:24:53'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 19:24:53'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 19:24:53'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 19:24:53'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 19:24:53'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 19:24:53'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 19:24:53'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 19:24:53'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 19:24:53'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 19:24:58'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:25:29' prior: 50633754!
test07CaptainCanUseMap

	| island crew treePosition crewPosition digPosition pirate |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	
	crew := Crew 
			at: island 
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	pirate aCaptainIWasMeantToBe.
	
	self assert: (pirate searchTreasureIn: island)! !

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 19:25:30'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 19:25:30'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 19:25:30'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 19:25:30'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 19:25:30'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 19:25:30'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 19:25:30'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 19:25:30'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 19:25:30'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 19:25:35'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:25:53' prior: 50633732!
test06CrewCanBuryTreasureIfBucaneroCanDig

	| island crew treePosition crewPosition map digPosition |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	
	map := Map of: island crewStartsAt: crewPosition.
	
	crew := Crew 
			at: island 
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.
	
	self assert: map hasTreasureMark.
	
			
	
	
	
! !

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 19:25:55'!
FAILURE!

!classDefinition: #Crew category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 19:26:45'!
Object subclass: #Crew
	instanceVariableNames: 'pirates island map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!Crew methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 19:26:44' prior: 50636242!
initializeWith: anIsland at: aPosition

	island := anIsland.
	map:= Map of: island crewStartsAt: aPosition.
	pirates := (OrderedCollection with: (Corsario with: (Map of: island crewStartsAt: aPosition)) with: (Filibustero with: (Map of: island crewStartsAt: aPosition)) with: (Bucanero with: (Map of: island crewStartsAt: aPosition))).
	island crewAt: aPosition.! !
!Crew methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 19:27:17' prior: 50636423!
initializeWith: anIsland at: aPosition

	island := anIsland.
	map:= Map of: island crewStartsAt: aPosition.
	pirates := (OrderedCollection with: (Corsario with: map) with: (Filibustero with: map) with: (Bucanero with: (map))).
	island crewAt: aPosition.! !
!Crew methodsFor: 'as yet unclassified' stamp: 'NB 4/30/2023 19:27:42'!
map
	
	^map.
	
	
	! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:28:11' prior: 50636087!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap

	| island crew treePosition crewPosition nextPosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	
	crew := Crew 
			at: island 
			at: crewPosition.

	nextPosition := 2@1.
	self assert: map isEmpty.

	crew moveTo: nextPosition.

	self assert: crew map stepsSize equals: 1. 
	self assert: crew map lastPosition equals: nextPosition.
! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:28:21' prior: 50636453!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap

	| island crew treePosition crewPosition nextPosition |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	
	crew := Crew 
			at: island 
			at: crewPosition.

	nextPosition := 2@1.
	self assert: crew map isEmpty.

	crew moveTo: nextPosition.

	self assert: crew map stepsSize equals: 1. 
	self assert: crew map lastPosition equals: nextPosition.
! !

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 19:28:22'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 19:28:22'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 19:28:22'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 19:28:22'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 19:28:22'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 19:28:22'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 19:28:22'!
FAILURE!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 19:28:22'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 19:28:22'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:28:51' prior: 50633705!
test05CrewCannotBuryTreasureIfBucaneroCannotDig

	| island crew treePosition crewPosition digPosition |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).

	
	crew := Crew 
			at: island 
			at: crewPosition.

	crew moveTo: 2@1.
	
	self 
		should: [ crew buryTreasureAt: 3@1 ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Bucanero cannotDigErrorDescription.
			self deny: crew map hasTreasureMark ]
			
	
	
	
! !

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 19:28:55'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:29:08' prior: 50636393!
test06CrewCanBuryTreasureIfBucaneroCanDig

	| island crew treePosition crewPosition digPosition |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	
	crew := Crew 
			at: island 
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.
	
	self assert: crew map hasTreasureMark.
	
			
	
	
	
! !

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 19:29:10'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 19:29:10'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 19:29:10'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 19:29:10'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 19:29:10'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 19:29:10'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 19:29:10'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 19:29:10'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 19:29:10'!
PASSED!

----SNAPSHOT----(30 April 2023 19:30:13) CuisUniversity-5706.image priorSource: 9746798!
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:32:43' overrides: 16961394!
setUp

	
	| crew crewPosition island treePosition |
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).


	crew := Crew 
			at: island 
			at: crewPosition.
			! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:33:29' prior: 50636031!
test01MovingCrewToTreePlaceDoesNotMove

	| island2 crew crewPosition treePosition |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island2 := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).


	crew := Crew 
			at: island2 
			at: crewPosition.
			
	crew moveTo: treePosition.
	
	self deny: (island2 hasCrewAt: treePosition).
	self assert: (island2 hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:34:13' prior: 50636608!
test01MovingCrewToTreePlaceDoesNotMove

	| island2 crew2 crewPosition2 treePosition2 |
	
	crewPosition2 := 1@1.
	treePosition2 := 1@2.
	
	island2 := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition2)
		digsAt: (OrderedCollection with: 3@3).


	crew2 := Crew 
			at: island2 
			at: crewPosition2.
			
	crew2 moveTo: treePosition2.
	
	
	self deny: (island2 hasCrewAt: treePosition2).
	self assert: (island2 hasCrewAt: crewPosition2).! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:34:28' prior: 50636048!
test02MovingCrewToTreePlaceFilibusteroRemovesTree

! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:34:28' prior: 50636642!
test02MovingCrewToTreePlaceFilibusteroRemovesTree

! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:34:28' prior: 50636647!
test02MovingCrewToTreePlaceFilibusteroRemovesTree

! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:16:08' prior: 50636652!
test02MovingCrewToTreePlaceFilibusteroRemovesTree

	| island crew treePosition crewPosition |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	

	crew := Crew 
			at: island 
			at: crewPosition.

	self deny: (island isEmptyAt: treePosition).
				
	crew moveTo: treePosition.

	self assert: (island isEmptyAt: treePosition).
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:35:55' prior: 50636657!
test02MovingCrewToTreePlaceFilibusteroRemovesTree

	! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:36:00' prior: 50636068!
test03MovingCrewToFreePlace

	! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:36:05' prior: 50636472!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap

! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:36:11' prior: 50636521!
test05CrewCannotBuryTreasureIfBucaneroCannotDig


	
	
	
! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:36:15' prior: 50636547!
test06CrewCanBuryTreasureIfBucaneroCanDig

	
	
	
! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:36:21' prior: 50636344!
test07CaptainCanUseMap

	! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:36:26' prior: 50636290!
test08SimplePirateCannotUseMap

	
! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:37:10' prior: 50636625!
test01MovingCrewToTreePlaceDoesNotMove

	! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:37:28' prior: 50636596 overrides: 16961394!
setUp

	! !

TestCase subclass: #CrewTest
	instanceVariableNames: 'crew'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #CrewTest category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 19:37:38'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'crew'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

TestCase subclass: #CrewTest
	instanceVariableNames: 'crew crewPosition island'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #CrewTest category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 19:37:47'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'crew crewPosition island'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

TestCase subclass: #CrewTest
	instanceVariableNames: 'crew crewPosition island treePosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #CrewTest category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 19:38:12'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'crew crewPosition island treePosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:38:25' prior: 50636714 overrides: 16961394!
setUp

	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:38:58' prior: 50636709!
test01MovingCrewToTreePlaceDoesNotMove

	crew moveTo: treePosition.
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 19:39:01'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 19:39:01'!
ERROR!
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:39:33' prior: 50636757 overrides: 16961394!
setUp

	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
		
	crew := Crew 
			at: island
			at: crewPosition.
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 19:39:37'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:40:00' prior: 50636677!
test02MovingCrewToTreePlaceFilibusteroRemovesTree

	crew moveTo: treePosition.

	self assert: (island isEmptyAt: treePosition).
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 19:40:03'!
PASSED!

----SNAPSHOT----(30 April 2023 19:40:06) CuisUniversity-5706.image priorSource: 9758139!
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:40:36' prior: 50636682!
test03MovingCrewToFreePlace

 	
	| nextPosition |
	nextPosition := 2@1.
	
	crew moveTo: nextPosition.

	self deny: (island hasCrewAt: crewPosition).
	self assert: (island hasCrewAt: nextPosition).! !

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 19:40:41'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:41:23' prior: 50636686!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap

	| nextPosition |
	nextPosition := 2@1.

	crew moveTo: nextPosition.
	
	self assert: crew map stepsSize equals: 1. 
	self assert: crew map lastPosition equals: nextPosition.! !

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 19:41:28'!
PASSED!

!classDefinition: #CrewTest category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 19:41:54'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'crew crewPosition island treePosition digPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:41:52' prior: 50636781 overrides: 16961394!
setUp

	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
		
	crew := Crew 
			at: island
			at: crewPosition.
! !

!classDefinition: #CrewTest category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 19:44:34'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'crew crewPosition island treePosition digPosition islandWithDigs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #CrewTest category: 'ISW1-2022-2C-1erParcial' stamp: 'NB 4/30/2023 19:44:46'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'crew crewPosition island treePosition digPosition islandWithDigs crewDigs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:44:44' prior: 50636845 overrides: 16961394!
setUp

	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
		
	islandWithDigs := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
		
	crew := Crew 
			at: island
			at: crewPosition.

	crewDigs := Crew
			at: islandWithDigs
			at: crewPosition ! !
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:45:28' prior: 50636691!
test05CrewCannotBuryTreasureIfBucaneroCannotDig


	crewDigs moveTo: 2@1.
	
	self 
		should: [ crewDigs buryTreasureAt: 3@1 ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Bucanero cannotDigErrorDescription.
			self deny: crewDigs map hasTreasureMark ]
			
	
	
! !

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 19:45:31'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'NB 4/30/2023 19:46:18' prior: 50636696!
test06CrewCanBuryTreasureIfBucaneroCanDig

	
	
	crewDigs moveTo: 2@1.
	crewDigs buryTreasureAt: 2@2.
	
	self assert: crewDigs map hasTreasureMark.
	
! !

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 19:46:20'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 4/30/2023 19:47:41'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 4/30/2023 19:47:41'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 4/30/2023 19:47:41'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 4/30/2023 19:47:41'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 4/30/2023 19:47:41'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 4/30/2023 19:47:41'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 4/30/2023 19:47:41'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 4/30/2023 19:47:41'!
PASSED!

----SNAPSHOT----(30 April 2023 19:47:45) CuisUniversity-5706.image priorSource: 9765010!

!classRemoval: #Tree stamp: 'NB 4/30/2023 19:48:05'!
Terrain subclass: #Tree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Empty stamp: 'NB 4/30/2023 19:48:05'!
Terrain subclass: #Empty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Diggable stamp: 'NB 4/30/2023 19:48:05'!
Terrain subclass: #Diggable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Terrain stamp: 'NB 4/30/2023 19:48:05'!
Object subclass: #Terrain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #SimplePirate stamp: 'NB 4/30/2023 19:48:05'!
PirateRank subclass: #SimplePirate
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Captain stamp: 'NB 4/30/2023 19:48:06'!
PirateRank subclass: #Captain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #PirateRank stamp: 'NB 4/30/2023 19:48:06'!
Object subclass: #PirateRank
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Filibustero stamp: 'NB 4/30/2023 19:48:06'!
Pirate subclass: #Filibustero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Corsario stamp: 'NB 4/30/2023 19:48:06'!
Pirate subclass: #Corsario
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Bucanero stamp: 'NB 4/30/2023 19:48:06'!
Pirate subclass: #Bucanero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Pirate stamp: 'NB 4/30/2023 19:48:06'!
Object subclass: #Pirate
	instanceVariableNames: 'rank map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Map stamp: 'NB 4/30/2023 19:48:07'!
Object subclass: #Map
	instanceVariableNames: 'island startPosition steps treasureMarkPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Island stamp: 'NB 4/30/2023 19:48:07'!
Object subclass: #Island
	instanceVariableNames: 'boardSize treesAt digsAt crewAt treasureAt'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Crew stamp: 'NB 4/30/2023 19:48:07'!
Object subclass: #Crew
	instanceVariableNames: 'pirates island map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #CrewTest stamp: 'NB 4/30/2023 19:48:07'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'crew crewPosition island treePosition digPosition islandWithDigs crewDigs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

----End fileIn of /Users/nico/Documents/inge1/Parciales/2022-2c/1erParcial/ISW1-2022-2C-1erParcial-Solucion.st----!

----STARTUP---- (1 May 2023 15:26:44) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


----End fileIn of /Users/nico/Documents/inge1/Parciales/2022-1c/1erParcial/ISW1-2022-1C-Parcial-1.st----!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 15:27:34'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 15:27:34'!
PASSED!
!GrandPrix methodsFor: 'simulation' stamp: 'NB 5/1/2023 15:29:42' prior: 50637590!
advance: aTimeLapse
	
	track cars do: [ :car | self relocate: car after: aTimeLapse.]
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 15:29:49'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 15:29:49'!
PASSED!
!Track class methodsFor: 'car position' stamp: 'NB 5/1/2023 15:30:29'!
carNotFoundErrorDescription

	^ 'Car not found'! !

!methodRemoval: Track #carNotFoundErrorDescription stamp: 'NB 5/1/2023 15:30:29'!
carNotFoundErrorDescription

	^ 'Car not found'!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 15:30:32'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 15:30:32'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'NB 5/1/2023 15:32:59' prior: 50637876!
cars

	^sectors inject: Set new into: [ :cars :sector | cars addAll: sector cars.].

	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 15:33:02'!
FAILURE!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 15:33:02'!
FAILURE!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 15:33:02'!
FAILURE!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 15:33:02'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 15:33:39'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 15:33:41'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 15:33:43'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 15:33:44'!
FAILURE!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 15:33:44'!
FAILURE!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 15:33:44'!
FAILURE!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 15:33:44'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 15:33:48'!
FAILURE!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 15:33:55'!
FAILURE!
!Track methodsFor: 'accessing' stamp: 'FRT 5/1/2022 09:10:09' prior: 50638212!
cars
	| allCars ix |
	
	allCars _ Set new.
	ix _ 1.
	[ix <= sectors size] whileTrue: [ | s |
		s _ sectors at: ix.
		allCars addAll: s cars.
		ix _ ix + 1.
	].

	^ allCars
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 15:35:21'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 15:35:21'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'NB 5/1/2023 15:32:59' prior: 50638407!
cars

	^sectors inject: Set new into: [ :cars :sector | cars addAll: sector cars.].

	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 15:36:38'!
FAILURE!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 15:36:38'!
FAILURE!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 15:36:38'!
FAILURE!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 15:36:38'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 15:36:38'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'NB 5/1/2023 15:40:22' prior: 50638503!
cars

	^sectors inject: Set new addingAll: [ :sector | sector cars.].

	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 15:40:26'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 15:40:26'!
PASSED!
!Track methodsFor: 'testing' stamp: 'NB 5/1/2023 15:42:24' prior: 50637892!
includes: aCar
	"Returns if any of the sectors includes aCar"
	
	^sectors anySatisfy: [:sector | sector includes: aCar].
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 15:42:26'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 15:42:27'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 15:42:27'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'NB 5/1/2023 15:44:45' prior: 50637884!
length
	
	^sectors inject: 0 * kilometer into: [:distance :sector | distance + sector length].
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 15:44:55'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 15:44:55'!
PASSED!
!Track methodsFor: 'car position' stamp: 'NB 5/1/2023 16:12:39' prior: 50637826!
positionOf: aCar
	
	^sectors inject: 0 * kilometer into: [:distance :sector | (sector includes: aCar) ifFalse: [distance + sector length]] + ((sectors find: [:sector | sector includes: aCar]) positionOf: aCar).! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:12:41'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 16:12:41'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:12:41'!
ERROR!
!Track methodsFor: 'car position' stamp: 'NB 5/1/2023 16:13:45' prior: 50638877!
positionOf: aCar
	
	^sectors inject: 0 * kilometer into: [:distance :sector | (sector includes: aCar) ifFalse: [distance + sector length]] + ((sectors detect: [:sector | sector includes: aCar]) positionOf: aCar).! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:13:47'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 16:13:47'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:13:47'!
ERROR!
!Track methodsFor: 'car position' stamp: 'NB 5/1/2023 16:14:23' prior: 50638978!
positionOf: aCar
	
	^sectors inject: 0 * kilometer into: [:distance :sector | (sector includes: aCar) ifFalse: [^distance + sector length]] + ((sectors detect: [:sector | sector includes: aCar]) positionOf: aCar).! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:14:26'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 16:14:26'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:14:26'!
ERROR!
!Track methodsFor: 'car position' stamp: 'NB 5/1/2023 16:15:17' prior: 50639079!
positionOf: aCar
	
	^(sectors inject: 0 * kilometer into: [:distance :sector | (sector includes: aCar) ifFalse: [^distance + sector length]]) + ((sectors detect: [:sector | sector includes: aCar]) positionOf: aCar).! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:15:20'!
FAILURE!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 16:15:20'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:15:20'!
FAILURE!
!Track methodsFor: 'car position' stamp: 'HAW 5/2/2022 14:09:03' prior: 50639180!
positionOf: aCar
	| accumulatedLength ix sector |
	
	ix _ 1.
	sector _ (sectors at: ix).
	accumulatedLength _ 0 * kilometer.

	[sector includes: aCar] whileFalse: [
		accumulatedLength _ accumulatedLength + sector length.
		ix _ ix + 1.
		sector _ (sectors at: ix).
	].

	^ accumulatedLength + (sector positionOf: aCar).! !
!Track methodsFor: 'car position' stamp: 'NB 5/1/2023 16:35:05' prior: 50639281!
positionOf: aCar
	| accumulatedLength ix sector |
	
	ix := 1.
	sector := (sectors at: ix).
	accumulatedLength := 0 * kilometer.

	[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	].

	^ accumulatedLength + ((sectors detect: [:sec | sec includes: aCar]) positionOf: aCar).! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 16:35:08'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 16:35:08'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 16:35:08'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 16:35:08'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:35:08'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:35:08'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 16:35:08'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 16:35:09'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 16:35:09'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:35:09'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 16:35:09'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 16:35:09'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 16:35:09'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 16:35:09'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 16:35:09'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 16:35:09'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 16:35:09'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 16:35:09'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 16:35:09'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 16:35:09'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 16:35:09'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 16:35:09'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 16:35:09'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 16:35:09'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 16:35:09'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 16:35:13'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 16:35:13'!
PASSED!
!Track methodsFor: 'car position' stamp: 'NB 5/1/2023 16:37:08' prior: 50639294!
positionOf: aCar
	| accumulatedLength ix sector |
	
	ix := 1.
	sector := (sectors at: ix).
	accumulatedLength := 0 * kilometer.

	[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	].

	accumulatedLength := sectors inject:  0 * kilometer into: [:distance :s| (s includes: aCar) ifFalse: [^distance + s length] ].

	^ accumulatedLength + ((sectors detect: [:sec | sec includes: aCar]) positionOf: aCar).! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 16:37:10'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 16:37:10'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 16:37:10'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 16:37:10'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:37:10'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:37:10'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 16:37:10'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 16:37:10'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 16:37:10'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:37:10'!
FAILURE!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 16:37:10'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 16:37:11'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 16:37:11'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 16:37:11'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 16:37:11'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 16:37:11'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 16:37:11'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 16:37:11'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 16:37:11'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 16:37:11'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 16:37:11'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 16:37:11'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 16:37:11'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 16:37:11'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 16:37:11'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:37:11'!
FAILURE!
!Track methodsFor: 'car position' stamp: 'NB 5/1/2023 16:38:13' prior: 50639483!
positionOf: aCar
	| accumulatedLength ix sector |
	
	ix := 1.
	sector := (sectors at: ix).
	accumulatedLength := 0 * kilometer.

	[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	].

	accumulatedLength := sectors inject:  0 * kilometer into: [:distance :s| (s includes: aCar) ifFalse: [distance + s length] ].

	^ accumulatedLength + ((sectors detect: [:sec | sec includes: aCar]) positionOf: aCar).! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:38:15'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 16:38:15'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:38:15'!
ERROR!
!Track methodsFor: 'car position' stamp: 'NB 5/1/2023 16:40:38' prior: 50639593!
positionOf: aCar
	| accumulatedLength ix sector sectorsWithoutCar |
	
	ix := 1.
	sector := (sectors at: ix).
	accumulatedLength := 0 * kilometer.

	[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	].

	sectorsWithoutCar:= sectors select: [:sec | (sec includes: aCar) not].

	accumulatedLength := sectorsWithoutCar inject:  0 * kilometer into: [:distance :s| distance + s length ].

	^ accumulatedLength + ((sectors detect: [:sec | sec includes: aCar]) positionOf: aCar).! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 16:40:40'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 16:40:42'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 16:40:42'!
PASSED!
!Track methodsFor: 'car position' stamp: 'NB 5/1/2023 16:41:27' prior: 50639703!
positionOf: aCar
	
	| sectorsWithoutCar |
	

	sectorsWithoutCar:= sectors select: [:sec | (sec includes: aCar) not].

	^ sectorsWithoutCar inject:  0 * kilometer into: [:distance :s| distance + s length ] + ((sectors detect: [:sec | sec includes: aCar]) positionOf: aCar).! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:41:36'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 16:41:36'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:41:36'!
ERROR!
!Track methodsFor: 'car position' stamp: 'NB 5/1/2023 16:41:50' prior: 50639899!
positionOf: aCar
	
	| sectorsWithoutCar |
	

	sectorsWithoutCar:= sectors select: [:sec | (sec includes: aCar) not].

	^(sectorsWithoutCar inject:  0 * kilometer into: [:distance :s| distance + s length ]) + ((sectors detect: [:sec | sec includes: aCar]) positionOf: aCar).! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 16:41:53'!
PASSED!

----SNAPSHOT----(1 May 2023 16:41:58) CuisUniversity-5706.image priorSource: 9769453!
!Track methodsFor: 'car position' stamp: 'NB 5/1/2023 16:44:47'!
assertValidPosition: aPosition

	^ aPosition > self length ifTrue: [ self error: self class cannotPlacedCarErrorDescription ]! !
!Track methodsFor: 'car position' stamp: 'NB 5/1/2023 16:44:47' prior: 50637839!
put: aCar at: aPosition

	| ix sector acc |
	
	self assertValidPosition: aPosition.

	self remove: aCar.

	ix _ 1.
	sector _ sectors at: ix. 
	acc _ 0 * kilometer.

	[aPosition > (acc +  sector length)] whileTrue: [
		acc _ acc + sector length.
		ix _ ix + 1.
		sector _ sectors at: ix.
	].

	sector put: aCar at: aPosition - acc.! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 16:44:53'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 16:44:53'!
PASSED!
!Track methodsFor: 'car position' stamp: 'NB 5/1/2023 16:49:55' prior: 50637867!
sectorOf: aCar ifNone: aBlock

	^sectors detect: [ :sector | sector includes: aCar] ifNone: [^ aBlock value.]

	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 16:49:57'!
PASSED!

----SNAPSHOT----(1 May 2023 16:51:58) CuisUniversity-5706.image priorSource: 9870403!

----SNAPSHOT----(1 May 2023 16:55:21) CuisUniversity-5706.image priorSource: 9876930!

----STARTUP---- (1 May 2023 18:38:10) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!

!FormulaOneCar class methodsFor: 'turbo' stamp: 'NB 5/1/2023 18:44:27'!
turboAlreadydeActivatedErrorDescription
	
	^'Turbo is already deactivated'! !

!methodRemoval: FormulaOneCar #turboAlreadydeActivatedErrorDescription stamp: 'NB 5/1/2023 18:44:27'!
turboAlreadydeActivatedErrorDescription
	
	^'Turbo is already deactivated'!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 18:44:29'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 18:44:29'!
ERROR!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 18:44:29'!
ERROR!
!FormulaOneCar methodsFor: 'turbo' stamp: 'NB 5/1/2023 18:45:04' prior: 50637508!
deactivateTurbo
	
	turboActivated ifFalse: [ self error: self class turboAlreadydeActivatedErrorDescription ].
	
	turboActivated := false! !
!FormulaOneTest methodsFor: 'tests' stamp: 'NB 5/1/2023 18:45:14' prior: 50637419!
test25CanNotDeactivateTurboWhenIsDeactivated

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := FormulaOneCar drivenBy: #Schumacher.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ schumacher deactivateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher class turboAlreadydeActivatedErrorDescription
	
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 18:45:17'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 18:45:17'!
PASSED!
!FormulaOneCar class methodsFor: 'testing' stamp: 'NB 5/1/2023 18:45:28'!
turboAlreadyActivatedErrorDescription
	
	^'Turbo already activated'! !

!methodRemoval: FormulaOneCar #turboAlreadyActivatedErrorDescription stamp: 'NB 5/1/2023 18:45:28'!
turboAlreadyActivatedErrorDescription
	
	^'Turbo already activated'!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 18:45:30'!
ERROR!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 18:45:30'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 18:45:30'!
ERROR!
!FormulaOneTest methodsFor: 'tests' stamp: 'NB 5/1/2023 18:46:13' prior: 50637398!
test24CanNotActivateTurboWhenTurboIsActivated

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := FormulaOneCar drivenBy: #Schumacher.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	schumacher activateTurbo.
	
	self 
		should: [ schumacher activateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher class turboAlreadyActivatedErrorDescription
	
	! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'NB 5/1/2023 18:46:18' prior: 50637501!
activateTurbo

	turboActivated ifTrue: [ self error: self class turboAlreadyActivatedErrorDescription ].
	
	currentSector activateTurboTo: self.
! !

Object subclass: #Turbo
	instanceVariableNames: 'sectors driversDistanceFromBeginning'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #Turbo category: 'ISW1-2022-1C-Parcial-1' stamp: 'NB 5/1/2023 18:47:05'!
Object subclass: #Turbo
	instanceVariableNames: 'sectors driversDistanceFromBeginning'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

Turbo subclass: #TurboActivated
	instanceVariableNames: 'sectors driversDistanceFromBeginning'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

Turbo subclass: #TurboActivated
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboActivated category: 'ISW1-2022-1C-Parcial-1' stamp: 'NB 5/1/2023 18:47:26'!
Turbo subclass: #TurboActivated
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

Turbo subclass: #TurboDeactivated
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboDeactivated category: 'ISW1-2022-1C-Parcial-1' stamp: 'NB 5/1/2023 18:47:35'!
Turbo subclass: #TurboDeactivated
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

Object subclass: #Turbo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #Turbo category: 'ISW1-2022-1C-Parcial-1' stamp: 'NB 5/1/2023 18:47:42'!
Object subclass: #Turbo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!
!Turbo methodsFor: 'no messages' stamp: 'NB 5/1/2023 18:48:01'!
activateTurbo

	self subclassResponsibility 
! !
!TurboActivated methodsFor: 'no messages' stamp: 'NB 5/1/2023 18:48:19' overrides: 50640717!
activateTurbo

	self error: self class turboAlreadyActivatedErrorDescription.! !

!classDefinition: #TurboDeactivated category: 'ISW1-2022-1C-Parcial-1' stamp: 'NB 5/1/2023 18:48:43'!
Turbo subclass: #TurboDeactivated
	instanceVariableNames: 'currentSector'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!
!TurboDeactivated methodsFor: 'no messages' stamp: 'NB 5/1/2023 18:48:41' overrides: 50640717!
activateTurbo
	
	currentSector activateTurboTo: self.
! !
!TurboActivated class methodsFor: 'no messages' stamp: 'NB 5/1/2023 18:49:17'!
turboAlreadyActivatedErrorDescription
	
	^'Turbo already activated'! !
!TurboDeactivated class methodsFor: 'no messages' stamp: 'NB 5/1/2023 18:49:28'!
turboAlreadydeActivatedErrorDescription
	
	^'Turbo is already deactivated'! !
!TurboDeactivated methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 18:51:34'!
activateTurbo: aSector
	
	aSector activateTurboTo: self.
! !

!methodRemoval: TurboDeactivated #activateTurbo stamp: 'NB 5/1/2023 18:51:45'!
activateTurbo
	
	currentSector activateTurboTo: self.
!
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 18:51:51'!
activateTurbo: aSector

	self error: self class turboAlreadyActivatedErrorDescription.! !

!methodRemoval: TurboActivated #activateTurbo stamp: 'NB 5/1/2023 18:51:55'!
activateTurbo

	self error: self class turboAlreadyActivatedErrorDescription.!
!Turbo methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 18:52:00'!
activateTurbo: aSector

	self subclassResponsibility 
! !

!methodRemoval: Turbo #activateTurbo stamp: 'NB 5/1/2023 18:52:05'!
activateTurbo

	self subclassResponsibility 
!
!FormulaOneCar methodsFor: 'initialization' stamp: 'NB 5/1/2023 18:52:34' prior: 50637457!
initializeDrivenBy: aDriver 

	driver := aDriver.
	turboActivated := TurboDeactivated new.
	turboActivations := 0.
	speed := 0*kilometer/hour.
	traveledDistance := 0.
	! !

!classDefinition: #FormulaOneCar category: 'ISW1-2022-1C-Parcial-1' stamp: 'NB 5/1/2023 18:52:50'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed turbo traveledDistance currentSector turboActivations'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 18:52:50' prior: 50640655!
activateTurbo

	turbo ifTrue: [ self error: self class turboAlreadyActivatedErrorDescription ].
	
	currentSector activateTurboTo: self.
! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 18:52:50' prior: 50637529!
activateTurboInSectorWithTurbo
	
	turbo _ true.
	turboActivations _ turboActivations + 1 ! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 18:52:50' prior: 50640780!
initializeDrivenBy: aDriver 

	driver := aDriver.
	turbo := TurboDeactivated new.
	turboActivations := 0.
	speed := 0*kilometer/hour.
	traveledDistance := 0.
	! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 18:52:50' prior: 50637479!
speed

	turbo ifTrue: [
		turboActivations = 1 ifTrue: [ ^ speed * 12 / 10 ].
		turboActivations = 2 ifTrue: [ ^ speed * 11 / 10 ].
		turboActivations = 3 ifTrue: [ ^ speed * 105 / 100 ].
	].

	^speed! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 18:52:50' prior: 50640416!
deactivateTurbo
	
	turbo ifFalse: [ self error: self class turboAlreadydeActivatedErrorDescription ].
	
	turbo := false! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 18:52:50' prior: 50637520!
isTurboActivated
	
	^turbo! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'NB 5/1/2023 18:53:32' prior: 50640799!
activateTurbo

	turbo activateTurbo: currentSector .
! !
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 18:53:59'!
isTurboActivated

	^true.! !
!TurboDeactivated methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 18:54:12'!
isTurboActivated

	^false.! !
!Turbo methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 18:54:23'!
isTurboActivated

	self subclassResponsibility 
! !
!FormulaOneCar methodsFor: 'testing' stamp: 'NB 5/1/2023 18:54:48' prior: 50640839!
isTurboActivated
	
	^turbo isTurboActivated .! !
!FormulaOneCar methodsFor: 'moving' stamp: 'NB 5/1/2023 18:55:15' prior: 50640822!
speed

	self isTurboActivated ifTrue: [
		turboActivations = 1 ifTrue: [ ^ speed * 12 / 10 ].
		turboActivations = 2 ifTrue: [ ^ speed * 11 / 10 ].
		turboActivations = 3 ifTrue: [ ^ speed * 105 / 100 ].
	].

	^speed! !
!FormulaOneCar methodsFor: 'turbo-private' stamp: 'NB 5/1/2023 18:55:53' prior: 50640807!
activateTurboInSectorWithTurbo
	
	turbo := TurboActivated new.
	turboActivations := turboActivations + 1 ! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'NB 5/1/2023 18:56:11' prior: 50640832!
deactivateTurbo
	
	turbo ifFalse: [ self error: self class turboAlreadydeActivatedErrorDescription ].
	
	turbo := TurboDeactivated new.! !
!Turbo methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 18:56:44'!
deactivateTurbo

	self subclassResponsibility 
! !
!TurboDeactivated methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 18:57:25' overrides: 50640889!
deactivateTurbo
	
	self error: self class turboAlreadydeActivatedErrorDescription.
! !
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 18:57:47' overrides: 50640889!
deactivateTurbo

	^TurboDeactivated new.! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'NB 5/1/2023 18:58:08' prior: 50640882!
deactivateTurbo
	
	turbo := turbo deactivateTurbo.! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 18:58:32'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 18:58:33'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 18:58:33'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 18:58:33'!
FAILURE!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 18:58:33'!
ERROR!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 18:58:33'!
FAILURE!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 18:58:33'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 18:58:33'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 18:58:33'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 18:58:33'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 18:58:33'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 18:58:33'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 18:58:33'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 18:58:33'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 18:58:33'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 18:58:33'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 18:58:33'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 18:58:33'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 18:58:33'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 18:58:33'!
ERROR!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 18:58:33'!
ERROR!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 18:58:33'!
ERROR!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 18:58:33'!
ERROR!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 18:58:33'!
ERROR!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 18:58:33'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 18:58:47'!
FAILURE!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 18:58:47'!
FAILURE!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 19:00:17'!
FAILURE!
!FormulaOneCar methodsFor: 'turbo' stamp: 'NB 5/1/2023 19:02:15' prior: 50640843!
activateTurbo

	turbo activateTurbo: currentSector for: self.
! !
!Turbo methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 19:02:52'!
activateTurbo: aSector for: for 

	self subclassResponsibility 
! !
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 19:02:52' overrides: 50641011!
activateTurbo: aSector for: for 

	self error: self class turboAlreadyActivatedErrorDescription.! !
!TurboDeactivated methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 19:02:52' overrides: 50641011!
activateTurbo: aSector for: for 
	
	aSector activateTurboTo: self.
! !

!methodRemoval: Turbo #activateTurbo: stamp: 'NB 5/1/2023 19:02:52'!
activateTurbo: aSector

	self subclassResponsibility 
!

!methodRemoval: TurboActivated #activateTurbo: stamp: 'NB 5/1/2023 19:02:52'!
activateTurbo: aSector

	self error: self class turboAlreadyActivatedErrorDescription.!

!methodRemoval: TurboDeactivated #activateTurbo: stamp: 'NB 5/1/2023 19:02:52'!
activateTurbo: aSector
	
	aSector activateTurboTo: self.
!
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 19:03:09' prior: 50641017 overrides: 50641011!
activateTurbo: aSector for: aCar

	self error: self class turboAlreadyActivatedErrorDescription.! !
!TurboDeactivated methodsFor: 'as yet unclassified' stamp: 'NB 5/1/2023 19:03:21' prior: 50641024 overrides: 50641011!
activateTurbo: aSector for: aCar
	
	aSector activateTurboTo: aCar.
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/1/2023 19:03:24'!
PASSED!

----SNAPSHOT----(1 May 2023 19:03:29) CuisUniversity-5706.image priorSource: 9877017!

----SNAPSHOT----(1 May 2023 19:04:58) CuisUniversity-5706.image priorSource: 9903765!

----SNAPSHOT----(1 May 2023 19:06:31) CuisUniversity-5706.image priorSource: 9903852!

!classRemoval: #TurboDeactivated stamp: 'NB 5/1/2023 19:07:10'!
Turbo subclass: #TurboDeactivated
	instanceVariableNames: 'currentSector'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboActivated stamp: 'NB 5/1/2023 19:07:10'!
Turbo subclass: #TurboActivated
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Turbo stamp: 'NB 5/1/2023 19:07:10'!
Object subclass: #Turbo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Track stamp: 'NB 5/1/2023 19:07:10'!
Object subclass: #Track
	instanceVariableNames: 'sectors driversDistanceFromBeginning'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Sector stamp: 'NB 5/1/2023 19:07:10'!
Object subclass: #Sector
	instanceVariableNames: 'cars length withTurbo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #GrandPrix stamp: 'NB 5/1/2023 19:07:11'!
Object subclass: #GrandPrix
	instanceVariableNames: 'track numberOfLaps'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneCar stamp: 'NB 5/1/2023 19:07:11'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed turbo traveledDistance currentSector turboActivations'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneTest stamp: 'NB 5/1/2023 19:07:11'!
TestCase subclass: #FormulaOneTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

----End fileIn of /Users/nico/Documents/inge1/Parciales/2022-1c/1erParcial/ISW1-2022-1C-Parcial-1-Resolucion.st----!

----SNAPSHOT----(1 May 2023 19:50:24) CuisUniversity-5706.image priorSource: 9903939!

----STARTUP---- (4 May 2023 17:23:48) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


TestCase subclass: #CienPuertasTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CienPuertasTDD'!

!classDefinition: #CienPuertasTest category: 'CienPuertasTDD' stamp: 'NB 5/4/2023 17:24:38'!
TestCase subclass: #CienPuertasTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CienPuertasTDD'!

!classDefinition: #Cienpuertas category: 'CienPuertasTDD' stamp: 'NB 5/4/2023 17:28:12'!
Object subclass: #Cienpuertas
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CienPuertasTDD'!
!CienPuertasTest methodsFor: 'no messages' stamp: 'NB 5/4/2023 17:28:06'!
test01
	
	| cienPuertas cienEstadosCerrados|
	cienPuertas := Cienpuertas new.
	cienEstadosCerrados := OrderedCollection new.
	100 timesRepeat: [:index | cienEstadosCerrados add: 'C'].
	self assert: cienPuertas estadoPuertas equals: cienEstadosCerrados.! !
!Cienpuertas methodsFor: 'no messages' stamp: 'NB 5/4/2023 17:29:01'!
estadosPuertas

	|puertas|
	puertas:= OrderedCollection new.
! !

!testRun: #CienPuertasTest #test01 stamp: 'NB 5/4/2023 17:29:05'!
ERROR!

!testRun: #CienPuertasTest #test01 stamp: 'NB 5/4/2023 17:29:05'!
ERROR!
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 17:29:31' prior: 50642404!
test01
	
	| cienPuertas cienEstadosCerrados|
	cienPuertas := Cienpuertas new.
	cienEstadosCerrados := OrderedCollection new.
	100 timesRepeat: [:index | cienEstadosCerrados add: 'C'].
	self assert: cienPuertas estadosPuertas equals: cienEstadosCerrados.! !

!testRun: #CienPuertasTest #test01 stamp: 'NB 5/4/2023 17:29:32'!
ERROR!
!Cienpuertas methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 17:30:00' prior: 50642415!
estadosPuertas

	|puertas|
	puertas:= OrderedCollection new.
	100 timesRepeat: [:index | puertas add: 'C'].
	^puertas.
! !

!testRun: #CienPuertasTest #test01 stamp: 'NB 5/4/2023 17:30:05'!
ERROR!
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 17:30:29' prior: 50642425!
test01
	
	| cienPuertas cienEstadosCerrados|
	cienPuertas := Cienpuertas new.
	cienEstadosCerrados := OrderedCollection new.
	100 timesRepeat: [:index | cienEstadosCerrados add: 'C'].
	self assert: (cienPuertas estadosPuertas) equals: cienEstadosCerrados.! !

!testRun: #CienPuertasTest #test01 stamp: 'NB 5/4/2023 17:30:30'!
ERROR!
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 17:30:54' prior: 50642449!
test01
	
	| cienPuertas cienEstadosCerrados|
	cienPuertas := Cienpuertas new.
	cienEstadosCerrados := OrderedCollection new.
	100 timesRepeat: [cienEstadosCerrados add: 'C'].
	self assert: (cienPuertas estadosPuertas) equals: cienEstadosCerrados.! !
!Cienpuertas methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 17:31:04' prior: 50642439!
estadosPuertas

	|puertas|
	puertas:= OrderedCollection new.
	100 timesRepeat: [puertas add: 'C'].
	^puertas.
! !

!testRun: #CienPuertasTest #test01 stamp: 'NB 5/4/2023 17:31:05'!
PASSED!

!classDefinition: #DoorsToggler category: 'CienPuertasTDD' stamp: 'NB 5/4/2023 17:50:57'!
Object subclass: #DoorsToggler
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CienPuertasTDD'!
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 17:50:51'!
test01AllDoorsAreInitiallyClosed
	
	| toggler|
	
	toggler:= DoorsToggler new.
	self deny: (toggler isDoorOpen: 1). ! !

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 17:51:07'!
ERROR!
!DoorsToggler methodsFor: 'checking' stamp: 'NB 5/4/2023 17:51:18'!
isDoorOpen: aRenameMe1 
	self shouldBeImplemented.! !
!DoorsToggler methodsFor: 'checking' stamp: 'NB 5/4/2023 17:51:28' prior: 50642499!
isDoorOpen: aRenameMe1 
	
	^false.! !

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 17:51:29'!
PASSED!

!testRun: #CienPuertasTest #test01 stamp: 'NB 5/4/2023 17:51:29'!
PASSED!

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 17:51:29'!
PASSED!

!methodRemoval: CienPuertasTest #test01 stamp: 'NB 5/4/2023 17:51:37'!
test01
	
	| cienPuertas cienEstadosCerrados|
	cienPuertas := Cienpuertas new.
	cienEstadosCerrados := OrderedCollection new.
	100 timesRepeat: [cienEstadosCerrados add: 'C'].
	self assert: (cienPuertas estadosPuertas) equals: cienEstadosCerrados.!
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 17:53:03'!
test02TogglingADoorFromClosedShouldOpenIt
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleDoors.
	self assert: (toggler isDoorOpen: 1). ! !

!testRun: #CienPuertasTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 17:53:06'!
ERROR!
!DoorsToggler methodsFor: 'toggling' stamp: 'NB 5/4/2023 17:53:13'!
toggleDoors
	self shouldBeImplemented.! !

!classDefinition: #DoorsToggler category: 'CienPuertasTDD' stamp: 'NB 5/4/2023 17:53:57'!
Object subclass: #DoorsToggler
	instanceVariableNames: 'opened'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CienPuertasTDD'!
!DoorsToggler methodsFor: 'toggling' stamp: 'NB 5/4/2023 17:53:55' prior: 50642538!
toggleDoors
	
	opened:= true.! !

!testRun: #CienPuertasTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 17:53:58'!
FAILURE!

!classRemoval: #Cienpuertas stamp: 'NB 5/4/2023 17:54:12'!
Object subclass: #Cienpuertas
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CienPuertasTDD'!
!DoorsToggler methodsFor: 'checking' stamp: 'NB 5/4/2023 17:54:33' prior: 50642504!
isDoorOpen: aDoorNumber 
	
	^opened.! !
!DoorsToggler methodsFor: 'checking' stamp: 'NB 5/4/2023 17:54:49' overrides: 16920235!
initialize
	
	opened:= false.! !

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 17:55:15'!
PASSED!

!testRun: #CienPuertasTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 17:55:15'!
PASSED!

----SNAPSHOT----(4 May 2023 17:55:20) CuisUniversity-5706.image priorSource: 9943327!
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 18:05:57'!
test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleDoors.
	toggler toggleDoors.
	self deny: (toggler isDoorOpen: 1). ! !

!testRun: #CienPuertasTest #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'NB 5/4/2023 18:05:58'!
FAILURE!
!DoorsToggler methodsFor: 'toggling' stamp: 'NB 5/4/2023 18:06:09' prior: 50642550!
toggleDoors
	
	opened not.! !

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 18:06:13'!
PASSED!

!testRun: #CienPuertasTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 18:06:13'!
FAILURE!

!testRun: #CienPuertasTest #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'NB 5/4/2023 18:06:13'!
PASSED!

!testRun: #CienPuertasTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 18:06:13'!
FAILURE!
!DoorsToggler methodsFor: 'toggling' stamp: 'NB 5/4/2023 18:06:31' prior: 50642594!
toggleDoors
	
	opened:= opened not.! !

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 18:06:33'!
PASSED!

!testRun: #CienPuertasTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 18:06:33'!
PASSED!

!testRun: #CienPuertasTest #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'NB 5/4/2023 18:06:33'!
PASSED!

----SNAPSHOT----(4 May 2023 18:06:37) CuisUniversity-5706.image priorSource: 9949683!
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 18:09:38'!
test03TogglingSeveralDoorsFromClosedShouldOpenThem
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleDoors.
	self assert: (toggler isDoorOpen: 1). 
	self assert: (toggler isDoorOpen: 2). ! !
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 18:09:43'!
test04TogglingSeveralDoorsFromClosedShouldOpenThem
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleDoors.
	self assert: (toggler isDoorOpen: 1). 
	self assert: (toggler isDoorOpen: 2). ! !

!methodRemoval: CienPuertasTest #test03TogglingSeveralDoorsFromClosedShouldOpenThem stamp: 'NB 5/4/2023 18:09:47'!
test03TogglingSeveralDoorsFromClosedShouldOpenThem
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleDoors.
	self assert: (toggler isDoorOpen: 1). 
	self assert: (toggler isDoorOpen: 2). !

----SNAPSHOT----(4 May 2023 18:09:59) CuisUniversity-5706.image priorSource: 9951224!

!testRun: #CienPuertasTest #test04TogglingSeveralDoorsFromClosedShouldOpenThem stamp: 'NB 5/4/2023 18:10:20'!
PASSED!

!classDefinition: #DoorsToggler category: 'CienPuertasTDD' stamp: 'NB 5/4/2023 18:16:36'!
Object subclass: #DoorsToggler
	instanceVariableNames: 'opened doors'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CienPuertasTDD'!
!DoorsToggler methodsFor: 'initialization' stamp: 'NB 5/4/2023 18:16:34' prior: 50642568 overrides: 16920235!
initialize
	
	opened:= false.
	doors:= OrderedCollection new.! !
!DoorsToggler methodsFor: 'checking' stamp: 'NB 5/4/2023 18:17:05' prior: 50642564!
isDoorOpen: aDoorNumber 
	
	^doors at: aDoorNumber.! !
!DoorsToggler methodsFor: 'toggling' stamp: 'NB 5/4/2023 18:20:36' prior: 50642612!
toggleDoors
	
	doors do: [:aDoor | aDoor not].! !

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 18:20:47'!
ERROR!

!testRun: #CienPuertasTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 18:20:47'!
ERROR!

!testRun: #CienPuertasTest #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'NB 5/4/2023 18:20:47'!
ERROR!

!testRun: #CienPuertasTest #test04TogglingSeveralDoorsFromClosedShouldOpenThem stamp: 'NB 5/4/2023 18:20:47'!
ERROR!

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 18:20:51'!
ERROR!
!DoorsToggler methodsFor: 'initialization' stamp: 'NB 5/4/2023 18:22:24' prior: 50642673 overrides: 16920235!
initialize
	
	opened:= false.
	doors:= OrderedCollection new.
	doors at: 1 put: false.
	doors at: 2 put: false.! !

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 18:22:27'!
ERROR!

!testRun: #CienPuertasTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 18:22:27'!
ERROR!

!testRun: #CienPuertasTest #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'NB 5/4/2023 18:22:27'!
ERROR!

!testRun: #CienPuertasTest #test04TogglingSeveralDoorsFromClosedShouldOpenThem stamp: 'NB 5/4/2023 18:22:27'!
ERROR!

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 18:22:29'!
ERROR!

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 18:22:36'!
ERROR!

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 18:22:36'!
ERROR!
!DoorsToggler methodsFor: 'initialization' stamp: 'NB 5/4/2023 18:23:03' prior: 50642706 overrides: 16920235!
initialize
	
	opened:= false.
	doors:= OrderedCollection new.
	doors add: false.
	doors add: false.! !

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 18:23:05'!
PASSED!

!testRun: #CienPuertasTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 18:23:05'!
FAILURE!

!testRun: #CienPuertasTest #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'NB 5/4/2023 18:23:05'!
PASSED!

!testRun: #CienPuertasTest #test04TogglingSeveralDoorsFromClosedShouldOpenThem stamp: 'NB 5/4/2023 18:23:05'!
FAILURE!
!DoorsToggler methodsFor: 'toggling' stamp: 'NB 5/4/2023 18:31:09'!
toggleDoors: aDoorNumber
	
	doors do: [:aDoor | aDoor not].! !
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 18:31:09' prior: 50642581!
test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleDoors: 1.
	toggler toggleDoors: 1.
	self deny: (toggler isDoorOpen: 1). ! !
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 18:31:09' prior: 50642639!
test04TogglingSeveralDoorsFromClosedShouldOpenThem
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleDoors: 1.
	self assert: (toggler isDoorOpen: 1). 
	self assert: (toggler isDoorOpen: 2). ! !
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 18:31:09' prior: 50642527!
test02TogglingADoorFromClosedShouldOpenIt
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleDoors: 1.
	self assert: (toggler isDoorOpen: 1). ! !

!methodRemoval: DoorsToggler #toggleDoors stamp: 'NB 5/4/2023 18:31:09'!
toggleDoors
	
	doors do: [:aDoor | aDoor not].!
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 18:31:40' prior: 50642773!
test04TogglingSeveralDoorsFromClosedShouldOpenThem
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleDoors: 1.
	toggler toggleDoors: 2.
	self assert: (toggler isDoorOpen: 1). 
	self assert: (toggler isDoorOpen: 2). ! !

!testRun: #CienPuertasTest #test04TogglingSeveralDoorsFromClosedShouldOpenThem stamp: 'NB 5/4/2023 18:31:41'!
FAILURE!
!DoorsToggler methodsFor: 'toggling' stamp: 'NB 5/4/2023 18:33:03' prior: 50642757!
toggleDoors: aDoorNumber
	
	doors at: aDoorNumber put: (doors at: aDoorNumber not).! !

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 18:33:12'!
PASSED!

!testRun: #CienPuertasTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 18:33:12'!
ERROR!

!testRun: #CienPuertasTest #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'NB 5/4/2023 18:33:12'!
ERROR!

!testRun: #CienPuertasTest #test04TogglingSeveralDoorsFromClosedShouldOpenThem stamp: 'NB 5/4/2023 18:33:12'!
ERROR!

!testRun: #CienPuertasTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 18:33:14'!
ERROR!
!DoorsToggler methodsFor: 'toggling' stamp: 'NB 5/4/2023 18:33:39' prior: 50642809!
toggleDoors: aDoorNumber
	
	doors at: aDoorNumber put: (doors at: aDoorNumber) not.! !

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 18:33:41'!
PASSED!

!testRun: #CienPuertasTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 18:33:41'!
PASSED!

!testRun: #CienPuertasTest #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'NB 5/4/2023 18:33:41'!
PASSED!

!testRun: #CienPuertasTest #test04TogglingSeveralDoorsFromClosedShouldOpenThem stamp: 'NB 5/4/2023 18:33:41'!
PASSED!

----SNAPSHOT----(4 May 2023 18:33:44) CuisUniversity-5706.image priorSource: 9952227!
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 18:34:38'!
test05TogglingSeveralDoorsFromClosedAndTogglingAgianShouldCloseThem
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleDoors: 1.
	toggler toggleDoors: 2.
	toggler toggleDoors: 1.
	toggler toggleDoors: 2.
	self deny: (toggler isDoorOpen: 1). 
	self deny: (toggler isDoorOpen: 2). ! !

!testRun: #CienPuertasTest #test05TogglingSeveralDoorsFromClosedAndTogglingAgianShouldCloseThem stamp: 'NB 5/4/2023 18:34:40'!
PASSED!

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 18:34:40'!
PASSED!

!testRun: #CienPuertasTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 18:34:40'!
PASSED!

!testRun: #CienPuertasTest #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'NB 5/4/2023 18:34:40'!
PASSED!

!testRun: #CienPuertasTest #test04TogglingSeveralDoorsFromClosedShouldOpenThem stamp: 'NB 5/4/2023 18:34:40'!
PASSED!

!testRun: #CienPuertasTest #test05TogglingSeveralDoorsFromClosedAndTogglingAgianShouldCloseThem stamp: 'NB 5/4/2023 18:34:40'!
PASSED!

----SNAPSHOT----(4 May 2023 18:34:43) CuisUniversity-5706.image priorSource: 9958431!

----SNAPSHOT----(4 May 2023 18:34:47) CuisUniversity-5706.image priorSource: 9959644!
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 18:39:05'!
test06firstIterationOfGameTogglesEveryTwoDoors
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleEveryTwoDoors.
	self assert: (toggler isDoorOpen: 2). 
	self assert: (toggler isDoorOpen: 4). ! !

!testRun: #CienPuertasTest #test06firstIterationOfGameTogglesEveryTwoDoors stamp: 'NB 5/4/2023 18:39:16'!
ERROR!
!DoorsToggler methodsFor: 'toggling' stamp: 'NB 5/4/2023 18:39:23'!
toggleEveryTwoDoors
	self shouldBeImplemented.! !
!DoorsToggler methodsFor: 'toggling' stamp: 'NB 5/4/2023 18:42:09' prior: 50642908!
toggleEveryTwoDoors
	
	|index| 
	index:=2.
	[index <= doors size] whileTrue: [
		self toggleDoors: index.
		index:= index + 2.
		]! !

!testRun: #CienPuertasTest #test06firstIterationOfGameTogglesEveryTwoDoors stamp: 'NB 5/4/2023 18:42:11'!
ERROR!
!DoorsToggler methodsFor: 'initialization' stamp: 'NB 5/4/2023 18:42:31' prior: 50642737 overrides: 16920235!
initialize
	
	opened:= false.
	doors:= OrderedCollection new.
	doors add: false.
	doors add: false.
	doors add: false.
	doors add: false.! !

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 18:42:32'!
PASSED!

!testRun: #CienPuertasTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 18:42:32'!
PASSED!

!testRun: #CienPuertasTest #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'NB 5/4/2023 18:42:32'!
PASSED!

!testRun: #CienPuertasTest #test04TogglingSeveralDoorsFromClosedShouldOpenThem stamp: 'NB 5/4/2023 18:42:32'!
PASSED!

!testRun: #CienPuertasTest #test05TogglingSeveralDoorsFromClosedAndTogglingAgianShouldCloseThem stamp: 'NB 5/4/2023 18:42:32'!
PASSED!

!testRun: #CienPuertasTest #test06firstIterationOfGameTogglesEveryTwoDoors stamp: 'NB 5/4/2023 18:42:32'!
PASSED!
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 18:43:14'!
test06CorrectlyTogglesEveryTwoDoors
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleEveryTwoDoors.
	self assert: (toggler isDoorOpen: 2). 
	self assert: (toggler isDoorOpen: 4). ! !

!methodRemoval: CienPuertasTest #test06firstIterationOfGameTogglesEveryTwoDoors stamp: 'NB 5/4/2023 18:43:14'!
test06firstIterationOfGameTogglesEveryTwoDoors
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleEveryTwoDoors.
	self assert: (toggler isDoorOpen: 2). 
	self assert: (toggler isDoorOpen: 4). !
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 18:44:05'!
test07CorrectlyTogglesEveryThreeDoors
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleEveryThreeDoors.
	self assert: (toggler isDoorOpen: 3). ! !

!testRun: #CienPuertasTest #test07CorrectlyTogglesEveryThreeDoors stamp: 'NB 5/4/2023 18:44:08'!
ERROR!
!DoorsToggler methodsFor: 'toggling' stamp: 'NB 5/4/2023 18:44:13'!
toggleEveryThreeDoors
	self shouldBeImplemented.! !

!testRun: #CienPuertasTest #test07CorrectlyTogglesEveryThreeDoors stamp: 'NB 5/4/2023 18:44:17'!
ERROR!
!DoorsToggler methodsFor: 'toggling' stamp: 'NB 5/4/2023 18:44:35' prior: 50642985!
toggleEveryThreeDoors
	
	|index| 
	index:=2.
	[index <= doors size] whileTrue: [
		self toggleDoors: index.
		index:= index + 2.
		]! !
!DoorsToggler methodsFor: 'toggling' stamp: 'NB 5/4/2023 18:44:43' prior: 50642993!
toggleEveryThreeDoors
	
	|index| 
	index:=3.
	[index <= doors size] whileTrue: [
		self toggleDoors: index.
		index:= index + 3.
		]! !

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 18:44:48'!
PASSED!

!testRun: #CienPuertasTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 18:44:48'!
PASSED!

!testRun: #CienPuertasTest #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'NB 5/4/2023 18:44:48'!
PASSED!

!testRun: #CienPuertasTest #test04TogglingSeveralDoorsFromClosedShouldOpenThem stamp: 'NB 5/4/2023 18:44:48'!
PASSED!

!testRun: #CienPuertasTest #test05TogglingSeveralDoorsFromClosedAndTogglingAgianShouldCloseThem stamp: 'NB 5/4/2023 18:44:48'!
PASSED!

!testRun: #CienPuertasTest #test06CorrectlyTogglesEveryTwoDoors stamp: 'NB 5/4/2023 18:44:48'!
PASSED!

!testRun: #CienPuertasTest #test07CorrectlyTogglesEveryThreeDoors stamp: 'NB 5/4/2023 18:44:48'!
PASSED!
!DoorsToggler methodsFor: 'toggling' stamp: 'NB 5/4/2023 18:45:27'!
toggleEvery: aNumber
	
	|index| 
	index:= aNumber.
	[index <= doors size] whileTrue: [
		self toggleDoors: index.
		index:= index + aNumber.
		]! !

!methodRemoval: DoorsToggler #toggleEveryThreeDoors stamp: 'NB 5/4/2023 18:45:36'!
toggleEveryThreeDoors
	
	|index| 
	index:=3.
	[index <= doors size] whileTrue: [
		self toggleDoors: index.
		index:= index + 3.
		]!

!methodRemoval: DoorsToggler #toggleEveryTwoDoors stamp: 'NB 5/4/2023 18:45:41'!
toggleEveryTwoDoors
	
	|index| 
	index:=2.
	[index <= doors size] whileTrue: [
		self toggleDoors: index.
		index:= index + 2.
		]!
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 18:45:49' prior: 50642955!
test06CorrectlyTogglesEveryTwoDoors
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleEvery: 2.
	self assert: (toggler isDoorOpen: 2). 
	self assert: (toggler isDoorOpen: 4). ! !
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 18:45:58' prior: 50642974!
test07CorrectlyTogglesEveryThreeDoors
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleEvery: 3.
	self assert: (toggler isDoorOpen: 3). ! !

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 18:46:00'!
PASSED!

!testRun: #CienPuertasTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 18:46:00'!
PASSED!

!testRun: #CienPuertasTest #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'NB 5/4/2023 18:46:00'!
PASSED!

!testRun: #CienPuertasTest #test04TogglingSeveralDoorsFromClosedShouldOpenThem stamp: 'NB 5/4/2023 18:46:00'!
PASSED!

!testRun: #CienPuertasTest #test05TogglingSeveralDoorsFromClosedAndTogglingAgianShouldCloseThem stamp: 'NB 5/4/2023 18:46:00'!
PASSED!

!testRun: #CienPuertasTest #test06CorrectlyTogglesEveryTwoDoors stamp: 'NB 5/4/2023 18:46:00'!
PASSED!

!testRun: #CienPuertasTest #test07CorrectlyTogglesEveryThreeDoors stamp: 'NB 5/4/2023 18:46:00'!
PASSED!

----SNAPSHOT----(4 May 2023 18:46:05) CuisUniversity-5706.image priorSource: 9959731!
!DoorsToggler methodsFor: 'toggling' stamp: 'NB 5/4/2023 18:46:49'!
toggleDoor: aDoorNumber
	
	doors at: aDoorNumber put: (doors at: aDoorNumber) not.! !
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 18:46:49' prior: 50642855!
test05TogglingSeveralDoorsFromClosedAndTogglingAgianShouldCloseThem
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleDoor: 1.
	toggler toggleDoor: 2.
	toggler toggleDoor: 1.
	toggler toggleDoor: 2.
	self deny: (toggler isDoorOpen: 1). 
	self deny: (toggler isDoorOpen: 2). ! !
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 18:46:49' prior: 50642783!
test02TogglingADoorFromClosedShouldOpenIt
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleDoor: 1.
	self assert: (toggler isDoorOpen: 1). ! !
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 18:46:49' prior: 50642763!
test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleDoor: 1.
	toggler toggleDoor: 1.
	self deny: (toggler isDoorOpen: 1). ! !
!CienPuertasTest methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 18:46:49' prior: 50642795!
test04TogglingSeveralDoorsFromClosedShouldOpenThem
	
	| toggler|
	
	toggler:= DoorsToggler new.
	toggler toggleDoor: 1.
	toggler toggleDoor: 2.
	self assert: (toggler isDoorOpen: 1). 
	self assert: (toggler isDoorOpen: 2). ! !
!DoorsToggler methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 18:46:49' prior: 50643032!
toggleEvery: aNumber
	
	|index| 
	index:= aNumber.
	[index <= doors size] whileTrue: [
		self toggleDoor: index.
		index:= index + aNumber.
		]! !

!methodRemoval: DoorsToggler #toggleDoors: stamp: 'NB 5/4/2023 18:46:49'!
toggleDoors: aDoorNumber
	
	doors at: aDoorNumber put: (doors at: aDoorNumber) not.!

!testRun: #CienPuertasTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 18:46:53'!
PASSED!

!testRun: #CienPuertasTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 18:46:53'!
PASSED!

!testRun: #CienPuertasTest #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'NB 5/4/2023 18:46:53'!
PASSED!

!testRun: #CienPuertasTest #test04TogglingSeveralDoorsFromClosedShouldOpenThem stamp: 'NB 5/4/2023 18:46:53'!
PASSED!

!testRun: #CienPuertasTest #test05TogglingSeveralDoorsFromClosedAndTogglingAgianShouldCloseThem stamp: 'NB 5/4/2023 18:46:53'!
PASSED!

!testRun: #CienPuertasTest #test06CorrectlyTogglesEveryTwoDoors stamp: 'NB 5/4/2023 18:46:53'!
PASSED!

!testRun: #CienPuertasTest #test07CorrectlyTogglesEveryThreeDoors stamp: 'NB 5/4/2023 18:46:53'!
PASSED!

----SNAPSHOT----(4 May 2023 18:47:58) CuisUniversity-5706.image priorSource: 9966233!

----SNAPSHOT----(4 May 2023 18:48:04) CuisUniversity-5706.image priorSource: 9969045!

!classRenamed: #CienPuertasTest as: #DoorsTogglerTest stamp: 'NB 5/4/2023 18:49:17'!
Smalltalk renameClassNamed: #CienPuertasTest as: #DoorsTogglerTest!

!testRun: #DoorsTogglerTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 18:49:21'!
PASSED!

!testRun: #DoorsTogglerTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 18:49:21'!
PASSED!

!testRun: #DoorsTogglerTest #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'NB 5/4/2023 18:49:21'!
PASSED!

!testRun: #DoorsTogglerTest #test04TogglingSeveralDoorsFromClosedShouldOpenThem stamp: 'NB 5/4/2023 18:49:21'!
PASSED!

!testRun: #DoorsTogglerTest #test05TogglingSeveralDoorsFromClosedAndTogglingAgianShouldCloseThem stamp: 'NB 5/4/2023 18:49:21'!
PASSED!

!testRun: #DoorsTogglerTest #test06CorrectlyTogglesEveryTwoDoors stamp: 'NB 5/4/2023 18:49:21'!
PASSED!

!testRun: #DoorsTogglerTest #test07CorrectlyTogglesEveryThreeDoors stamp: 'NB 5/4/2023 18:49:21'!
PASSED!
!DoorsToggler methodsFor: 'initialization' stamp: 'NB 5/4/2023 18:50:48' prior: 50642925 overrides: 16920235!
initialize
	
	doors:= OrderedCollection new.
	doors add: false.
	doors add: false.
	doors add: false.
	doors add: false.! !

!classDefinition: #DoorsToggler category: 'CienPuertasTDD' stamp: 'NB 5/4/2023 18:51:39'!
Object subclass: #DoorsToggler
	instanceVariableNames: 'doors'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CienPuertasTDD'!

----SNAPSHOT----(4 May 2023 18:51:47) CuisUniversity-5706.image priorSource: 9969132!

!testRun: #DoorsTogglerTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 18:51:49'!
PASSED!

!testRun: #DoorsTogglerTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 18:51:49'!
PASSED!

!testRun: #DoorsTogglerTest #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'NB 5/4/2023 18:51:49'!
PASSED!

!testRun: #DoorsTogglerTest #test04TogglingSeveralDoorsFromClosedShouldOpenThem stamp: 'NB 5/4/2023 18:51:49'!
PASSED!

!testRun: #DoorsTogglerTest #test05TogglingSeveralDoorsFromClosedAndTogglingAgianShouldCloseThem stamp: 'NB 5/4/2023 18:51:49'!
PASSED!

!testRun: #DoorsTogglerTest #test06CorrectlyTogglesEveryTwoDoors stamp: 'NB 5/4/2023 18:51:49'!
PASSED!

!testRun: #DoorsTogglerTest #test07CorrectlyTogglesEveryThreeDoors stamp: 'NB 5/4/2023 18:51:49'!
PASSED!
!DoorsToggler methodsFor: 'toggling' stamp: 'NB 5/4/2023 19:17:29' prior: 50643146!
toggleEvery: aNumber
	
	aNumber to: doors size by: aNumber do: [
		:aDoorNumber | self toggleDoor: aDoorNumber
		]
	! !

!testRun: #DoorsTogglerTest #test01AllDoorsAreInitiallyClosed stamp: 'NB 5/4/2023 19:17:31'!
PASSED!

!testRun: #DoorsTogglerTest #test02TogglingADoorFromClosedShouldOpenIt stamp: 'NB 5/4/2023 19:17:31'!
PASSED!

!testRun: #DoorsTogglerTest #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'NB 5/4/2023 19:17:31'!
PASSED!

!testRun: #DoorsTogglerTest #test04TogglingSeveralDoorsFromClosedShouldOpenThem stamp: 'NB 5/4/2023 19:17:31'!
PASSED!

!testRun: #DoorsTogglerTest #test05TogglingSeveralDoorsFromClosedAndTogglingAgianShouldCloseThem stamp: 'NB 5/4/2023 19:17:31'!
PASSED!

!testRun: #DoorsTogglerTest #test06CorrectlyTogglesEveryTwoDoors stamp: 'NB 5/4/2023 19:17:31'!
PASSED!

!testRun: #DoorsTogglerTest #test07CorrectlyTogglesEveryThreeDoors stamp: 'NB 5/4/2023 19:17:31'!
PASSED!

----SNAPSHOT----(4 May 2023 19:18:20) CuisUniversity-5706.image priorSource: 9970656!

----SNAPSHOT----(4 May 2023 19:18:23) CuisUniversity-5706.image priorSource: 9972577!

----SNAPSHOT----(4 May 2023 19:29:48) CuisUniversity-5706.image priorSource: 9972664!

----End fileIn of /Users/nico/Documents/inge1/Parciales/2022-1c/Recu1erParcial/CustomerImporter-Recu-1er-Parcial.st----!

Object subclass: #ZipCode
	instanceVariableNames: 'i'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #ZipCode category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'NB 5/4/2023 20:12:09'!
Object subclass: #ZipCode
	instanceVariableNames: 'i'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

ZipCode subclass: #NewZipCode
	instanceVariableNames: 'i'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

ZipCode subclass: #NewZipCode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #NewZipCode category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'NB 5/4/2023 20:12:28'!
ZipCode subclass: #NewZipCode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

Object subclass: #ZipCode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #ZipCode category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'NB 5/4/2023 20:12:33'!
Object subclass: #ZipCode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

ZipCode subclass: #OldZipCode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #OldZipCode category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'NB 5/4/2023 20:12:44'!
ZipCode subclass: #OldZipCode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!
!ZipCode methodsFor: 'no messages' stamp: 'NB 5/4/2023 20:15:21'!
hasNewZipCode
	
	self subclassResponsibility .! !
!NewZipCode methodsFor: 'no messages' stamp: 'NB 5/4/2023 20:15:44' overrides: 50644686!
hasNewZipCode
	
	^true.! !
!OldZipCode methodsFor: 'no messages' stamp: 'NB 5/4/2023 20:15:55' overrides: 50644686!
hasNewZipCode
	
	^false.! !

!classDefinition: #NewZipCode category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'NB 5/4/2023 20:16:29'!
ZipCode subclass: #NewZipCode
	instanceVariableNames: 'zipcode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!
!NewZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:16:27'!
newZipCodeIfNone: aNoneBlock

		^zipcode.! !
!NewZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:16:34' prior: 50644707!
newZipCodeIfNone: aNoneBlock

	^zipcode.! !
!OldZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:16:53'!
newZipCodeIfNone: aNoneBlock

	^aNoneBlock value.! !

!classDefinition: #NewZipCode category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'NB 5/4/2023 20:17:06'!
ZipCode subclass: #NewZipCode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #ZipCode category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'NB 5/4/2023 20:17:06'!
Object subclass: #ZipCode
	instanceVariableNames: 'zipcode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!
!ZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:17:25'!
newZipCodeIfNone: aNoneBlock
	
	self subclassResponsibility .! !
!ZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:17:55'!
oldZipCodeIfNone: aNoneBlock
	
	self subclassResponsibility .! !
!NewZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:18:12' overrides: 50644742!
oldZipCodeIfNone: aNoneBlock
	
	^aNoneBlock.! !
!OldZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:18:23' overrides: 50644742!
oldZipCodeIfNone: aNoneBlock

	^zipcode.! !
!OldZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:18:34' prior: 50644716 overrides: 50644737!
newZipCodeIfNone: aNoneBlock

	^aNoneBlock.! !
!Address methodsFor: 'zip code' stamp: 'NB 5/4/2023 20:20:33' prior: 50643932!
hasNewZipCode
	
	^zipCode hasNewZipCode.! !
!Address methodsFor: 'zip code' stamp: 'NB 5/4/2023 20:20:41' prior: 50643936!
hasOldZipCode
	
	^zipCode hasOldZipCode.! !
!Address methodsFor: 'zip code' stamp: 'NB 5/4/2023 20:22:14' prior: 50643940!
newZipCodeIfNone: aNoneBlock

	^zipCode newZipCodeIfNone: aNoneBlock.
	! !
!Address methodsFor: 'zip code' stamp: 'NB 5/4/2023 20:22:31' prior: 50643946!
oldZipCodeIfNone: aNoneBlock

	^zipCode oldZipCodeIfNone: aNoneBlock.! !
!ZipCode class methodsFor: 'no messages' stamp: 'NB 5/4/2023 20:23:24'!
with: aCode

	self basicNew initializeWith: aCode.! !
!CustomerImporter methodsFor: 'address' stamp: 'NB 5/4/2023 20:24:35' prior: 50644153!
importAddress

	| newAddress zipCode importedZipCode newZipcodeOldZipCode |

	self assertCustomerWasImported.
	self assertValidAddressRecord.

	newAddress := Address new.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	
	zipCode := record fifth.

	zipCode first isDigit 
		ifTrue: [ 
			(zipCode allSatisfy: [ :aChar | aChar isDigit ]) ifFalse: [ self error: 'Invalid old zipcode' ].
			importedZipCode := OldZipCode with: zipCode.
			(importedZipCode between: 1000 and: 9999) ifFalse: [ self error: 'Invalid old zipcode' ]]
		ifFalse: [
	zipCode first isLetter 
		ifTrue: [
			zipCode size ~= 8 ifTrue: [ self error: 'Invalid new zipcode' ].
			newZipcodeOldZipCode := zipCode copyFrom: 2 to: 5.
			(newZipcodeOldZipCode allSatisfy: [ :aChar | aChar isDigit ]) ifFalse: [ self error: 'Invalid new zipcode' ].
			newZipcodeOldZipCode asNumber > 999 ifFalse: [ self error: 'Invalid new zipcode' ].
			((zipCode last: 3) allSatisfy: [ :aChar | aChar isLetter ]) ifFalse: [ self error: 'Invalid new zipcode' ].
			importedZipCode := NewZipCode with: zipCode]
		ifFalse: [ self error: 'Invalid identification type' ]].
			
	newAddress zipCode: importedZipCode.
	newAddress province: record sixth.
	
	newCustomer addAddress: newAddress.
	! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:24:56'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:24:56'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/4/2023 20:24:56'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/4/2023 20:24:56'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:24:59'!
ERROR!

!classDefinition: #ZipCode category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'NB 5/4/2023 20:25:20'!
Object subclass: #ZipCode
	instanceVariableNames: 'zipcode code'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!
!ZipCode methodsFor: 'initialization' stamp: 'NB 5/4/2023 20:25:20'!
initializeWith: aCode 
	self shouldBeImplemented.
	code := aCode.! !
!ZipCode methodsFor: 'initialization' stamp: 'NB 5/4/2023 20:25:37' prior: 50644932!
initializeWith: aCode 
	
	zipcode := aCode.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:25:38'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:25:57'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:25:57'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/4/2023 20:25:57'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/4/2023 20:25:57'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:27:37'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:27:37'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/4/2023 20:27:37'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/4/2023 20:27:37'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:27:40'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:33:45'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:33:45'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/4/2023 20:33:45'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/4/2023 20:33:45'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:33:50'!
ERROR!
!ZipCode class methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:34:47' prior: 50644780!
with: aCode

	^self basicNew initializeWith: aCode.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:34:53'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:34:53'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/4/2023 20:34:53'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/4/2023 20:34:53'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:34:55'!
ERROR!
!OldZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:35:11'!
between: aRenameMe1 and: aRenameMe2 
	self shouldBeImplemented.! !
!OldZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:35:43' prior: 50645325!
between: minValue and: maxValue 
	^zipcode between: minValue and: maxValue. ! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:35:44'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:36:08'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:36:08'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/4/2023 20:36:08'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/4/2023 20:36:08'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:36:13'!
ERROR!
!OldZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:38:09' prior: 50645330!
between: minValue and: maxValue 
	^zipcode > minValue and: [zipcode < maxValue]. ! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:38:13'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:38:13'!
FAILURE!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/4/2023 20:38:13'!
FAILURE!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/4/2023 20:38:13'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:38:16'!
ERROR!
!OldZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:38:50' prior: 50645434!
between: minValue and: maxValue 
	^zipcode between: minValue and: maxValue.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:39:12'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:39:12'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/4/2023 20:39:12'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/4/2023 20:39:12'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/4/2023 20:39:12'!
PASSED!
!OldZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:41:47' prior: 50645535!
between: minValue and: maxValue 
	^zipcode asNumber between: minValue and: maxValue.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:41:51'!
FAILURE!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/4/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:41:51'!
FAILURE!
!Address methodsFor: 'zip code' stamp: 'NB 5/4/2023 20:42:57' prior: 50643952!
zipCode

	^zipCode.! !
!ZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:43:07'!
code
	
	self subclassResponsibility .! !
!OldZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:43:18' overrides: 50645738!
code
	
	self subclassResponsibility .! !
!NewZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:43:18' overrides: 50645738!
code
	
	self subclassResponsibility .! !

!methodRemoval: ZipCode #code stamp: 'NB 5/4/2023 20:43:18'!
code
	
	self subclassResponsibility .!
!ZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:43:45'!
code
	
	self subclassResponsibility .! !

!methodRemoval: NewZipCode #code stamp: 'NB 5/4/2023 20:43:45'!
code
	
	self subclassResponsibility .!

!methodRemoval: OldZipCode #code stamp: 'NB 5/4/2023 20:43:52'!
code
	
	self subclassResponsibility .!
!ZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:44:02' prior: 50645755!
code
	
	^zipcode .! !
!Address methodsFor: 'zip code' stamp: 'NB 5/4/2023 20:44:12' prior: 50645734!
zipCode

	^zipCode zipCode .! !
!Address methodsFor: 'zip code' stamp: 'NB 5/4/2023 20:44:15' prior: 50645770!
zipCode

	^zipCode code .! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:44:23'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/4/2023 20:44:23'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:44:23'!
ERROR!
!ZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:44:56'!
hasOldZipCode
	
	self subclassResponsibility .! !
!NewZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:45:08' overrides: 50645872!
hasOldZipCode
	
	^false.! !
!OldZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:45:15' overrides: 50645872!
hasOldZipCode
	
	^true.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:45:19'!
FAILURE!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/4/2023 20:45:19'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:45:19'!
FAILURE!
!NewZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:45:45' prior: 50644712 overrides: 50644737!
newZipCodeIfNone: aNoneBlock

	^zipcode value.! !
!NewZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:45:51' prior: 50645981 overrides: 50644737!
newZipCodeIfNone: aNoneBlock

	^zipcode.! !
!NewZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:45:55' prior: 50644748 overrides: 50644742!
oldZipCodeIfNone: aNoneBlock
	
	^aNoneBlock value.! !
!OldZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:46:02' prior: 50644758 overrides: 50644737!
newZipCodeIfNone: aNoneBlock

	^aNoneBlock value.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:46:11'!
FAILURE!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/4/2023 20:46:11'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/4/2023 20:46:12'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:46:12'!
FAILURE!
!OldZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:46:51' overrides: 50645766!
code

	^zipcode asNumber.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:46:57'!
FAILURE!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/4/2023 20:46:57'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/4/2023 20:46:57'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/4/2023 20:46:57'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/4/2023 20:46:57'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/4/2023 20:46:57'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/4/2023 20:46:57'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/4/2023 20:46:58'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:46:58'!
FAILURE!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:51:57'!
FAILURE!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/4/2023 20:51:57'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:51:57'!
FAILURE!
!OldZipCode methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 20:53:10' prior: 50644753 overrides: 50644742!
oldZipCodeIfNone: aNoneBlock

	^zipcode asNumber.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/4/2023 20:53:13'!
PASSED!

----SNAPSHOT----(4 May 2023 20:53:16) CuisUniversity-5706.image priorSource: 9972751!

Object subclass: #Identification
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #Identification category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'NB 5/4/2023 21:02:30'!
Object subclass: #Identification
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

Identification subclass: #CUIT
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #CUIT category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'NB 5/4/2023 21:02:54'!
Identification subclass: #CUIT
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

Identification subclass: #DNI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #DNI category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'NB 5/4/2023 21:02:59'!
Identification subclass: #DNI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #CUIT category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'NB 5/4/2023 21:04:02'!
Identification subclass: #CUIT
	instanceVariableNames: 'cuitNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!
!CUIT methodsFor: 'no messages' stamp: 'NB 5/4/2023 21:04:00'!
cuitNumberIfNone: aNoneClosure

	^cuitNumber.! !
!DNI methodsFor: 'no messages' stamp: 'NB 5/4/2023 21:04:36'!
cuitNumberIfNone: aNoneClosure

	^aNoneClosure value.! !

!classDefinition: #Customer category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'NB 5/4/2023 21:09:04'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identification addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!
!Customer methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 21:09:04' prior: 50644030!
identificationNumber

	^identification ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 21:09:04' prior: 50644015!
dniNumberIfNone: aNoneBlock

	^self hasDNIAsIdentification 
		ifTrue: [ Integer readFrom: identification readStream ]
		ifFalse: aNoneBlock ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 21:09:04' prior: 50644008!
cuitNumberIfNone: aNoneClosure

	^self hasCUITAsIdentification 
		ifTrue: [ identification ]
		ifFalse: aNoneClosure! !
!Customer methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 21:09:04' prior: 50644034!
identificationNumber: anIdentificationNumber

	identification := anIdentificationNumber! !
!Customer methodsFor: 'identification' stamp: 'NB 5/4/2023 21:10:26' prior: 50646470!
cuitNumberIfNone: aNoneClosure

	^identification cuitNumberIfNone: aNoneClosure.! !

!classDefinition: #CUIT category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'NB 5/4/2023 21:11:02'!
Identification subclass: #CUIT
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #Identification category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'NB 5/4/2023 21:11:02'!
Object subclass: #Identification
	instanceVariableNames: 'cuitNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #Identification category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'NB 5/4/2023 21:11:42'!
Object subclass: #Identification
	instanceVariableNames: 'number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!
!CUIT methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 21:11:42' prior: 50646438!
cuitNumberIfNone: aNoneClosure

	^number.! !
!CUIT methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 21:12:06'!
dniNumberIfNone: aNoneBlock
	
	^aNoneBlock value.! !
!DNI methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 21:12:19'!
dniNumberIfNone: aNoneBlock
	
	^number.! !
!Customer methodsFor: 'identification' stamp: 'NB 5/4/2023 21:12:41' prior: 50646462!
dniNumberIfNone: aNoneBlock

	^identification dniNumberIfNone: aNoneBlock.! !
!CUIT methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 21:13:26'!
hasCUITAsIdentification

	^true! !
!DNI methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 21:13:35'!
hasCUITAsIdentification

	^false.! !
!CUIT methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 21:13:58'!
hasDNIAsIdentification

	^false.! !
!DNI methodsFor: 'as yet unclassified' stamp: 'NB 5/4/2023 21:14:22'!
hasDNIAsIdentification

	^true.! !
!Customer methodsFor: 'identification' stamp: 'NB 5/4/2023 21:14:36' prior: 50644022!
hasCUITAsIdentification
	
	^identification hasCUITAsIdentification .! !
!Customer methodsFor: 'identification' stamp: 'NB 5/4/2023 21:14:56' prior: 50644026!
hasDNIAsIdentification
	
	^identification hasDNIAsIdentification.! !
!Identification methodsFor: 'no messages' stamp: 'NB 5/4/2023 21:15:25'!
number

	^number.! !
!Customer methodsFor: 'identification' stamp: 'NB 5/4/2023 21:15:32' prior: 50646457!
identificationNumber

	^identification number.! !
!CustomerImporter methodsFor: 'customer' stamp: 'NB 5/4/2023 21:22:38' prior: 50644091!
importCustomer

	| idType idNumber identification|
	
	self assertValidCustomerRecord.

	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	idType := record fourth.
	idNumber := record fifth.

	idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ].
			identification := DNI with: dniNumber.]
		ifFalse: [ 
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			identification := CUIT with: idNumber .]
		ifFalse: [ self error: 'Invalid identification type' ]].


	newCustomer identificationType: idType.
	newCustomer identificationNumber: identification.
	system add: newCustomer! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 21:22:47'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/4/2023 21:22:47'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/4/2023 21:22:47'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/4/2023 21:22:47'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/4/2023 21:22:47'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/4/2023 21:22:47'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/4/2023 21:22:47'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/4/2023 21:22:47'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/4/2023 21:22:47'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/4/2023 21:22:47'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/4/2023 21:22:47'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/4/2023 21:22:47'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/4/2023 21:22:47'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/4/2023 21:22:47'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/4/2023 21:22:47'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/4/2023 21:22:47'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/4/2023 21:22:47'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/4/2023 21:22:47'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/4/2023 21:22:47'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/4/2023 21:22:47'!
ERROR!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/4/2023 21:22:47'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/4/2023 21:22:47'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/4/2023 21:22:47'!
ERROR!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/4/2023 21:22:47'!
ERROR!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/4/2023 21:22:47'!
ERROR!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/4/2023 21:22:47'!
ERROR!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/4/2023 21:22:47'!
ERROR!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/4/2023 21:22:47'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/4/2023 21:22:47'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 21:22:49'!
ERROR!
!Identification class methodsFor: 'instance creation' stamp: 'NB 5/4/2023 21:22:57'!
with: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aSmallInteger ! !
!Identification class methodsFor: 'instance creation' stamp: 'NB 5/4/2023 21:23:18' prior: 50646709!
with: anIdentificationNumber 
	
	^self new initializeWith: anIdentificationNumber ! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 21:23:20'!
ERROR!

!classDefinition: #Identification category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'NB 5/4/2023 21:23:37'!
Object subclass: #Identification
	instanceVariableNames: 'number identificationNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!
!Identification methodsFor: 'initialization' stamp: 'NB 5/4/2023 21:23:37'!
initializeWith: anIdentificationNumber 
	self shouldBeImplemented.
	identificationNumber := anIdentificationNumber.! !
!Identification methodsFor: 'initialization' stamp: 'NB 5/4/2023 21:23:45' prior: 50646736!
initializeWith: anIdentificationNumber 

	number := anIdentificationNumber.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 21:23:46'!
ERROR!

Object subclass: #Identification
	instanceVariableNames: 'number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #Identification category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'NB 5/4/2023 21:24:17'!
Object subclass: #Identification
	instanceVariableNames: 'number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 21:24:39'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/4/2023 21:24:39'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/4/2023 21:24:39'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/4/2023 21:24:39'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/4/2023 21:24:39'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/4/2023 21:24:39'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/4/2023 21:24:39'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/4/2023 21:24:39'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/4/2023 21:24:39'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/4/2023 21:24:39'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/4/2023 21:24:39'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/4/2023 21:24:39'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/4/2023 21:24:39'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/4/2023 21:24:39'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/4/2023 21:24:39'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/4/2023 21:24:39'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/4/2023 21:24:39'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/4/2023 21:24:39'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/4/2023 21:24:39'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/4/2023 21:24:39'!
ERROR!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/4/2023 21:24:39'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/4/2023 21:24:39'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/4/2023 21:24:39'!
ERROR!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/4/2023 21:24:39'!
ERROR!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/4/2023 21:24:39'!
ERROR!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/4/2023 21:24:39'!
ERROR!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/4/2023 21:24:39'!
ERROR!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/4/2023 21:24:39'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/4/2023 21:24:39'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/4/2023 21:24:41'!
ERROR!

----SNAPSHOT----(4 May 2023 21:26:12) CuisUniversity-5706.image priorSource: 10071629!

----STARTUP---- (5 May 2023 18:19:54) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/5/2023 18:19:57'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/5/2023 18:19:57'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/5/2023 18:19:57'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/5/2023 18:19:57'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/5/2023 18:19:57'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/5/2023 18:19:57'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/5/2023 18:19:57'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/5/2023 18:19:57'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/5/2023 18:19:57'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/5/2023 18:19:57'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/5/2023 18:19:57'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/5/2023 18:19:57'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/5/2023 18:19:57'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/5/2023 18:19:57'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/5/2023 18:19:57'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/5/2023 18:19:57'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/5/2023 18:19:57'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/5/2023 18:19:57'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/5/2023 18:19:57'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/5/2023 18:19:57'!
ERROR!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/5/2023 18:19:57'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/5/2023 18:19:57'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/5/2023 18:19:57'!
ERROR!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/5/2023 18:19:57'!
ERROR!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/5/2023 18:19:57'!
ERROR!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/5/2023 18:19:57'!
ERROR!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/5/2023 18:19:57'!
ERROR!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/5/2023 18:19:57'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/5/2023 18:19:57'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/5/2023 18:20:05'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/5/2023 18:20:05'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/5/2023 18:20:05'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/5/2023 18:20:05'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/5/2023 18:20:05'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/5/2023 18:20:05'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/5/2023 18:20:05'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/5/2023 18:20:05'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/5/2023 18:20:05'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/5/2023 18:20:05'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/5/2023 18:20:05'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/5/2023 18:20:05'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/5/2023 18:20:05'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/5/2023 18:20:05'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/5/2023 18:20:05'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/5/2023 18:20:05'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/5/2023 18:20:05'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/5/2023 18:20:05'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/5/2023 18:20:05'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/5/2023 18:20:05'!
ERROR!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/5/2023 18:20:05'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/5/2023 18:20:05'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/5/2023 18:20:05'!
ERROR!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/5/2023 18:20:05'!
ERROR!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/5/2023 18:20:05'!
ERROR!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/5/2023 18:20:05'!
ERROR!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/5/2023 18:20:05'!
ERROR!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/5/2023 18:20:05'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/5/2023 18:20:05'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/5/2023 18:20:07'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/5/2023 18:22:08'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/5/2023 18:22:08'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/5/2023 18:22:08'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/5/2023 18:22:08'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/5/2023 18:22:08'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/5/2023 18:22:08'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/5/2023 18:22:08'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/5/2023 18:22:08'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/5/2023 18:22:08'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/5/2023 18:22:08'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/5/2023 18:22:08'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/5/2023 18:22:08'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/5/2023 18:22:08'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/5/2023 18:22:08'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/5/2023 18:22:08'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/5/2023 18:22:08'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/5/2023 18:22:08'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/5/2023 18:22:08'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/5/2023 18:22:08'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/5/2023 18:22:08'!
ERROR!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/5/2023 18:22:08'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/5/2023 18:22:08'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/5/2023 18:22:08'!
ERROR!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/5/2023 18:22:08'!
ERROR!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/5/2023 18:22:08'!
ERROR!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/5/2023 18:22:08'!
ERROR!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/5/2023 18:22:08'!
ERROR!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/5/2023 18:22:08'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/5/2023 18:22:08'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/5/2023 18:23:09'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/5/2023 18:26:17'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/5/2023 18:26:17'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/5/2023 18:26:17'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/5/2023 18:26:17'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/5/2023 18:26:17'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/5/2023 18:26:17'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/5/2023 18:26:17'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/5/2023 18:26:17'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/5/2023 18:26:17'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/5/2023 18:26:17'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/5/2023 18:26:17'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/5/2023 18:26:17'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/5/2023 18:26:17'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/5/2023 18:26:17'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/5/2023 18:26:17'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/5/2023 18:26:17'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/5/2023 18:26:17'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/5/2023 18:26:17'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/5/2023 18:26:17'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/5/2023 18:26:17'!
ERROR!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/5/2023 18:26:17'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/5/2023 18:26:17'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/5/2023 18:26:17'!
ERROR!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/5/2023 18:26:17'!
ERROR!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/5/2023 18:26:17'!
ERROR!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/5/2023 18:26:17'!
ERROR!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/5/2023 18:26:17'!
ERROR!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/5/2023 18:26:17'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/5/2023 18:26:17'!
ERROR!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/5/2023 18:26:33'!
ERROR!
!CustomerImporter methodsFor: 'customer' stamp: 'NB 5/5/2023 18:29:57' prior: 50646567!
importCustomer

	| idType idNumber identification|
	
	self assertValidCustomerRecord.

	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	idType := record fourth.
	idNumber := record fifth.

	idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ].
			identification := DNI with: dniNumber asString.]
		ifFalse: [ 
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			identification := CUIT with: idNumber .]
		ifFalse: [ self error: 'Invalid identification type' ]].


	newCustomer identificationType: idType.
	newCustomer identificationNumber: identification.
	system add: newCustomer! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/5/2023 18:30:04'!
FAILURE!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/5/2023 18:30:04'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/5/2023 18:30:04'!
FAILURE!
!DNI methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 18:31:10' prior: 50646522!
dniNumberIfNone: aNoneBlock
	
	^number asNumber.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'NB 5/5/2023 18:31:16'!
PASSED!

----SNAPSHOT----(5 May 2023 18:31:19) CuisUniversity-5706.image priorSource: 10086669!

!classRemoval: #OldZipCode stamp: 'NB 5/5/2023 18:37:28'!
ZipCode subclass: #OldZipCode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #NewZipCode stamp: 'NB 5/5/2023 18:37:28'!
ZipCode subclass: #NewZipCode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #ZipCode stamp: 'NB 5/5/2023 18:37:29'!
Object subclass: #ZipCode
	instanceVariableNames: 'zipcode code'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #DNI stamp: 'NB 5/5/2023 18:37:29'!
Identification subclass: #DNI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #CUIT stamp: 'NB 5/5/2023 18:37:29'!
Identification subclass: #CUIT
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #Identification stamp: 'NB 5/5/2023 18:37:29'!
Object subclass: #Identification
	instanceVariableNames: 'number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #IntegrationEnvironment stamp: 'NB 5/5/2023 18:37:29'!
Environment subclass: #IntegrationEnvironment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #DevelopmentEnvironment stamp: 'NB 5/5/2023 18:37:29'!
Environment subclass: #DevelopmentEnvironment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #Environment stamp: 'NB 5/5/2023 18:37:30'!
Object subclass: #Environment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #DataBaseSession stamp: 'NB 5/5/2023 18:37:30'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #TransientCustomerSystem stamp: 'NB 5/5/2023 18:37:30'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'customers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #PersistentCustomerSystem stamp: 'NB 5/5/2023 18:37:30'!
CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #CustomerSystem stamp: 'NB 5/5/2023 18:37:30'!
Object subclass: #CustomerSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #CustomerImporter stamp: 'NB 5/5/2023 18:37:31'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'readStream newCustomer line record system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #Customer stamp: 'NB 5/5/2023 18:37:31'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identification addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #Address stamp: 'NB 5/5/2023 18:37:31'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #ImportTest stamp: 'NB 5/5/2023 18:37:31'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

----End fileIn of /Users/nico/Documents/inge1/Parciales/2022-1c/Recu1erParcial/CustomerImporter-Recu-1er-Parcial-Solucion.st----!

----SNAPSHOT----(5 May 2023 18:40:09) CuisUniversity-5706.image priorSource: 10106508!

----STARTUP---- (5 May 2023 21:36:17) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


----End fileIn of /Users/nico/Documents/inge1/Parciales/2021-2c/1erParcial/ISW1-2021-2C-1erParcial.st----!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 21:38:36'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 21:39:26' overrides: 16920235!
initialize

	services := OrderedCollection new.
	zones:= OrderedCollection new.! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 21:39:36' prior: 50649792!
addService: aService 

	services add: aService.! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 21:39:42' prior: 50649798!
addZone: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 21:39:49' prior: 50649833!
energyConsumption
	
	| index total |
	
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ total := total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 21:39:55' prior: 50649851!
energyProduced
	
	| index total |
	
	index := 1.
	total := 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service := services at: index.
		service type = #SolarPlant ifTrue: [ total := total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 21:40:11' prior: 50649864!
hasResidentialZones

	| index |
	zones ifEmpty: [ ^ false ].

	index := 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 21:40:20' prior: 50649883!
waterConsumption
	
	| index total |
	
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ total := total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 21:40:26' prior: 50649901!
waterProduced
	| index total |
	
	index := 1.
	total := 0.
	
	[index <= services size] whileTrue: [ | service |
		service := services at: index.
		service type = #WaterTower ifTrue: [ total := total + (200 * wp)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 21:40:32' prior: 50649913!
zones

	^ zones.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 21:40:34'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 21:45:26' prior: 50650153!
energyConsumption
	
	
	^zones sum: [:zone | zone type = #Residential ifTrue: [ (5 * ep) * zone getNumberOfCells ].	
		zone type = #Commertial ifTrue: [ (8 * ep) * zone getNumberOfCells ].	
		zone type = #Industrial ifTrue: [ (10 * ep) * zone getNumberOfCells ].	]
	
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 21:45:28'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 21:45:28'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 21:45:28'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 21:45:28'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 21:45:28'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 21:45:28'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 21:45:28'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 21:45:28'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 21:45:28'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 21:45:28'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 21:45:28'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 21:45:28'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 21:45:28'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 21:45:28'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:45:28'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:45:28'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:45:28'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 21:45:28'!
ERROR!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 21:45:28'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 21:45:28'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 21:45:28'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 21:45:28'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 21:45:28'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 21:45:28'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 21:45:28'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 21:45:30'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 21:45:57' prior: 50650322!
energyConsumption
	
	
	^zones sum: [:zone | zone type = #Residential ifTrue: [ (5 * ep) * zone getNumberOfCells ].	
		zone type = #Commertial ifTrue: [ (8 * ep) * zone getNumberOfCells ].	
		zone type = #Industrial ifTrue: [ (10 * ep) * zone getNumberOfCells ].	] ifEmpty: [^0].
	
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 21:46:00'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 21:46:00'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 21:46:00'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 21:46:00'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 21:46:00'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 21:46:00'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 21:46:00'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 21:46:00'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 21:46:00'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 21:46:00'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 21:46:00'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 21:46:00'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 21:46:00'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 21:46:00'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:46:00'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:46:00'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:46:00'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 21:46:00'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 21:46:00'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 21:46:00'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 21:46:00'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 21:46:00'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 21:46:00'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 21:46:00'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 21:46:00'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 21:46:02'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 21:46:50' prior: 50650436!
energyConsumption
	
	
	^zones sum: [:zone | zone type = #Residential ifTrue: [ ^(5 * ep) * zone getNumberOfCells ].	
		zone type = #Commertial ifTrue: [ ^(8 * ep) * zone getNumberOfCells ].	
		zone type = #Industrial ifTrue: [ ^(10 * ep) * zone getNumberOfCells ].	] ifEmpty: [^0].
	
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 21:46:52'!
FAILURE!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 21:46:52'!
FAILURE!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 21:46:52'!
FAILURE!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 21:46:52'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 21:46:54'!
FAILURE!
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 21:48:01' prior: 50650550!
energyConsumption
	
	
	^zones sum: [:zone | zone type = #Residential ifTrue: [ (5 * ep) * zone getNumberOfCells;yourself ].	
		zone type = #Commertial ifTrue: [ (8 * ep) * zone getNumberOfCells;yourself ].	
		zone type = #Industrial ifTrue: [ (10 * ep) * zone getNumberOfCells;yourself ].	] ifEmpty: [^0].
	
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 21:48:02'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 21:48:02'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 21:48:02'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 21:48:03'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 21:48:03'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 21:48:03'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 21:48:03'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 21:48:03'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 21:48:03'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 21:48:03'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 21:48:03'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 21:48:03'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 21:48:03'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 21:48:03'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:48:03'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:48:03'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:48:03'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 21:48:03'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 21:48:03'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 21:48:03'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 21:48:03'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 21:48:03'!
FAILURE!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 21:48:03'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 21:48:03'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 21:48:03'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 21:48:05'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 21:48:32' prior: 50650665!
energyConsumption
	
	
	^zones sum: [:zone | zone type = #Residential ifTrue: [ (5 * ep) * zone getNumberOfCells ].	
		zone type = #Commertial ifTrue: [ (8 * ep) * zone getNumberOfCells ].	
		zone type = #Industrial ifTrue: [ (10 * ep) * zone getNumberOfCells ].	] ifEmpty: [^0].
	
	! !

#(1 2 3 4) sum: [:each| each *2].!

#(1 2 3 4) sum: [:each| each > 1 ifTrue: [ each *2]]!

#(1 2 3 4) sum: [:each| each > 1 ifTrue: [ ^each *2]]!

#(1 2 3 4) sum: [:each| each > 1 ifTrue: [ each *2];yourself]!

#(1 2 3 4) sum: [:each| each > 1 ifTrue: [ each *2;yourself]]!

#(1 2 3 4) sum: [:each| each > 1 ifTrue: [ each *2] ifFalse: [0]]!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 21:52:45'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 21:52:45'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 21:52:45'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 21:52:45'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 21:52:45'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 21:52:45'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 21:52:45'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 21:52:45'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 21:52:45'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 21:52:45'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 21:52:45'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 21:52:45'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 21:52:45'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 21:52:45'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:52:45'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:52:45'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:52:45'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 21:52:45'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 21:52:45'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 21:52:45'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 21:52:45'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 21:52:45'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 21:52:45'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 21:52:45'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 21:52:45'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 21:52:48'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 21:52:57'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 21:53:29'!
ERROR!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 21:53:55'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 21:53:57'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 21:53:57'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 21:53:57'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 21:53:57'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 21:53:57'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 21:53:57'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 21:53:57'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 21:53:57'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 21:53:57'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 21:53:57'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 21:53:57'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 21:53:57'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 21:53:57'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 21:53:57'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:53:57'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:53:57'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:53:57'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 21:53:57'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 21:53:57'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 21:53:57'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 21:53:57'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 21:53:57'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 21:53:57'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 21:53:57'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 21:53:57'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 21:53:59'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 21:58:33' prior: 50650780!
energyConsumption
	
	
	^zones sum: [:zone | zone type = #Residential ifTrue: [ (5 * ep) * zone getNumberOfCells ]
		ifFalse: [zone type = #Commertial ifTrue: [ (8 * ep) * zone getNumberOfCells ] ifFalse: 
		[zone type = #Industrial ifTrue: [ (10 * ep) * zone getNumberOfCells ]]	]] ifEmpty: [^0].
	
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 21:58:35'!
PASSED!

----SNAPSHOT----(5 May 2023 21:58:38) CuisUniversity-5706.image priorSource: 10168889!
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 21:59:44' prior: 50650170!
energyProduced
	
	
	^services sum: [:service | service type = #SolarPlant ifTrue: [ 500 * ep] ifFalse: [^0* ep]].
	
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 21:59:46'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 21:59:46'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 21:59:46'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 21:59:46'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 21:59:46'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 21:59:46'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 21:59:46'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 21:59:46'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 21:59:46'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 21:59:46'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 21:59:46'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 21:59:46'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 21:59:46'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 21:59:46'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:59:46'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:59:46'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 21:59:46'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 21:59:46'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 21:59:46'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 21:59:46'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 21:59:46'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 21:59:46'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 21:59:46'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 21:59:46'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 21:59:46'!
ERROR!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 21:59:48'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:00:10' prior: 50651133!
energyProduced
	
	
	^services sum: [:service | service type = #SolarPlant ifTrue: [ 500 * ep] ifFalse: [^0* ep]] ifEmpty: [^0* ep].
	
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 22:00:12'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 22:00:12'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 22:00:12'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 22:00:12'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 22:00:12'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 22:00:12'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 22:00:12'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 22:00:12'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 22:00:12'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 22:00:12'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 22:00:12'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 22:00:12'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 22:00:12'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 22:00:12'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:00:12'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:00:12'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:00:12'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 22:00:12'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 22:00:12'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 22:00:12'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 22:00:12'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 22:00:12'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 22:00:12'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 22:00:12'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 22:00:12'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 22:00:14'!
ERROR!

self energyAvailable!
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:01:00' prior: 50651242!
energyProduced
	
	
	^services sum: [:service | service type = #SolarPlant ifTrue: [ 500 * ep] ifFalse: [0* ep]] ifEmpty: [^0* ep].
	
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 22:01:02'!
PASSED!

----SNAPSHOT----(5 May 2023 22:01:05) CuisUniversity-5706.image priorSource: 10223328!
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:04:20' prior: 50650181!
hasResidentialZones

	
	^zones anySatisfy: [:zone | zone type = #Residential ].
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 22:04:22'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:06:15' prior: 50650209!
waterProduced

	^services sum: [:service | service type = #WaterTower ifTrue: [200 * wp] ifFalse: [0*  wp]] ifEmpty: [^0*  wp].
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 22:06:17'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:07:19' prior: 50650192!
waterConsumption
	
	^zones sum: [:zone | zone type = #Residential ifTrue: [ (9 * wp) * zone getNumberOfCells ]
		ifFalse: [zone type = #Commertial ifTrue: [ (2 * wp) * zone getNumberOfCells ] ifFalse: 
		[zone type = #Industrial ifTrue: [ (10 * wp) * zone getNumberOfCells ]]	]] ifEmpty: [^0].! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 22:07:21'!
PASSED!

----SNAPSHOT----(5 May 2023 22:07:24) CuisUniversity-5706.image priorSource: 10233818!

Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Residential category: 'ISW1-2021-2C-1erParcial' stamp: 'NB 5/5/2023 22:08:15'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Commertial category: 'ISW1-2021-2C-1erParcial' stamp: 'NB 5/5/2023 22:08:30'!
Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Industrial category: 'ISW1-2021-2C-1erParcial' stamp: 'NB 5/5/2023 22:08:34'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Residential methodsFor: 'no messages' stamp: 'NB 5/5/2023 22:09:49'!
assertEnergy: anEnergy andWater: aWater! !
!Residential methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:11:57'!
assertServicesAreCorrect: aCity

	^aCity assertServicesForAResidentialZone: self.! !

!methodRemoval: Residential #assertEnergy:andWater: stamp: 'NB 5/5/2023 22:12:01'!
assertEnergy: anEnergy andWater: aWater!
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:12:35'!
assertServicesForAResidentialZone: aResidentialZone

	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:12:47'!
assertServicesForAResidentialZone

	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
! !

!methodRemoval: City #assertServicesForAResidentialZone: stamp: 'NB 5/5/2023 22:12:51'!
assertServicesForAResidentialZone: aResidentialZone

	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
!
!Residential methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:12:58' prior: 50651823!
assertServicesAreCorrect: aCity

	^aCity assertServicesForAResidentialZone.! !
!City methodsFor: 'assertions' stamp: 'NB 5/5/2023 22:13:38'!
assertServicesForACommertialZone

	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
! !
!City methodsFor: 'assertions' stamp: 'NB 5/5/2023 22:14:10' prior: 50651868!
assertServicesForACommertialZone

	self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].	
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
! !
!City methodsFor: 'assertions' stamp: 'NB 5/5/2023 22:14:34'!
assertServicesForAIndustrialZone

	self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
! !
!City methodsFor: 'assertions' stamp: 'NB 5/5/2023 22:14:54' prior: 50651890!
assertServicesForAIndustrialZone

	self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].! !
!City methodsFor: 'assertions' stamp: 'NB 5/5/2023 22:16:02'!
assertEnergy

	^ self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ]! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:16:02' prior: 50650124!
addZone: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self assertEnergy.
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'assertions' stamp: 'NB 5/5/2023 22:16:02' prior: 50651878!
assertServicesForACommertialZone

	self assertEnergy.
	self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].	
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
! !
!City methodsFor: 'assertions' stamp: 'NB 5/5/2023 22:16:41'!
assertWater

	^ self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ]! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:16:41' prior: 50651916!
addZone: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self assertEnergy.
		self assertWater.
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'assertions' stamp: 'NB 5/5/2023 22:16:41' prior: 50651942!
assertServicesForACommertialZone

	self assertEnergy.
	self assertWater.	
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
! !
!City methodsFor: 'assertions' stamp: 'NB 5/5/2023 22:17:12'!
assertEnergy: anEnergyMeasure

	^ self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ]! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:17:12' prior: 50651983!
assertServicesForACommertialZone

	self assertEnergy: 2 * ep.
	self assertWater.	
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:17:12' prior: 50651959!
addZone: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self assertEnergy: 2 * ep.
		self assertWater.
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !

!methodRemoval: City #assertEnergy stamp: 'NB 5/5/2023 22:17:12'!
assertEnergy

	^ self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ]!
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:17:12' prior: 50651991!
assertEnergy: anEnergyMeasure

	^ self energyAvailable < anEnergyMeasure ifTrue: [ self error: City cannotAddZoneErrorDescription ]! !
!City methodsFor: 'assertions' stamp: 'NB 5/5/2023 22:17:44'!
assertEnergyAvailableIsLessThan: anEnergyMeasure

	^ self energyAvailable < anEnergyMeasure ifTrue: [ self error: City cannotAddZoneErrorDescription ]! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:17:44' prior: 50651998!
assertServicesForACommertialZone

	self assertEnergyAvailableIsLessThan: 2 * ep.
	self assertWater.	
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:17:44' prior: 50652007!
addZone: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self assertEnergyAvailableIsLessThan: 2 * ep.
		self assertWater.
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !

!methodRemoval: City #assertEnergy: stamp: 'NB 5/5/2023 22:17:44'!
assertEnergy: anEnergyMeasure

	^ self energyAvailable < anEnergyMeasure ifTrue: [ self error: City cannotAddZoneErrorDescription ]!
!City methodsFor: 'assertions' stamp: 'NB 5/5/2023 22:17:59' prior: 50651900!
assertServicesForAIndustrialZone

	self assertEnergyAvailableIsLessThan: 10 * ep.
	self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].! !
!City methodsFor: 'assertions' stamp: 'NB 5/5/2023 22:18:05' prior: 50651842!
assertServicesForAResidentialZone

	self assertEnergyAvailableIsLessThan: 5 * ep.
	self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
! !
!City methodsFor: 'assertions' stamp: 'NB 5/5/2023 22:18:24'!
assertWater: aWaterMeasure

	^ self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ]! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:18:24' prior: 50652052!
assertServicesForACommertialZone

	self assertEnergyAvailableIsLessThan: 2 * ep.
	self assertWater: 8 * wp.	
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:18:24' prior: 50652062!
addZone: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self assertEnergyAvailableIsLessThan: 2 * ep.
		self assertWater: 8 * wp.
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !

!methodRemoval: City #assertWater stamp: 'NB 5/5/2023 22:18:24'!
assertWater

	^ self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ]!
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:18:24' prior: 50652109!
assertWater: aWaterMeasure

	^ self waterAvailable < aWaterMeasure ifTrue: [ self error: City cannotAddZoneErrorDescription ]! !
!City methodsFor: 'assertions' stamp: 'NB 5/5/2023 22:18:48'!
assertWaterAvailableIsLessThan: aWaterMeasure

	^ self waterAvailable < aWaterMeasure ifTrue: [ self error: City cannotAddZoneErrorDescription ]! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:18:48' prior: 50652126!
addZone: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self assertEnergyAvailableIsLessThan: 2 * ep.
		self assertWaterAvailableIsLessThan: 8 * wp.
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:18:48' prior: 50652116!
assertServicesForACommertialZone

	self assertEnergyAvailableIsLessThan: 2 * ep.
	self assertWaterAvailableIsLessThan: 8 * wp.	
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
! !

!methodRemoval: City #assertWater: stamp: 'NB 5/5/2023 22:18:48'!
assertWater: aWaterMeasure

	^ self waterAvailable < aWaterMeasure ifTrue: [ self error: City cannotAddZoneErrorDescription ]!
!City methodsFor: 'assertions' stamp: 'NB 5/5/2023 22:19:09' prior: 50652093!
assertServicesForAIndustrialZone

	self assertEnergyAvailableIsLessThan: 10 * ep.
	self assertWaterAvailableIsLessThan: 10 * wp.	! !
!City methodsFor: 'assertions' stamp: 'NB 5/5/2023 22:19:15' prior: 50652101!
assertServicesForAResidentialZone

	self assertEnergyAvailableIsLessThan: 5 * ep.
	self assertWaterAvailableIsLessThan: 9 * wp.	
! !
!City methodsFor: 'assertions' stamp: 'NB 5/5/2023 22:19:58'!
assertHasResidentialZones

	^ self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ]! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:19:58' prior: 50652171!
addZone: aZone

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self assertEnergyAvailableIsLessThan: 2 * ep.
		self assertWaterAvailableIsLessThan: 8 * wp.
		
		self assertHasResidentialZones.
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'assertions' stamp: 'NB 5/5/2023 22:19:58' prior: 50652197!
assertServicesForACommertialZone

	self assertEnergyAvailableIsLessThan: 2 * ep.
	self assertWaterAvailableIsLessThan: 8 * wp.	
	self assertHasResidentialZones.
! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:20:50' prior: 50652234!
addZone: aZone

	aZone assertServicesAreCorrect: self.

	zones add: aZone.
! !
!Industrial methodsFor: 'no messages' stamp: 'NB 5/5/2023 22:21:07'!
assertServicesAreCorrect: aCity

	^aCity assertServicesForAIndustrialZone .! !
!Commertial methodsFor: 'no messages' stamp: 'NB 5/5/2023 22:21:18'!
assertServicesAreCorrect: aCity

	^aCity assertServicesForACommertialZone .! !

----SNAPSHOT----(5 May 2023 22:21:20) CuisUniversity-5706.image priorSource: 10244185!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 22:21:22'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 22:21:22'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 22:21:22'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 22:21:22'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 22:21:22'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 22:21:22'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 22:21:22'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 22:21:22'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 22:21:22'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 22:21:22'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 22:21:22'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 22:21:22'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 22:21:22'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 22:21:22'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:21:22'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:21:22'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:21:22'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 22:21:22'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 22:21:22'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 22:21:22'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 22:21:22'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 22:21:22'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 22:21:22'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 22:21:22'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 22:21:22'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 22:21:24'!
ERROR!
!CityTest methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:22:25' prior: 50649447!
commertialZone

	^ Commertial new.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:22:33' prior: 50649451!
industrialZone

	^ Industrial new.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:22:40' prior: 50649455!
residentialZone

	^ Residential new.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 22:23:02'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 22:23:02'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 22:23:02'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 22:23:02'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 22:23:02'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 22:23:02'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 22:23:02'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 22:23:02'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 22:23:02'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 22:23:02'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 22:23:02'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 22:23:02'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 22:23:02'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 22:23:02'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:23:02'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:23:02'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:23:02'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 22:23:02'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 22:23:02'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 22:23:02'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 22:23:02'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 22:23:02'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 22:23:02'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 22:23:02'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 22:23:02'!
ERROR!

----SNAPSHOT----(5 May 2023 22:23:05) CuisUniversity-5706.image priorSource: 10260174!
!Commertial methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:23:51' overrides: 16920235!
initialize

	type:= #Commertial.! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:24:00' overrides: 16920235!
initialize

	type:= #Industrial.! !
!Residential methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 22:24:08' overrides: 16920235!
initialize

	type:= #Residential.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 22:24:10'!
PASSED!

----SNAPSHOT----(5 May 2023 22:24:13) CuisUniversity-5706.image priorSource: 10267146!

----SNAPSHOT----(5 May 2023 22:57:25) CuisUniversity-5706.image priorSource: 10270869!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 22:57:28'!
PASSED!
!Commertial methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:03:26'!
energyConsumption
	
	
	^(8 * ep) * self getNumberOfCells.! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:04:02'!
energyConsumption
	
	
	^(10 * ep) * self getNumberOfCells.! !
!Residential methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:04:19'!
energyConsumption
	
	
	^ (5 * ep) * self getNumberOfCells
		! !
!Zone methodsFor: 'accessing' stamp: 'NB 5/5/2023 23:04:57'!
consumtionfor: anEnergyMeasure

	anEnergyMeasure * self getNumberOfCells .! !
!Zone methodsFor: 'initialization' stamp: 'NB 5/5/2023 23:05:31' prior: 50649980!
initializeWithType: aZoneType 
	
	numberOfCells := 1.
	type := aZoneType.! !
!Zone methodsFor: 'accessing' stamp: 'NB 5/5/2023 23:05:40' prior: 50649984!
getNumberOfCells
	
	^ numberOfCells! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:06:03' prior: 50652720!
energyConsumption
	
	
	^self consumtionfor:  (8 * ep).! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:06:17' prior: 50652725!
energyConsumption
	
	
	^ self consumtionfor: (10 * ep).! !
!Residential methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:06:25' prior: 50652730!
energyConsumption
	
	
	^self consumtionfor: (5 * ep)
		! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:06:50' prior: 50651019!
energyConsumption
	
	
	^zones sum: [:zone | zone energyConsumption ] ifEmpty: [^0].
	
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 23:07:00'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 23:07:00'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 23:07:00'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 23:07:00'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 23:07:00'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 23:07:00'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 23:07:00'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 23:07:00'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 23:07:00'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 23:07:00'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 23:07:00'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 23:07:00'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 23:07:00'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 23:07:00'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:07:00'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:07:00'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:07:00'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 23:07:00'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 23:07:00'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 23:07:00'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 23:07:00'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 23:07:00'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 23:07:00'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 23:07:00'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 23:07:00'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 23:07:51'!
ERROR!
!Commertial methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:08:38' prior: 50652503 overrides: 16920235!
initialize

	numberOfCells := 1.
	type:= #Commertial.! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:08:44' prior: 50652508 overrides: 16920235!
initialize

	numberOfCells := 1.
	type:= #Industrial.! !
!Residential methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:08:49' prior: 50652513 overrides: 16920235!
initialize

	numberOfCells := 1.
	type:= #Residential.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 23:08:51'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 23:08:51'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 23:08:51'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 23:08:51'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 23:08:51'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 23:08:51'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 23:08:51'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 23:08:51'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 23:08:51'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 23:08:51'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 23:08:51'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 23:08:51'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 23:08:51'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 23:08:51'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:08:51'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:08:51'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:08:51'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 23:08:51'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 23:08:51'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 23:08:51'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 23:08:51'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 23:08:51'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 23:08:51'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 23:08:51'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 23:08:51'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 23:08:52'!
ERROR!
!Zone methodsFor: 'accessing' stamp: 'NB 5/5/2023 23:09:08' prior: 50652734!
consumtionfor: anEnergyMeasure

	^anEnergyMeasure * self getNumberOfCells .! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 23:09:10'!
PASSED!

----SNAPSHOT----(5 May 2023 23:09:12) CuisUniversity-5706.image priorSource: 10270957!
!Commertial methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:10:07'!
isResidential
	
	
	^false.! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:10:13'!
isResidential
	
	
	^false.! !
!Residential methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:10:19'!
isResidential
	
	
	^true.! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:10:28' prior: 50651461!
hasResidentialZones

	
	^zones anySatisfy: [:zone | zone isResidential ].
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 23:10:30'!
PASSED!

----SNAPSHOT----(5 May 2023 23:10:33) CuisUniversity-5706.image priorSource: 10286239!
!Commertial methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:11:23'!
waterConsumption
	
	^self consumtionfor: (2 * wp)
		! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:11:57'!
waterConsumption
	
	
	^ self consumtionfor: (10 * wp).! !
!Residential methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:12:34'!
waterConsumption
	
	
	^self consumtionfor: (9 * wp).! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:12:44' prior: 50651671!
waterConsumption
	
	^zones sum: [:zone | zone waterConsumption ] ifEmpty: [^0].! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 23:12:46'!
PASSED!

----SNAPSHOT----(5 May 2023 23:12:49) CuisUniversity-5706.image priorSource: 10290047!

!methodRemoval: Zone #type stamp: 'NB 5/5/2023 23:13:47'!
type
	
	^ type!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 23:13:49'!
PASSED!
!Commertial methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:14:00' prior: 50652873 overrides: 16920235!
initialize

	numberOfCells := 1.! !
!Zone methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:14:07' overrides: 16920235!
initialize

	numberOfCells := 1.! !

!methodRemoval: Commertial #initialize stamp: 'NB 5/5/2023 23:14:07'!
initialize

	numberOfCells := 1.!

!methodRemoval: Industrial #initialize stamp: 'NB 5/5/2023 23:14:12'!
initialize

	numberOfCells := 1.
	type:= #Industrial.!

!methodRemoval: Residential #initialize stamp: 'NB 5/5/2023 23:14:17'!
initialize

	numberOfCells := 1.
	type:= #Residential.!

!methodRemoval: Zone class #withType: stamp: 'NB 5/5/2023 23:15:21'!
withType: aZoneType 

	^ self new initializeWithType: aZoneType. !

!methodRemoval: Zone #initializeWithType: stamp: 'NB 5/5/2023 23:15:32'!
initializeWithType: aZoneType 
	
	numberOfCells := 1.
	type := aZoneType.!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 23:15:34'!
PASSED!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'NB 5/5/2023 23:15:41'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----SNAPSHOT----(5 May 2023 23:15:45) CuisUniversity-5706.image priorSource: 10293955!

Service subclass: #WaterTower
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #WaterTower category: 'ISW1-2021-2C-1erParcial' stamp: 'NB 5/5/2023 23:16:33'!
Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #SolarPlant category: 'ISW1-2021-2C-1erParcial' stamp: 'NB 5/5/2023 23:16:40'!
Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!SolarPlant methodsFor: 'no messages' stamp: 'NB 5/5/2023 23:17:34'!
energyProduced
	! !
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:17:53' prior: 50653607!
energyProduced
	
	^500 * ep! !
!WaterTower methodsFor: 'no messages' stamp: 'NB 5/5/2023 23:18:04'!
energyProduced
	
	^0 * ep! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:18:21' prior: 50651352!
energyProduced
	
	
	^services sum: [:service | service energyProduced ] ifEmpty: [^0* ep].
	
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 23:18:23'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 23:18:23'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 23:18:23'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 23:18:23'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 23:18:23'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 23:18:23'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 23:18:23'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 23:18:23'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 23:18:23'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 23:18:23'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 23:18:23'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 23:18:23'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 23:18:23'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 23:18:23'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:18:23'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:18:23'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:18:23'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 23:18:23'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 23:18:23'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 23:18:23'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 23:18:23'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 23:18:23'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 23:18:23'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 23:18:23'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 23:18:23'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 23:18:25'!
ERROR!
!CityTest methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:19:15' prior: 50649459!
solarPlant

	^ SolarPlant new.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:19:24' prior: 50649755!
waterTower

	^ WaterTower new.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 23:19:33'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 23:19:33'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 23:19:33'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 23:19:33'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 23:19:33'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 23:19:33'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 23:19:33'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 23:19:33'!
FAILURE!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 23:19:33'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 23:19:33'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 23:19:33'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 23:19:33'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 23:19:33'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 23:19:33'!
FAILURE!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:19:33'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:19:33'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:19:33'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 23:19:33'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 23:19:33'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 23:19:33'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 23:19:33'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 23:19:33'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 23:19:33'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 23:19:33'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 23:19:33'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 23:19:34'!
ERROR!
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:20:13'!
waterProduced

	^0*  wp! !
!WaterTower methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:20:23'!
waterProduced

	^200 * wp! !
!City methodsFor: 'as yet unclassified' stamp: 'NB 5/5/2023 23:20:47' prior: 50651565!
waterProduced

	^services sum: [:service | service waterProduced] ifEmpty: [^0*  wp].
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 23:20:50'!
PASSED!

----SNAPSHOT----(5 May 2023 23:20:53) CuisUniversity-5706.image priorSource: 10301608!

!methodRemoval: Service class #withType: stamp: 'NB 5/5/2023 23:21:15'!
withType: aServiceType

	^self new initializeWithType: aServiceType !

!methodRemoval: Service #initializeWithType: stamp: 'NB 5/5/2023 23:21:26'!
initializeWithType: aServiceType 

	type _ aServiceType.!

!methodRemoval: Service #type stamp: 'NB 5/5/2023 23:21:34'!
type
	
	^type!

!classDefinition: #Service category: 'ISW1-2021-2C-1erParcial' stamp: 'NB 5/5/2023 23:21:43'!
Object subclass: #Service
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NB 5/5/2023 23:21:49'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NB 5/5/2023 23:21:49'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NB 5/5/2023 23:21:49'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NB 5/5/2023 23:21:50'!
PASSED!

----SNAPSHOT----(5 May 2023 23:21:53) CuisUniversity-5706.image priorSource: 10313546!

----SNAPSHOT----(5 May 2023 23:23:46) CuisUniversity-5706.image priorSource: 10317374!

----SNAPSHOT----(6 May 2023 02:07:53) CuisUniversity-5706.image priorSource: 10317462!

----SNAPSHOT----(6 May 2023 02:08:04) CuisUniversity-5706.image priorSource: 10317550!

----STARTUP---- (7 May 2023 13:20:44) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


----End fileIn of /Users/nico/Documents/inge1/Parciales/2021-2c/Recuperatorio/ISW1-2021-2C-Recuperatorio-1erParcial.st----!

!classRenamed: #TestISWSmartBuilding as: #TestISWSmartBuildingTest stamp: 'NB 5/7/2023 14:12:05'!
Smalltalk renameClassNamed: #TestISWSmartBuilding as: #TestISWSmartBuildingTest!

!testRun: #TestISWSmartBuildingTest #test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test02TiempoEnConstruirEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test03CostoParaConstruirConPrecioFijoEsTiempoPorPrecio stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test04TiempoEnConstruirConCapacidadVariableEnTiempoInicialUsaAreaInicial stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test05TiempoEnConstruirConCapacidadVariableEnTiempoRestanteSumaTiempoInicialMasTiempoPorCapacidadRestante stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test06TiempoEnConstruirConCapacidadVariableParaAreaInicialEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test07TiempoEnConstruirConCapacidadVariableParaAreaRestanteEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test08LaCapacidadParaDiasRestantesDebeSerMenosALaCapacidadInicial stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test09CostoParaConstruirConPrecioVariableUsaPrecioNoLluviosoParaDiasNoLluviosos stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test10CostoParaConstruirConPrecioVariableUsaPrecioLluviosoParaDiasLluviosos stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test11CostoParaConstruirConPrecioVariableUsaPrecioLluviosoYNoLluviosoComoCorresponde stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test12PrecioEnDiasLluviososEsMayorAPrecioEnDiasNoLluviosos stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test13NoSePuedeCrearEquipoCombinadoSinEquipos stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test14NoSePuedeCrearEquipoCombinadoConEquiposDirectosCompartidos stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test15NoSePuedeConstruirEquipoCombinadoConEquiposIndirectorRepetidos stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test16CostoParaConstruirDeEquipoCombinadoParaUnEquipoEsElCostoDeEseEquipo stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test17CostoParaConstruirEsLaSumaDeLosCostosDeLosEquipos stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test18TiempoDeConstruccionEsElMaximo stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test19SePuedeConsultarElTiempoPorEquipo stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test20SePuedeConsultarElCostoPorEquipo stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test21EquipoMasRapidoEsElQueMenosTarda stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test22EquipoMasBaratoEsElQueMenosCobra stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test23ConEstadoDeAnimoMaloTardaElDoble stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test24ConEstadoDeAnimoMuyBuenoTardaLaMitad stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test25NoSePuedeCrearEquipoConEstadoDeAnimoInvalido stamp: 'NB 5/7/2023 14:12:57'!
PASSED!

!methodRemoval: TestISWSmartBuildingTest #diasLluviososEn: stamp: 'NB 5/7/2023 14:13:12'!
diasLluviososEn: unTiempo

	^diasLluviosos !

!testRun: #TestISWSmartBuildingTest #test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test02TiempoEnConstruirEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test03CostoParaConstruirConPrecioFijoEsTiempoPorPrecio stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test04TiempoEnConstruirConCapacidadVariableEnTiempoInicialUsaAreaInicial stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test05TiempoEnConstruirConCapacidadVariableEnTiempoRestanteSumaTiempoInicialMasTiempoPorCapacidadRestante stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test06TiempoEnConstruirConCapacidadVariableParaAreaInicialEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test07TiempoEnConstruirConCapacidadVariableParaAreaRestanteEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test08LaCapacidadParaDiasRestantesDebeSerMenosALaCapacidadInicial stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test09CostoParaConstruirConPrecioVariableUsaPrecioNoLluviosoParaDiasNoLluviosos stamp: 'NB 5/7/2023 14:13:14'!
ERROR!

!testRun: #TestISWSmartBuildingTest #test10CostoParaConstruirConPrecioVariableUsaPrecioLluviosoParaDiasLluviosos stamp: 'NB 5/7/2023 14:13:14'!
ERROR!

!testRun: #TestISWSmartBuildingTest #test11CostoParaConstruirConPrecioVariableUsaPrecioLluviosoYNoLluviosoComoCorresponde stamp: 'NB 5/7/2023 14:13:14'!
ERROR!

!testRun: #TestISWSmartBuildingTest #test12PrecioEnDiasLluviososEsMayorAPrecioEnDiasNoLluviosos stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test13NoSePuedeCrearEquipoCombinadoSinEquipos stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test14NoSePuedeCrearEquipoCombinadoConEquiposDirectosCompartidos stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test15NoSePuedeConstruirEquipoCombinadoConEquiposIndirectorRepetidos stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test16CostoParaConstruirDeEquipoCombinadoParaUnEquipoEsElCostoDeEseEquipo stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test17CostoParaConstruirEsLaSumaDeLosCostosDeLosEquipos stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test18TiempoDeConstruccionEsElMaximo stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test19SePuedeConsultarElTiempoPorEquipo stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test20SePuedeConsultarElCostoPorEquipo stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test21EquipoMasRapidoEsElQueMenosTarda stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test22EquipoMasBaratoEsElQueMenosCobra stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test23ConEstadoDeAnimoMaloTardaElDoble stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test24ConEstadoDeAnimoMuyBuenoTardaLaMitad stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test25NoSePuedeCrearEquipoConEstadoDeAnimoInvalido stamp: 'NB 5/7/2023 14:13:14'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test09CostoParaConstruirConPrecioVariableUsaPrecioNoLluviosoParaDiasNoLluviosos stamp: 'NB 5/7/2023 14:13:18'!
ERROR!

!testRun: #TestISWSmartBuildingTest #test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad stamp: 'NB 5/7/2023 14:14:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test02TiempoEnConstruirEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test03CostoParaConstruirConPrecioFijoEsTiempoPorPrecio stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test04TiempoEnConstruirConCapacidadVariableEnTiempoInicialUsaAreaInicial stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test05TiempoEnConstruirConCapacidadVariableEnTiempoRestanteSumaTiempoInicialMasTiempoPorCapacidadRestante stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test06TiempoEnConstruirConCapacidadVariableParaAreaInicialEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test07TiempoEnConstruirConCapacidadVariableParaAreaRestanteEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test08LaCapacidadParaDiasRestantesDebeSerMenosALaCapacidadInicial stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test09CostoParaConstruirConPrecioVariableUsaPrecioNoLluviosoParaDiasNoLluviosos stamp: 'NB 5/7/2023 14:14:38'!
ERROR!

!testRun: #TestISWSmartBuildingTest #test10CostoParaConstruirConPrecioVariableUsaPrecioLluviosoParaDiasLluviosos stamp: 'NB 5/7/2023 14:14:38'!
ERROR!

!testRun: #TestISWSmartBuildingTest #test11CostoParaConstruirConPrecioVariableUsaPrecioLluviosoYNoLluviosoComoCorresponde stamp: 'NB 5/7/2023 14:14:38'!
ERROR!

!testRun: #TestISWSmartBuildingTest #test12PrecioEnDiasLluviososEsMayorAPrecioEnDiasNoLluviosos stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test13NoSePuedeCrearEquipoCombinadoSinEquipos stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test14NoSePuedeCrearEquipoCombinadoConEquiposDirectosCompartidos stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test15NoSePuedeConstruirEquipoCombinadoConEquiposIndirectorRepetidos stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test16CostoParaConstruirDeEquipoCombinadoParaUnEquipoEsElCostoDeEseEquipo stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test17CostoParaConstruirEsLaSumaDeLosCostosDeLosEquipos stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test18TiempoDeConstruccionEsElMaximo stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test19SePuedeConsultarElTiempoPorEquipo stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test20SePuedeConsultarElCostoPorEquipo stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test21EquipoMasRapidoEsElQueMenosTarda stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test22EquipoMasBaratoEsElQueMenosCobra stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test23ConEstadoDeAnimoMaloTardaElDoble stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test24ConEstadoDeAnimoMuyBuenoTardaLaMitad stamp: 'NB 5/7/2023 14:14:38'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test25NoSePuedeCrearEquipoConEstadoDeAnimoInvalido stamp: 'NB 5/7/2023 14:14:38'!
PASSED!
!TestISWSmartBuildingTest methodsFor: 'pronostico' stamp: 'NB 5/7/2023 14:16:32'!
diasLluviosos: unTiempo

	^diasLluviosos ! !

!testRun: #TestISWSmartBuildingTest #test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test02TiempoEnConstruirEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test03CostoParaConstruirConPrecioFijoEsTiempoPorPrecio stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test04TiempoEnConstruirConCapacidadVariableEnTiempoInicialUsaAreaInicial stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test05TiempoEnConstruirConCapacidadVariableEnTiempoRestanteSumaTiempoInicialMasTiempoPorCapacidadRestante stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test06TiempoEnConstruirConCapacidadVariableParaAreaInicialEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test07TiempoEnConstruirConCapacidadVariableParaAreaRestanteEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test08LaCapacidadParaDiasRestantesDebeSerMenosALaCapacidadInicial stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test09CostoParaConstruirConPrecioVariableUsaPrecioNoLluviosoParaDiasNoLluviosos stamp: 'NB 5/7/2023 14:16:34'!
ERROR!

!testRun: #TestISWSmartBuildingTest #test10CostoParaConstruirConPrecioVariableUsaPrecioLluviosoParaDiasLluviosos stamp: 'NB 5/7/2023 14:16:34'!
ERROR!

!testRun: #TestISWSmartBuildingTest #test11CostoParaConstruirConPrecioVariableUsaPrecioLluviosoYNoLluviosoComoCorresponde stamp: 'NB 5/7/2023 14:16:34'!
ERROR!

!testRun: #TestISWSmartBuildingTest #test12PrecioEnDiasLluviososEsMayorAPrecioEnDiasNoLluviosos stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test13NoSePuedeCrearEquipoCombinadoSinEquipos stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test14NoSePuedeCrearEquipoCombinadoConEquiposDirectosCompartidos stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test15NoSePuedeConstruirEquipoCombinadoConEquiposIndirectorRepetidos stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test16CostoParaConstruirDeEquipoCombinadoParaUnEquipoEsElCostoDeEseEquipo stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test17CostoParaConstruirEsLaSumaDeLosCostosDeLosEquipos stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test18TiempoDeConstruccionEsElMaximo stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test19SePuedeConsultarElTiempoPorEquipo stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test20SePuedeConsultarElCostoPorEquipo stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test21EquipoMasRapidoEsElQueMenosTarda stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test22EquipoMasBaratoEsElQueMenosCobra stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test23ConEstadoDeAnimoMaloTardaElDoble stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test24ConEstadoDeAnimoMuyBuenoTardaLaMitad stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test25NoSePuedeCrearEquipoConEstadoDeAnimoInvalido stamp: 'NB 5/7/2023 14:16:34'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test09CostoParaConstruirConPrecioVariableUsaPrecioNoLluviosoParaDiasNoLluviosos stamp: 'NB 5/7/2023 14:16:36'!
ERROR!
!TestISWSmartBuildingTest methodsFor: 'pronostico' stamp: 'NB 5/7/2023 14:16:50'!
diasLluviososEn: unTiempo

	^diasLluviosos ! !

!methodRemoval: TestISWSmartBuildingTest #diasLluviosos: stamp: 'NB 5/7/2023 14:16:50'!
diasLluviosos: unTiempo

	^diasLluviosos !

!testRun: #TestISWSmartBuildingTest #test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test02TiempoEnConstruirEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test03CostoParaConstruirConPrecioFijoEsTiempoPorPrecio stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test04TiempoEnConstruirConCapacidadVariableEnTiempoInicialUsaAreaInicial stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test05TiempoEnConstruirConCapacidadVariableEnTiempoRestanteSumaTiempoInicialMasTiempoPorCapacidadRestante stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test06TiempoEnConstruirConCapacidadVariableParaAreaInicialEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test07TiempoEnConstruirConCapacidadVariableParaAreaRestanteEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test08LaCapacidadParaDiasRestantesDebeSerMenosALaCapacidadInicial stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test09CostoParaConstruirConPrecioVariableUsaPrecioNoLluviosoParaDiasNoLluviosos stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test10CostoParaConstruirConPrecioVariableUsaPrecioLluviosoParaDiasLluviosos stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test11CostoParaConstruirConPrecioVariableUsaPrecioLluviosoYNoLluviosoComoCorresponde stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test12PrecioEnDiasLluviososEsMayorAPrecioEnDiasNoLluviosos stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test13NoSePuedeCrearEquipoCombinadoSinEquipos stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test14NoSePuedeCrearEquipoCombinadoConEquiposDirectosCompartidos stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test15NoSePuedeConstruirEquipoCombinadoConEquiposIndirectorRepetidos stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test16CostoParaConstruirDeEquipoCombinadoParaUnEquipoEsElCostoDeEseEquipo stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test17CostoParaConstruirEsLaSumaDeLosCostosDeLosEquipos stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test18TiempoDeConstruccionEsElMaximo stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test19SePuedeConsultarElTiempoPorEquipo stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test20SePuedeConsultarElCostoPorEquipo stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test21EquipoMasRapidoEsElQueMenosTarda stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test22EquipoMasBaratoEsElQueMenosCobra stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test23ConEstadoDeAnimoMaloTardaElDoble stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test24ConEstadoDeAnimoMuyBuenoTardaLaMitad stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test25NoSePuedeCrearEquipoConEstadoDeAnimoInvalido stamp: 'NB 5/7/2023 14:16:54'!
PASSED!

----SNAPSHOT----(7 May 2023 14:19:18) CuisUniversity-5706.image priorSource: 10317638!

Object subclass: #EstadoDeAnimo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

!classDefinition: #EstadoDeAnimo category: 'ISW1-2021-2C-Recuperatorio-1erParcial' stamp: 'NB 5/7/2023 14:48:43'!
Object subclass: #EstadoDeAnimo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

EstadoDeAnimo subclass: #AnimoNormal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

!classDefinition: #AnimoNormal category: 'ISW1-2021-2C-Recuperatorio-1erParcial' stamp: 'NB 5/7/2023 14:48:59'!
EstadoDeAnimo subclass: #AnimoNormal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

EstadoDeAnimo subclass: #AnimoMuyBueno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

!classDefinition: #AnimoMuyBueno category: 'ISW1-2021-2C-Recuperatorio-1erParcial' stamp: 'NB 5/7/2023 14:49:33'!
EstadoDeAnimo subclass: #AnimoMuyBueno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

EstadoDeAnimo subclass: #AnimoMalo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

!classDefinition: #AnimoMalo category: 'ISW1-2021-2C-Recuperatorio-1erParcial' stamp: 'NB 5/7/2023 14:49:37'!
EstadoDeAnimo subclass: #AnimoMalo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

!testRun: #TestISWSmartBuildingTest #test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test02TiempoEnConstruirEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test03CostoParaConstruirConPrecioFijoEsTiempoPorPrecio stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test04TiempoEnConstruirConCapacidadVariableEnTiempoInicialUsaAreaInicial stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test05TiempoEnConstruirConCapacidadVariableEnTiempoRestanteSumaTiempoInicialMasTiempoPorCapacidadRestante stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test06TiempoEnConstruirConCapacidadVariableParaAreaInicialEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test07TiempoEnConstruirConCapacidadVariableParaAreaRestanteEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test08LaCapacidadParaDiasRestantesDebeSerMenosALaCapacidadInicial stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test09CostoParaConstruirConPrecioVariableUsaPrecioNoLluviosoParaDiasNoLluviosos stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test10CostoParaConstruirConPrecioVariableUsaPrecioLluviosoParaDiasLluviosos stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test11CostoParaConstruirConPrecioVariableUsaPrecioLluviosoYNoLluviosoComoCorresponde stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test12PrecioEnDiasLluviososEsMayorAPrecioEnDiasNoLluviosos stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test13NoSePuedeCrearEquipoCombinadoSinEquipos stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test14NoSePuedeCrearEquipoCombinadoConEquiposDirectosCompartidos stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test15NoSePuedeConstruirEquipoCombinadoConEquiposIndirectorRepetidos stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test16CostoParaConstruirDeEquipoCombinadoParaUnEquipoEsElCostoDeEseEquipo stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test17CostoParaConstruirEsLaSumaDeLosCostosDeLosEquipos stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test18TiempoDeConstruccionEsElMaximo stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test19SePuedeConsultarElTiempoPorEquipo stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test20SePuedeConsultarElCostoPorEquipo stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test21EquipoMasRapidoEsElQueMenosTarda stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test22EquipoMasBaratoEsElQueMenosCobra stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test23ConEstadoDeAnimoMaloTardaElDoble stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test24ConEstadoDeAnimoMuyBuenoTardaLaMitad stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test25NoSePuedeCrearEquipoConEstadoDeAnimoInvalido stamp: 'NB 5/7/2023 14:59:50'!
PASSED!

!classRemoval: #ServicioMeteorologico stamp: 'NB 5/7/2023 15:00:04'!
Object subclass: #ServicioMeteorologico
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

!testRun: #TestISWSmartBuildingTest #test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test02TiempoEnConstruirEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test03CostoParaConstruirConPrecioFijoEsTiempoPorPrecio stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test04TiempoEnConstruirConCapacidadVariableEnTiempoInicialUsaAreaInicial stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test05TiempoEnConstruirConCapacidadVariableEnTiempoRestanteSumaTiempoInicialMasTiempoPorCapacidadRestante stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test06TiempoEnConstruirConCapacidadVariableParaAreaInicialEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test07TiempoEnConstruirConCapacidadVariableParaAreaRestanteEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test08LaCapacidadParaDiasRestantesDebeSerMenosALaCapacidadInicial stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test09CostoParaConstruirConPrecioVariableUsaPrecioNoLluviosoParaDiasNoLluviosos stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test10CostoParaConstruirConPrecioVariableUsaPrecioLluviosoParaDiasLluviosos stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test11CostoParaConstruirConPrecioVariableUsaPrecioLluviosoYNoLluviosoComoCorresponde stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test12PrecioEnDiasLluviososEsMayorAPrecioEnDiasNoLluviosos stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test13NoSePuedeCrearEquipoCombinadoSinEquipos stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test14NoSePuedeCrearEquipoCombinadoConEquiposDirectosCompartidos stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test15NoSePuedeConstruirEquipoCombinadoConEquiposIndirectorRepetidos stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test16CostoParaConstruirDeEquipoCombinadoParaUnEquipoEsElCostoDeEseEquipo stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test17CostoParaConstruirEsLaSumaDeLosCostosDeLosEquipos stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test18TiempoDeConstruccionEsElMaximo stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test19SePuedeConsultarElTiempoPorEquipo stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test20SePuedeConsultarElCostoPorEquipo stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test21EquipoMasRapidoEsElQueMenosTarda stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test22EquipoMasBaratoEsElQueMenosCobra stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test23ConEstadoDeAnimoMaloTardaElDoble stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test24ConEstadoDeAnimoMuyBuenoTardaLaMitad stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test25NoSePuedeCrearEquipoConEstadoDeAnimoInvalido stamp: 'NB 5/7/2023 15:00:06'!
PASSED!

----SNAPSHOT----(7 May 2023 15:00:08) CuisUniversity-5706.image priorSource: 10368869!
!PrecioDependienteDeClima methodsFor: 'initialization' stamp: 'NB 5/7/2023 15:10:05'!
initializeEnDiasNoLluviososDe: unPrecioParaDiasNoLluviosos yEnDiasLluviososDe: unPrecioParaDiasLluviosos conCantidadDeDiasLluviosos: unServicioMeteorologico 
	
	precioParaDiasNoLluviosos := unPrecioParaDiasNoLluviosos.
	precioParaDiasLluviosos := unPrecioParaDiasLluviosos.
	servicioMeteorologico := unServicioMeteorologico.! !
!PrecioDependienteDeClima class methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 15:10:06' prior: 50655010!
enDiasNoLluviososDe: unPrecioParaDiasNoLluviosos yEnDiasLluviososDe: unPrecioParaDiasLluviosos usando: unServicioMeteorologico 
	
	self assert: unPrecioParaDiasLluviosos esMayorA: unPrecioParaDiasNoLluviosos.
	
	^self new initializeEnDiasNoLluviososDe: unPrecioParaDiasNoLluviosos yEnDiasLluviososDe: unPrecioParaDiasLluviosos conCantidadDeDiasLluviosos: unServicioMeteorologico ! !

!methodRemoval: PrecioDependienteDeClima #initializeEnDiasNoLluviososDe:yEnDiasLluviososDe:usando: stamp: 'NB 5/7/2023 15:10:06'!
initializeEnDiasNoLluviososDe: unPrecioParaDiasNoLluviosos yEnDiasLluviososDe: unPrecioParaDiasLluviosos usando: unServicioMeteorologico 
	
	precioParaDiasNoLluviosos := unPrecioParaDiasNoLluviosos.
	precioParaDiasLluviosos := unPrecioParaDiasLluviosos.
	servicioMeteorologico := unServicioMeteorologico.!

!classDefinition: #PrecioDependienteDeClima category: 'ISW1-2021-2C-Recuperatorio-1erParcial' stamp: 'NB 5/7/2023 15:11:58'!
PrecioDeConstruccion subclass: #PrecioDependienteDeClima
	instanceVariableNames: 'precioParaDiasNoLluviosos precioParaDiasLluviosos servicioMeteorologico diasLluviosos1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!
!PrecioDependienteDeClima methodsFor: 'precios' stamp: 'NB 5/7/2023 15:11:57' prior: 50654988 overrides: 50654950!
precioPara: unTiempo 
	
	| diasNoLluviosos |
	
	diasNoLluviosos := unTiempo - diasLluviosos1.
	
	^precioParaDiasNoLluviosos * diasNoLluviosos + (precioParaDiasLluviosos * diasLluviosos1)
! !
!PrecioDependienteDeClima methodsFor: 'initialization' stamp: 'NB 5/7/2023 15:12:29' prior: 50655961!
initializeEnDiasNoLluviososDe: unPrecioParaDiasNoLluviosos yEnDiasLluviososDe: unPrecioParaDiasLluviosos conCantidadDeDiasLluviosos: cantidadDeDiasLluviosos 
	
	precioParaDiasNoLluviosos := unPrecioParaDiasNoLluviosos.
	precioParaDiasLluviosos := unPrecioParaDiasLluviosos.
	diasLluviosos1 := cantidadDeDiasLluviosos.! !
!PrecioDependienteDeClima class methodsFor: 'instance creation' stamp: 'NB 5/7/2023 15:13:19'!
enDiasNoLluviososDe: unPrecioParaDiasNoLluviosos yEnDiasLluviososDe: unPrecioParaDiasLluviosos conCantidadDeDiasLluviosos: unServicioMeteorologico 
	
	self assert: unPrecioParaDiasLluviosos esMayorA: unPrecioParaDiasNoLluviosos.
	
	^self new initializeEnDiasNoLluviososDe: unPrecioParaDiasNoLluviosos yEnDiasLluviososDe: unPrecioParaDiasLluviosos conCantidadDeDiasLluviosos: unServicioMeteorologico ! !
!TestISWSmartBuildingTest methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 15:13:19' prior: 50654232!
test10CostoParaConstruirConPrecioVariableUsaPrecioLluviosoParaDiasLluviosos

	| equipoDeTrabajo |
	
	diasLluviosos := 1 * day.
	
	equipoDeTrabajo := EquipoSimple
		construyendoCon: (CapacidadFija de: 25 * meter * meter / day)
		a: (PrecioDependienteDeClima enDiasNoLluviososDe: 1000 * peso / day yEnDiasLluviososDe: 1500 * peso / day conCantidadDeDiasLluviosos: self).
		
	self assert: 1500 * peso equals: (equipoDeTrabajo costoParaConstruir: 25 * meter * meter)! !
!TestISWSmartBuildingTest methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 15:13:19' prior: 50654249!
test11CostoParaConstruirConPrecioVariableUsaPrecioLluviosoYNoLluviosoComoCorresponde

	| equipoDeTrabajo |
	
	diasLluviosos := 2 * day.
	
	equipoDeTrabajo := EquipoSimple
		construyendoCon: (CapacidadFija de: 25 * meter * meter / day)
		a: (PrecioDependienteDeClima enDiasNoLluviososDe: 1000 * peso / day yEnDiasLluviososDe: 1500 * peso / day conCantidadDeDiasLluviosos: self).
		
	self assert: 1000 * peso * 3 + (1500 * peso * 2) equals: (equipoDeTrabajo costoParaConstruir: 25 * meter * meter * 5)! !
!TestISWSmartBuildingTest methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 15:13:19' prior: 50654215!
test09CostoParaConstruirConPrecioVariableUsaPrecioNoLluviosoParaDiasNoLluviosos

	| equipoDeTrabajo |
	
	diasLluviosos := 0 * day.
	
	equipoDeTrabajo := EquipoSimple
		construyendoCon: (CapacidadFija de: 25 * meter * meter / day)
		a: (PrecioDependienteDeClima enDiasNoLluviososDe: 1000 * peso / day yEnDiasLluviososDe: 1500 * peso / day conCantidadDeDiasLluviosos: self).
		
	self assert: 1000 * peso equals: (equipoDeTrabajo costoParaConstruir: 25 * meter * meter)! !
!TestISWSmartBuildingTest methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 15:13:19' prior: 50654267!
test12PrecioEnDiasLluviososEsMayorAPrecioEnDiasNoLluviosos

	self 
		should: [ PrecioDependienteDeClima enDiasNoLluviososDe: 1500 * peso / day yEnDiasLluviososDe: 1500 * peso / day conCantidadDeDiasLluviosos: self ]
		raise: Error - MessageNotUnderstood 
		withMessageText: PrecioDependienteDeClima precioDeDiaLluviosoDebeSerMayorAPrecioDeDiaNoLluviosoErrorDescription
	! !

!methodRemoval: PrecioDependienteDeClima class #enDiasNoLluviososDe:yEnDiasLluviososDe:usando: stamp: 'NB 5/7/2023 15:13:19'!
enDiasNoLluviososDe: unPrecioParaDiasNoLluviosos yEnDiasLluviososDe: unPrecioParaDiasLluviosos usando: unServicioMeteorologico 
	
	self assert: unPrecioParaDiasLluviosos esMayorA: unPrecioParaDiasNoLluviosos.
	
	^self new initializeEnDiasNoLluviososDe: unPrecioParaDiasNoLluviosos yEnDiasLluviososDe: unPrecioParaDiasLluviosos conCantidadDeDiasLluviosos: unServicioMeteorologico !
!PrecioDependienteDeClima class methodsFor: 'instance creation' stamp: 'NB 5/7/2023 15:13:32' prior: 50656040!
enDiasNoLluviososDe: unPrecioParaDiasNoLluviosos yEnDiasLluviososDe: unPrecioParaDiasLluviosos conCantidadDeDiasLluviosos: cantidadDeDiasLluviosos 
	
	self assert: unPrecioParaDiasLluviosos esMayorA: unPrecioParaDiasNoLluviosos.
	
	^self new initializeEnDiasNoLluviososDe: unPrecioParaDiasNoLluviosos yEnDiasLluviososDe: unPrecioParaDiasLluviosos conCantidadDeDiasLluviosos: cantidadDeDiasLluviosos ! !

!classDefinition: #PrecioDependienteDeClima category: 'ISW1-2021-2C-Recuperatorio-1erParcial' stamp: 'NB 5/7/2023 15:13:46'!
PrecioDeConstruccion subclass: #PrecioDependienteDeClima
	instanceVariableNames: 'precioParaDiasNoLluviosos precioParaDiasLluviosos diasLluviosos1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

PrecioDeConstruccion subclass: #PrecioDependienteDeClima
	instanceVariableNames: 'precioParaDiasNoLluviosos precioParaDiasLluviosos diasLluviosos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!

!classDefinition: #PrecioDependienteDeClima category: 'ISW1-2021-2C-Recuperatorio-1erParcial' stamp: 'NB 5/7/2023 15:13:50'!
PrecioDeConstruccion subclass: #PrecioDependienteDeClima
	instanceVariableNames: 'precioParaDiasNoLluviosos precioParaDiasLluviosos diasLluviosos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-Recuperatorio-1erParcial'!
!PrecioDependienteDeClima methodsFor: 'precios' stamp: 'NB 5/7/2023 15:13:58' prior: 50656017 overrides: 50654950!
precioPara: unTiempo 
	
	| diasNoLluviosos |
	
	diasNoLluviosos := unTiempo - diasLluviosos.
	
	^precioParaDiasNoLluviosos * diasNoLluviosos + (precioParaDiasLluviosos * diasLluviosos)
! !
!PrecioDependienteDeClima methodsFor: 'initialization' stamp: 'NB 5/7/2023 15:14:03' prior: 50656027!
initializeEnDiasNoLluviososDe: unPrecioParaDiasNoLluviosos yEnDiasLluviososDe: unPrecioParaDiasLluviosos conCantidadDeDiasLluviosos: cantidadDeDiasLluviosos 
	
	precioParaDiasNoLluviosos := unPrecioParaDiasNoLluviosos.
	precioParaDiasLluviosos := unPrecioParaDiasLluviosos.
	diasLluviosos := cantidadDeDiasLluviosos.! !

!testRun: #TestISWSmartBuildingTest #test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test02TiempoEnConstruirEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test03CostoParaConstruirConPrecioFijoEsTiempoPorPrecio stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test04TiempoEnConstruirConCapacidadVariableEnTiempoInicialUsaAreaInicial stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test05TiempoEnConstruirConCapacidadVariableEnTiempoRestanteSumaTiempoInicialMasTiempoPorCapacidadRestante stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test06TiempoEnConstruirConCapacidadVariableParaAreaInicialEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test07TiempoEnConstruirConCapacidadVariableParaAreaRestanteEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test08LaCapacidadParaDiasRestantesDebeSerMenosALaCapacidadInicial stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test09CostoParaConstruirConPrecioVariableUsaPrecioNoLluviosoParaDiasNoLluviosos stamp: 'NB 5/7/2023 15:14:06'!
ERROR!

!testRun: #TestISWSmartBuildingTest #test10CostoParaConstruirConPrecioVariableUsaPrecioLluviosoParaDiasLluviosos stamp: 'NB 5/7/2023 15:14:06'!
ERROR!

!testRun: #TestISWSmartBuildingTest #test11CostoParaConstruirConPrecioVariableUsaPrecioLluviosoYNoLluviosoComoCorresponde stamp: 'NB 5/7/2023 15:14:06'!
ERROR!

!testRun: #TestISWSmartBuildingTest #test12PrecioEnDiasLluviososEsMayorAPrecioEnDiasNoLluviosos stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test13NoSePuedeCrearEquipoCombinadoSinEquipos stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test14NoSePuedeCrearEquipoCombinadoConEquiposDirectosCompartidos stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test15NoSePuedeConstruirEquipoCombinadoConEquiposIndirectorRepetidos stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test16CostoParaConstruirDeEquipoCombinadoParaUnEquipoEsElCostoDeEseEquipo stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test17CostoParaConstruirEsLaSumaDeLosCostosDeLosEquipos stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test18TiempoDeConstruccionEsElMaximo stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test19SePuedeConsultarElTiempoPorEquipo stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test20SePuedeConsultarElCostoPorEquipo stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test21EquipoMasRapidoEsElQueMenosTarda stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test22EquipoMasBaratoEsElQueMenosCobra stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test23ConEstadoDeAnimoMaloTardaElDoble stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test24ConEstadoDeAnimoMuyBuenoTardaLaMitad stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test25NoSePuedeCrearEquipoConEstadoDeAnimoInvalido stamp: 'NB 5/7/2023 15:14:06'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test09CostoParaConstruirConPrecioVariableUsaPrecioNoLluviosoParaDiasNoLluviosos stamp: 'NB 5/7/2023 15:14:08'!
ERROR!
!TestISWSmartBuildingTest methodsFor: 'tests' stamp: 'NB 5/7/2023 15:14:49' prior: 50656094!
test09CostoParaConstruirConPrecioVariableUsaPrecioNoLluviosoParaDiasNoLluviosos

	| equipoDeTrabajo |
	
	equipoDeTrabajo := EquipoSimple
		construyendoCon: (CapacidadFija de: 25 * meter * meter / day)
		a: (PrecioDependienteDeClima enDiasNoLluviososDe: 1000 * peso / day yEnDiasLluviososDe: 1500 * peso / day conCantidadDeDiasLluviosos: 0 * day).
		
	self assert: 1000 * peso equals: (equipoDeTrabajo costoParaConstruir: 25 * meter * meter)! !
!TestISWSmartBuildingTest methodsFor: 'tests' stamp: 'NB 5/7/2023 15:14:59' prior: 50656056!
test10CostoParaConstruirConPrecioVariableUsaPrecioLluviosoParaDiasLluviosos

	| equipoDeTrabajo |

	
	equipoDeTrabajo := EquipoSimple
		construyendoCon: (CapacidadFija de: 25 * meter * meter / day)
		a: (PrecioDependienteDeClima enDiasNoLluviososDe: 1000 * peso / day yEnDiasLluviososDe: 1500 * peso / day conCantidadDeDiasLluviosos: 1 * day).
		
	self assert: 1500 * peso equals: (equipoDeTrabajo costoParaConstruir: 25 * meter * meter)! !
!TestISWSmartBuildingTest methodsFor: 'tests' stamp: 'NB 5/7/2023 15:15:11' prior: 50656074!
test11CostoParaConstruirConPrecioVariableUsaPrecioLluviosoYNoLluviosoComoCorresponde

	| equipoDeTrabajo |
	
	
	equipoDeTrabajo := EquipoSimple
		construyendoCon: (CapacidadFija de: 25 * meter * meter / day)
		a: (PrecioDependienteDeClima enDiasNoLluviososDe: 1000 * peso / day yEnDiasLluviososDe: 1500 * peso / day conCantidadDeDiasLluviosos:  2 * day).
		
	self assert: 1000 * peso * 3 + (1500 * peso * 2) equals: (equipoDeTrabajo costoParaConstruir: 25 * meter * meter * 5)! !

!testRun: #TestISWSmartBuildingTest #test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad stamp: 'NB 5/7/2023 15:15:23'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test02TiempoEnConstruirEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test03CostoParaConstruirConPrecioFijoEsTiempoPorPrecio stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test04TiempoEnConstruirConCapacidadVariableEnTiempoInicialUsaAreaInicial stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test05TiempoEnConstruirConCapacidadVariableEnTiempoRestanteSumaTiempoInicialMasTiempoPorCapacidadRestante stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test06TiempoEnConstruirConCapacidadVariableParaAreaInicialEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test07TiempoEnConstruirConCapacidadVariableParaAreaRestanteEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test08LaCapacidadParaDiasRestantesDebeSerMenosALaCapacidadInicial stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test09CostoParaConstruirConPrecioVariableUsaPrecioNoLluviosoParaDiasNoLluviosos stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test10CostoParaConstruirConPrecioVariableUsaPrecioLluviosoParaDiasLluviosos stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test11CostoParaConstruirConPrecioVariableUsaPrecioLluviosoYNoLluviosoComoCorresponde stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test12PrecioEnDiasLluviososEsMayorAPrecioEnDiasNoLluviosos stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test13NoSePuedeCrearEquipoCombinadoSinEquipos stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test14NoSePuedeCrearEquipoCombinadoConEquiposDirectosCompartidos stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test15NoSePuedeConstruirEquipoCombinadoConEquiposIndirectorRepetidos stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test16CostoParaConstruirDeEquipoCombinadoParaUnEquipoEsElCostoDeEseEquipo stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test17CostoParaConstruirEsLaSumaDeLosCostosDeLosEquipos stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test18TiempoDeConstruccionEsElMaximo stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test19SePuedeConsultarElTiempoPorEquipo stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test20SePuedeConsultarElCostoPorEquipo stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test21EquipoMasRapidoEsElQueMenosTarda stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test22EquipoMasBaratoEsElQueMenosCobra stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test23ConEstadoDeAnimoMaloTardaElDoble stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test24ConEstadoDeAnimoMuyBuenoTardaLaMitad stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test25NoSePuedeCrearEquipoConEstadoDeAnimoInvalido stamp: 'NB 5/7/2023 15:15:27'!
PASSED!

----SNAPSHOT----(7 May 2023 15:15:31) CuisUniversity-5706.image priorSource: 10377822!

!methodRemoval: TestISWSmartBuildingTest #diasLluviososEn: stamp: 'NB 5/7/2023 15:17:41'!
diasLluviososEn: unTiempo

	^diasLluviosos !

!testRun: #TestISWSmartBuildingTest #test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test02TiempoEnConstruirEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test03CostoParaConstruirConPrecioFijoEsTiempoPorPrecio stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test04TiempoEnConstruirConCapacidadVariableEnTiempoInicialUsaAreaInicial stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test05TiempoEnConstruirConCapacidadVariableEnTiempoRestanteSumaTiempoInicialMasTiempoPorCapacidadRestante stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test06TiempoEnConstruirConCapacidadVariableParaAreaInicialEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test07TiempoEnConstruirConCapacidadVariableParaAreaRestanteEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test08LaCapacidadParaDiasRestantesDebeSerMenosALaCapacidadInicial stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test09CostoParaConstruirConPrecioVariableUsaPrecioNoLluviosoParaDiasNoLluviosos stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test10CostoParaConstruirConPrecioVariableUsaPrecioLluviosoParaDiasLluviosos stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test11CostoParaConstruirConPrecioVariableUsaPrecioLluviosoYNoLluviosoComoCorresponde stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test12PrecioEnDiasLluviososEsMayorAPrecioEnDiasNoLluviosos stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test13NoSePuedeCrearEquipoCombinadoSinEquipos stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test14NoSePuedeCrearEquipoCombinadoConEquiposDirectosCompartidos stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test15NoSePuedeConstruirEquipoCombinadoConEquiposIndirectorRepetidos stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test16CostoParaConstruirDeEquipoCombinadoParaUnEquipoEsElCostoDeEseEquipo stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test17CostoParaConstruirEsLaSumaDeLosCostosDeLosEquipos stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test18TiempoDeConstruccionEsElMaximo stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test19SePuedeConsultarElTiempoPorEquipo stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test20SePuedeConsultarElCostoPorEquipo stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test21EquipoMasRapidoEsElQueMenosTarda stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test22EquipoMasBaratoEsElQueMenosCobra stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test23ConEstadoDeAnimoMaloTardaElDoble stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test24ConEstadoDeAnimoMuyBuenoTardaLaMitad stamp: 'NB 5/7/2023 15:17:45'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test25NoSePuedeCrearEquipoConEstadoDeAnimoInvalido stamp: 'NB 5/7/2023 15:17:45'!
PASSED!
!TestISWSmartBuildingTest methodsFor: 'tests' stamp: 'NB 5/7/2023 15:19:16'!
equipoDeCapacidadFijaYPrecioFijo

	^ EquipoSimple
		construyendoCon: (CapacidadFija de: 250000 * centimeter * centimeter / day)
		a: (PrecioFijo de: 1000 * peso / day)! !
!TestISWSmartBuildingTest methodsFor: 'tests' stamp: 'NB 5/7/2023 15:19:16' prior: 50654112!
test02TiempoEnConstruirEstaExpresadoEnDiasEnteros

	| equipoDeTrabajo |
	
	equipoDeTrabajo := self equipoDeCapacidadFijaYPrecioFijo.
		
	self assert: 1 * day equals: (equipoDeTrabajo tiempoEnConstruir: 25000 * centimeter * centimeter)! !
!TestISWSmartBuildingTest methodsFor: 'tests' stamp: 'NB 5/7/2023 15:19:16' prior: 50654098!
test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad

	| equipoDeTrabajo |
	
	equipoDeTrabajo := self equipoDeCapacidadFijaYPrecioFijo.
		
	self assert: 2 * day equals: (equipoDeTrabajo tiempoEnConstruir: 250000 * centimeter * centimeter * 2)! !
!TestISWSmartBuildingTest methodsFor: 'tests' stamp: 'NB 5/7/2023 15:19:16' prior: 50654125!
test03CostoParaConstruirConPrecioFijoEsTiempoPorPrecio

	| equipoDeTrabajo |
	
	equipoDeTrabajo := self equipoDeCapacidadFijaYPrecioFijo.
		
	self assert: 2000 * peso equals: (equipoDeTrabajo costoParaConstruir: 250000 * centimeter * centimeter * 2)! !

!testRun: #TestISWSmartBuildingTest #test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test02TiempoEnConstruirEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test03CostoParaConstruirConPrecioFijoEsTiempoPorPrecio stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test04TiempoEnConstruirConCapacidadVariableEnTiempoInicialUsaAreaInicial stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test05TiempoEnConstruirConCapacidadVariableEnTiempoRestanteSumaTiempoInicialMasTiempoPorCapacidadRestante stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test06TiempoEnConstruirConCapacidadVariableParaAreaInicialEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test07TiempoEnConstruirConCapacidadVariableParaAreaRestanteEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test08LaCapacidadParaDiasRestantesDebeSerMenosALaCapacidadInicial stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test09CostoParaConstruirConPrecioVariableUsaPrecioNoLluviosoParaDiasNoLluviosos stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test10CostoParaConstruirConPrecioVariableUsaPrecioLluviosoParaDiasLluviosos stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test11CostoParaConstruirConPrecioVariableUsaPrecioLluviosoYNoLluviosoComoCorresponde stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test12PrecioEnDiasLluviososEsMayorAPrecioEnDiasNoLluviosos stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test13NoSePuedeCrearEquipoCombinadoSinEquipos stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test14NoSePuedeCrearEquipoCombinadoConEquiposDirectosCompartidos stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test15NoSePuedeConstruirEquipoCombinadoConEquiposIndirectorRepetidos stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test16CostoParaConstruirDeEquipoCombinadoParaUnEquipoEsElCostoDeEseEquipo stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test17CostoParaConstruirEsLaSumaDeLosCostosDeLosEquipos stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test18TiempoDeConstruccionEsElMaximo stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test19SePuedeConsultarElTiempoPorEquipo stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test20SePuedeConsultarElCostoPorEquipo stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test21EquipoMasRapidoEsElQueMenosTarda stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test22EquipoMasBaratoEsElQueMenosCobra stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test23ConEstadoDeAnimoMaloTardaElDoble stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test24ConEstadoDeAnimoMuyBuenoTardaLaMitad stamp: 'NB 5/7/2023 15:19:19'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test25NoSePuedeCrearEquipoConEstadoDeAnimoInvalido stamp: 'NB 5/7/2023 15:19:19'!
PASSED!
!TestISWSmartBuildingTest methodsFor: 'tests' stamp: 'NB 5/7/2023 15:20:13'!
equipoDeCapacidadVariableYPrecioFijo

	^ EquipoSimple
		construyendoCon: (CapacidadVariable de: 25 * meter * meter / day losPrimeros: 10 * day yElResto: 20 * meter * meter / day)
		a: (PrecioFijo de: 1000 * peso / day)! !
!TestISWSmartBuildingTest methodsFor: 'tests' stamp: 'NB 5/7/2023 15:20:14' prior: 50654139!
test04TiempoEnConstruirConCapacidadVariableEnTiempoInicialUsaAreaInicial

	| equipoDeTrabajo |
	
	equipoDeTrabajo := self equipoDeCapacidadVariableYPrecioFijo.
		
	self assert: 10 * day equals: (equipoDeTrabajo tiempoEnConstruir: 25 * meter * meter * 10)! !
!TestISWSmartBuildingTest methodsFor: 'tests' stamp: 'NB 5/7/2023 15:20:14' prior: 50654171!
test06TiempoEnConstruirConCapacidadVariableParaAreaInicialEstaExpresadoEnDiasEnteros

	| equipoDeTrabajo |
	
	equipoDeTrabajo := self equipoDeCapacidadVariableYPrecioFijo.
		
	self assert: 1 * day equals: (equipoDeTrabajo tiempoEnConstruir: 20 * meter * meter)! !
!TestISWSmartBuildingTest methodsFor: 'tests' stamp: 'NB 5/7/2023 15:20:14' prior: 50654154!
test05TiempoEnConstruirConCapacidadVariableEnTiempoRestanteSumaTiempoInicialMasTiempoPorCapacidadRestante

	| equipoDeTrabajo |
	
	equipoDeTrabajo := self equipoDeCapacidadVariableYPrecioFijo.
		
	self assert: 11 * day equals: (equipoDeTrabajo tiempoEnConstruir: 25 * meter * meter * 10 + (20 * meter * meter))! !
!TestISWSmartBuildingTest methodsFor: 'tests' stamp: 'NB 5/7/2023 15:20:14' prior: 50654186!
test07TiempoEnConstruirConCapacidadVariableParaAreaRestanteEstaExpresadoEnDiasEnteros

	| equipoDeTrabajo |
	
	equipoDeTrabajo := self equipoDeCapacidadVariableYPrecioFijo.
		
	self assert: 11 * day equals: (equipoDeTrabajo tiempoEnConstruir: 25 * meter * meter * 10 + (1 * meter * meter))! !

!testRun: #TestISWSmartBuildingTest #test02TiempoEnConstruirEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 15:20:30'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test01TiempoEnConstruirConCapacidadFijaEsAreaSobreCapacidad stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test02TiempoEnConstruirEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test03CostoParaConstruirConPrecioFijoEsTiempoPorPrecio stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test04TiempoEnConstruirConCapacidadVariableEnTiempoInicialUsaAreaInicial stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test05TiempoEnConstruirConCapacidadVariableEnTiempoRestanteSumaTiempoInicialMasTiempoPorCapacidadRestante stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test06TiempoEnConstruirConCapacidadVariableParaAreaInicialEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test07TiempoEnConstruirConCapacidadVariableParaAreaRestanteEstaExpresadoEnDiasEnteros stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test08LaCapacidadParaDiasRestantesDebeSerMenosALaCapacidadInicial stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test09CostoParaConstruirConPrecioVariableUsaPrecioNoLluviosoParaDiasNoLluviosos stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test10CostoParaConstruirConPrecioVariableUsaPrecioLluviosoParaDiasLluviosos stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test11CostoParaConstruirConPrecioVariableUsaPrecioLluviosoYNoLluviosoComoCorresponde stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test12PrecioEnDiasLluviososEsMayorAPrecioEnDiasNoLluviosos stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test13NoSePuedeCrearEquipoCombinadoSinEquipos stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test14NoSePuedeCrearEquipoCombinadoConEquiposDirectosCompartidos stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test15NoSePuedeConstruirEquipoCombinadoConEquiposIndirectorRepetidos stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test16CostoParaConstruirDeEquipoCombinadoParaUnEquipoEsElCostoDeEseEquipo stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test17CostoParaConstruirEsLaSumaDeLosCostosDeLosEquipos stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test18TiempoDeConstruccionEsElMaximo stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test19SePuedeConsultarElTiempoPorEquipo stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test20SePuedeConsultarElCostoPorEquipo stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test21EquipoMasRapidoEsElQueMenosTarda stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test22EquipoMasBaratoEsElQueMenosCobra stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test23ConEstadoDeAnimoMaloTardaElDoble stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test24ConEstadoDeAnimoMuyBuenoTardaLaMitad stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

!testRun: #TestISWSmartBuildingTest #test25NoSePuedeCrearEquipoConEstadoDeAnimoInvalido stamp: 'NB 5/7/2023 15:20:33'!
PASSED!

----End fileIn of /Users/nico/Documents/inge1/Parciales/2021-1c/1erParcial/ISW1-2021-1C-1erParcial-11Parcial.st----!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'NB 5/7/2023 18:52:47'!
createAluminum3000RobotWithWeapon: aWeaponToBeAdded
	
	| robot |
	
	robot := self createAluminum3000.
	robot addWeapon: aWeaponToBeAdded.
	^robot.

	
	

	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 18:54:45'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 18:54:45'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 18:54:45'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 18:54:45'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 18:54:45'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 18:54:45'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 18:54:45'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 18:54:45'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 18:54:45'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 18:54:45'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 18:54:45'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 18:54:45'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 18:54:45'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 18:54:45'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 18:54:45'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 18:54:45'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 18:54:45'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 18:54:45'!
PASSED!
!Robot methodsFor: 'initialization' stamp: 'NB 5/7/2023 18:55:02' prior: 50657278!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type := aRobotType.
	life := lifePoints.
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.
	weapons := OrderedCollection new.

	! !
!Robot methodsFor: 'weapons' stamp: 'NB 5/7/2023 18:55:08' prior: 50657297!
addWeapon: aWeapon
	
	(self totalWeaponWeight + aWeapon weight) > maxWeaponWeight ifTrue: [ self signalMaxWeaponWeightExceeded ].
	
	(self totalSpeedImpact + aWeapon speedImpact) > speed ifTrue: [ self signalSpeedBelowZero ].
	
	weapons add: aWeapon.
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 18:55:09'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 18:55:09'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 18:55:09'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 18:55:09'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 18:55:09'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 18:55:09'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 18:55:09'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 18:55:09'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 18:55:09'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 18:55:09'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 18:55:09'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 18:55:09'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 18:55:09'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 18:55:09'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 18:55:09'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 18:55:09'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 18:55:09'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 18:55:09'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'NB 5/7/2023 18:55:20' prior: 50657309!
includesWeapon: aWeapon 

	^weapons includes: aWeapon ! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 18:55:21'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 18:55:21'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 18:55:21'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 18:55:21'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 18:55:21'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 18:55:21'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 18:55:21'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 18:55:21'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 18:55:21'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 18:55:21'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 18:55:21'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 18:55:21'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 18:55:21'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 18:55:21'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 18:55:21'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 18:55:21'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 18:55:21'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 18:55:21'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'NB 5/7/2023 18:55:28' prior: 50657315!
includesWeaponOfType: aWeaponType

	^weapons anySatisfy: [ :weapon | weapon type = aWeaponType ]! !
!Robot methodsFor: 'weapons' stamp: 'NB 5/7/2023 18:55:34' prior: 50657322!
removeWeapon: aWeapon 

	weapons remove: aWeapon ! !
!Robot methodsFor: 'weapons' stamp: 'NB 5/7/2023 18:55:39' prior: 50657328!
totalSpeedImpact

	| total index |

	total := 0 * kilometer / hour.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		(weapon weight > (10 * kilogram)) ifTrue: [ total := total +  weapon speedImpact ].
		index := index + 1.	
	].

	^ total.! !
!Robot methodsFor: 'weapons' stamp: 'NB 5/7/2023 18:55:45' prior: 50657341!
totalWeaponWeight

	| total index |
	
	total := 0 * kilogram.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total + weapon weight.
		index := index + 1.	
	].

	^ total.	! !
!Robot methodsFor: 'weapons' stamp: 'NB 5/7/2023 18:55:49' prior: 50657353!
weaponsCount

	^ weapons size 	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 18:55:50'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 18:55:50'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 18:55:50'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 18:55:50'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 18:55:50'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 18:55:50'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 18:55:50'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 18:55:50'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 18:55:50'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 18:55:50'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 18:55:50'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 18:55:50'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 18:55:50'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 18:55:50'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 18:55:50'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 18:55:50'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 18:55:50'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 18:55:50'!
PASSED!
!Robot methodsFor: 'attacking' stamp: 'NB 5/7/2023 18:56:07' prior: 50657287!
attack: aVictim with: aWeapon

	(weapons includes: aWeapon) 
		ifTrue: [ aWeapon attack: aVictim by: self ]
		ifFalse: [ self signalCanNotAttackWithWeaponNotBelongingToRobot ]! !
!Robot methodsFor: 'weapons' stamp: 'NB 5/7/2023 18:57:24'!
assertWeaponTobeAddedDoesNotExceedMaximumWeaponWeight: aWeapon

	^ (self totalWeaponWeight + aWeapon weight) > maxWeaponWeight ifTrue: [ self signalMaxWeaponWeightExceeded ]! !
!Robot methodsFor: 'weapons' stamp: 'NB 5/7/2023 18:57:24' prior: 50657609!
addWeapon: aWeapon
	
	self assertWeaponTobeAddedDoesNotExceedMaximumWeaponWeight: aWeapon.
	
	(self totalSpeedImpact + aWeapon speedImpact) > speed ifTrue: [ self signalSpeedBelowZero ].
	
	weapons add: aWeapon.
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 18:57:29'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 18:57:29'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 18:57:29'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 18:57:29'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 18:57:29'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 18:57:29'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 18:57:29'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 18:57:29'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 18:57:29'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 18:57:29'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 18:57:29'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 18:57:29'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 18:57:29'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 18:57:29'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 18:57:29'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 18:57:29'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 18:57:29'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 18:57:29'!
PASSED!
!Robot methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:00:32' prior: 50657859!
attack: aVictim with: aWeapon

	weapons  detect: [:weapon | weapon = aWeapon] 
			ifFound: [ aWeapon attack: aVictim by: self] 
			ifNone: [self signalCanNotAttackWithWeaponNotBelongingToRobot].

	'(weapons includes: aWeapon) 
		ifTrue: [ aWeapon attack: aVictim by: self ]
		ifFalse: [ self signalCanNotAttackWithWeaponNotBelongingToRobot ]'! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 19:00:33'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 19:00:33'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:00:33'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 19:00:33'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:00:33'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 19:00:33'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 19:00:33'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 19:00:33'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 19:00:33'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 19:00:33'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 19:00:33'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 19:00:33'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 19:00:33'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 19:00:33'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 19:00:33'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 19:00:33'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 19:00:33'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 19:00:33'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 19:00:35'!
ERROR!
!Robot methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:01:06' prior: 50657950!
attack: aVictim with: aWeapon

	weapons  detect: [:weapon | weapon = aWeapon] 
			ifFound: [:weapon | weapon attack: aVictim by: self] 
			ifNone: [self signalCanNotAttackWithWeaponNotBelongingToRobot].

	'(weapons includes: aWeapon) 
		ifTrue: [ aWeapon attack: aVictim by: self ]
		ifFalse: [ self signalCanNotAttackWithWeaponNotBelongingToRobot ]'! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 19:01:07'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 19:01:07'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:01:07'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 19:01:07'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:01:07'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 19:01:07'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 19:01:07'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 19:01:07'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 19:01:07'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 19:01:07'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 19:01:07'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 19:01:07'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 19:01:07'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 19:01:07'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 19:01:07'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 19:01:07'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 19:01:07'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 19:01:07'!
PASSED!
!Robot methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:01:13' prior: 50658032!
attack: aVictim with: aWeapon

	weapons  detect: [:weapon | weapon = aWeapon] 
			ifFound: [:weapon | weapon attack: aVictim by: self] 
			ifNone: [self signalCanNotAttackWithWeaponNotBelongingToRobot].
! !
!Robot methodsFor: 'weapons' stamp: 'NB 5/7/2023 19:03:02' prior: 50657767!
totalSpeedImpact

	^weapons inject:  0 * kilometer / hour into: [ :totalSpeed :weapon |
		(weapon weight > (10 * kilogram)) ifTrue: [ totalSpeed +  weapon speedImpact ] ifFalse: [0 * kilometer / hour].
	].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 19:03:04'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 19:03:04'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:03:04'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 19:03:04'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:03:04'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 19:03:04'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 19:03:04'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 19:03:04'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 19:03:04'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 19:03:04'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 19:03:04'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 19:03:04'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 19:03:04'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 19:03:04'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 19:03:04'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 19:03:04'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 19:03:04'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 19:03:04'!
PASSED!

----SNAPSHOT----(7 May 2023 19:03:07) CuisUniversity-5706.image priorSource: 10394939!
!Robot methodsFor: 'weapons' stamp: 'NB 5/7/2023 19:04:18' prior: 50657779!
totalWeaponWeight

	
	^weapons inject: 0 * kilogram into: [ :totalWeight :weapon | totalWeight + weapon weight].

	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 19:04:19'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 19:04:19'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:04:19'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 19:04:19'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:04:19'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 19:04:19'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 19:04:19'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 19:04:19'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 19:04:19'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 19:04:19'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 19:04:19'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 19:04:19'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 19:04:19'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 19:04:19'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 19:04:19'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 19:04:19'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 19:04:19'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 19:04:19'!
PASSED!

----SNAPSHOT----(7 May 2023 19:04:23) CuisUniversity-5706.image priorSource: 10449446!
!Robot methodsFor: 'weapons' stamp: 'NB 5/7/2023 19:05:59'!
assertWeaponToBeAddedDoesNotMakeSpeedBelowZero: aWeapon

	^ (self totalSpeedImpact + aWeapon speedImpact) > speed ifTrue: [ self signalSpeedBelowZero ]! !
!Robot methodsFor: 'weapons' stamp: 'NB 5/7/2023 19:05:59' prior: 50657875!
addWeapon: aWeapon
	
	self assertWeaponTobeAddedDoesNotExceedMaximumWeaponWeight: aWeapon.
	
	self assertWeaponToBeAddedDoesNotMakeSpeedBelowZero: aWeapon.
	
	weapons add: aWeapon.
	! !

Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Claw category: 'ISW1-2021-1C-1erParcial' stamp: 'NB 5/7/2023 19:08:06'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #HSBlaster category: 'ISW1-2021-1C-1erParcial' stamp: 'NB 5/7/2023 19:08:13'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TurboLaserCannon category: 'ISW1-2021-1C-1erParcial' stamp: 'NB 5/7/2023 19:08:26'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Claw methodsFor: 'no messages' stamp: 'NB 5/7/2023 19:10:45' overrides: 50657452!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].
	

	! !
!HSBlaster methodsFor: 'no messages' stamp: 'NB 5/7/2023 19:11:09' overrides: 50657452!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	
	type = #HSBlaster ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		].
	].! !
!TurboLaserCannon methodsFor: 'no messages' stamp: 'NB 5/7/2023 19:11:25' overrides: 50657452!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	
	type = #TurboLaserCannon ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
		].
	].! !
!Weapon methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:12:49'!
spedcialattack: aVictim by: anAttacker 	

	self subclassResponsibility ! !
!Weapon methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:13:11' prior: 50657452!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	self spedcialattack: aVictim by: anAttacker.! !
!Claw methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:13:44'!
specialattack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].
	

	! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:13:44'!
specialattack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	
	type = #HSBlaster ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		].
	].! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:13:44'!
specialattack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	
	type = #TurboLaserCannon ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
		].
	].! !
!Robot methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:13:44' prior: 50658112!
attack: aVictim with: aWeapon

	weapons  detect: [:weapon | weapon = aWeapon] 
			ifFound: [:weapon | weapon specialattack: aVictim by: self] 
			ifNone: [self signalCanNotAttackWithWeaponNotBelongingToRobot].
! !

!methodRemoval: Claw #attack:by: stamp: 'NB 5/7/2023 19:13:44'!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].
	

	!

!methodRemoval: HSBlaster #attack:by: stamp: 'NB 5/7/2023 19:13:44'!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	
	type = #HSBlaster ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		].
	].!

!methodRemoval: TurboLaserCannon #attack:by: stamp: 'NB 5/7/2023 19:13:44'!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	
	type = #TurboLaserCannon ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
		].
	].!
!Claw methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:14:20' prior: 50658387!
specialattack: aVictim by: anAttacker 	

	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].
	

	! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:14:26' prior: 50658401!
specialattack: aVictim by: anAttacker 	
	
	type = #HSBlaster ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		].
	].! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:14:30' prior: 50658420!
specialattack: aVictim by: anAttacker 	
	
	type = #TurboLaserCannon ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
		].
	].! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'NB 5/7/2023 19:14:55' prior: 50657226!
createClaw

	^ Claw new.! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'NB 5/7/2023 19:15:03' prior: 50657230!
createHSBlaster

	^ HSBlaster new.! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'NB 5/7/2023 19:15:10' prior: 50657234!
createTurboLaserCannon

	^ TurboLaserCannon new.! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:16:40' prior: 50658508!
specialattack: aVictim by: anAttacker 	
	
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		].! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:16:47' prior: 50658526!
specialattack: aVictim by: anAttacker 	
	
	
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
		].! !

!methodRemoval: Weapon #type stamp: 'NB 5/7/2023 19:17:26'!
type
	
	^type!
!Claw class methodsFor: 'no messages' stamp: 'NB 5/7/2023 19:19:19' overrides: 16785646!
new

	^self basicNew initializeWithWeight: 10 * kilogram speedImpact: 5 * kilometer / hour.! !
!Weapon methodsFor: 'initialization' stamp: 'NB 5/7/2023 19:19:50'!
initializeWithWeight: aWeight speedImpact: aSpeedImpact
	
	weight := aWeight.
	speedImpact := aSpeedImpact.
	usedTimes := 0.! !
!HSBlaster class methodsFor: 'no messages' stamp: 'NB 5/7/2023 19:20:32' overrides: 16785646!
new

	^ self basicNew 
		initializeWithWeight: 20 * kilogram speedImpact: 10 * kilometer / hour.! !
!TurboLaserCannon class methodsFor: 'no messages' stamp: 'NB 5/7/2023 19:21:08' overrides: 16785646!
new


	^ self basicNew 
		initializeWithWeight: 40 * kilogram speedImpact: 15 * kilometer / hour! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:22:11' prior: 50658557!
specialattack: aVictim by: anAttacker 	
	
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: TurboLaserCannon new ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: Claw new ].
		].! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:22:21' prior: 50658574!
specialattack: aVictim by: anAttacker 	
	
	
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: HSBlaster new ]
		].! !

!methodRemoval: Weapon class #ofType: stamp: 'NB 5/7/2023 19:22:28'!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^self new 
		initializeType: aWeaponType weight: 10 * kilogram speedImpact: 5 * kilometer / hour ].
	aWeaponType = #HSBlaster ifTrue: [ ^ self new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ self new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].

	self error: 'Invalid Weapon Type'!

!methodRemoval: Weapon #initializeType:weight:speedImpact: stamp: 'NB 5/7/2023 19:22:52'!
initializeType: aWeaponType weight: aWeight speedImpact: aSpeedImpact 
	
	type := aWeaponType.
	weight := aWeight.
	speedImpact := aSpeedImpact.
	usedTimes := 0.!

----SNAPSHOT----(7 May 2023 19:23:48) CuisUniversity-5706.image priorSource: 10451852!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 19:23:52'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 19:23:52'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:23:52'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 19:23:52'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:23:52'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 19:23:52'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 19:23:52'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 19:23:52'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 19:23:52'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 19:23:52'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 19:23:52'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 19:23:52'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 19:23:52'!
FAILURE!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 19:23:52'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 19:23:52'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 19:23:52'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 19:23:52'!
FAILURE!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 19:23:52'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 19:23:55'!
FAILURE!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 19:24:14'!
FAILURE!

!classDefinition: #Weapon category: 'ISW1-2021-1C-1erParcial' stamp: 'NB 5/7/2023 19:24:49'!
Object subclass: #Weapon
	instanceVariableNames: 'weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 19:25:14'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 19:25:14'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:25:14'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 19:25:14'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:25:14'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 19:25:14'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 19:25:14'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 19:25:14'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 19:25:14'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 19:25:14'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 19:25:14'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 19:25:14'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 19:25:14'!
FAILURE!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 19:25:14'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 19:25:14'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 19:25:14'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 19:25:14'!
FAILURE!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 19:25:14'!
ERROR!
!Robot methodsFor: 'weapons' stamp: 'NB 5/7/2023 19:29:18' prior: 50657756!
includesWeaponOfType: aWeaponType

	^weapons anySatisfy: [ :weapon | weapon isKindOf: aWeaponType ]! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'NB 5/7/2023 19:29:35' prior: 50657147!
test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createHSBlaster.
	attacker addWeapon: attackerWeapon.
	
	5 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: TurboLaserCannon).
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'NB 5/7/2023 19:29:39' prior: 50657165!
test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createHSBlaster .
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: 2 equals: attacker weaponsCount.
	self assert: (attacker includesWeapon: attackerWeapon).
	self assert: (attacker includesWeaponOfType: Claw).
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'NB 5/7/2023 19:29:43' prior: 50657200!
test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createTurboLaserCannon .
	attacker addWeapon: attackerWeapon.
	
	5 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: HSBlaster)
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 19:29:47'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 19:29:47'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:29:47'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 19:29:47'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:29:47'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 19:29:47'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 19:29:47'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 19:29:47'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 19:29:47'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 19:29:47'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 19:29:47'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 19:29:47'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 19:29:47'!
FAILURE!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 19:29:47'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 19:29:47'!
FAILURE!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 19:29:47'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 19:29:47'!
FAILURE!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 19:29:47'!
FAILURE!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 19:29:54'!
FAILURE!
!Robot methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:31:42' prior: 50658438!
attack: aVictim with: aWeapon

	weapons  detect: [:weapon | weapon = aWeapon] 
			ifFound: [:weapon | weapon attack: aVictim by: self] 
			ifNone: [self signalCanNotAttackWithWeaponNotBelongingToRobot].
! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 19:31:44'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 19:31:44'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:31:44'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 19:31:44'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:31:44'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 19:31:44'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 19:31:44'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 19:31:44'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 19:31:44'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 19:31:44'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 19:31:44'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 19:31:44'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 19:31:44'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 19:31:44'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 19:31:44'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 19:31:44'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 19:31:44'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 19:31:44'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 19:32:16'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 19:32:16'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:32:16'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 19:32:16'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:32:16'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 19:32:16'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 19:32:16'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 19:32:16'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 19:32:16'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 19:32:16'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 19:32:16'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 19:32:16'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 19:32:16'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 19:32:16'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 19:32:16'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 19:32:16'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 19:32:16'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 19:32:16'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 19:32:18'!
ERROR!
!Weapon methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:33:03'!
specialAttack: aVictim by: anAttacker 	

	self subclassResponsibility ! !
!Weapon methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:33:03' prior: 50658381!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	self specialAttack: aVictim by: anAttacker.! !

!methodRemoval: Weapon #spedcialattack:by: stamp: 'NB 5/7/2023 19:33:03'!
spedcialattack: aVictim by: anAttacker 	

	self subclassResponsibility !
!Claw methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:33:30' overrides: 50659099!
specialAttack: aVictim by: anAttacker 	

	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].
	

	! !
!HSBlaster methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:33:30' overrides: 50659099!
specialAttack: aVictim by: anAttacker 	
	
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: TurboLaserCannon new ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: Claw new ].
		].! !
!TurboLaserCannon methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:33:30' overrides: 50659099!
specialAttack: aVictim by: anAttacker 	
	
	
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: HSBlaster new ]
		].! !

!methodRemoval: Claw #specialattack:by: stamp: 'NB 5/7/2023 19:33:30'!
specialattack: aVictim by: anAttacker 	

	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].
	

	!

!methodRemoval: HSBlaster #specialattack:by: stamp: 'NB 5/7/2023 19:33:30'!
specialattack: aVictim by: anAttacker 	
	
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: TurboLaserCannon new ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: Claw new ].
		].!

!methodRemoval: TurboLaserCannon #specialattack:by: stamp: 'NB 5/7/2023 19:33:30'!
specialattack: aVictim by: anAttacker 	
	
	
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: HSBlaster new ]
		].!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 19:33:46'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 19:33:46'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:33:46'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 19:33:46'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:33:46'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 19:33:46'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 19:33:46'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 19:33:46'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 19:33:46'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 19:33:46'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 19:33:46'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 19:33:46'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 19:33:46'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 19:33:46'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 19:33:46'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 19:33:46'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 19:33:46'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 19:33:46'!
PASSED!

----SNAPSHOT----(7 May 2023 19:33:49) CuisUniversity-5706.image priorSource: 10464741!

Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Aluminum3000 category: 'ISW1-2021-1C-1erParcial' stamp: 'NB 5/7/2023 19:35:51'!
Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TankRover category: 'ISW1-2021-1C-1erParcial' stamp: 'NB 5/7/2023 19:35:59'!
Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Claw methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:36:27' prior: 50659116 overrides: 50659099!
specialAttack: aVictim by: anAttacker 	

	aVictim getAttackedByClaw: self.
	
	aVictim type = #Aluminum3000 ifTrue: [
		aVictim life: aVictim life - (25 * year).
		usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	
	aVictim type = #TankRover ifTrue: [
		aVictim life: aVictim life - (5 * year).
		anAttacker removeWeapon: self.
	].
	

	! !
!Aluminum3000 methodsFor: 'no messages' stamp: 'NB 5/7/2023 19:36:56'!
getAttackedByClaw: aClawWeapon

		! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:37:28' prior: 50659309!
getAttackedByClaw: aClawWeapon

	self life: self life - (25 * year).
	aClawWeapon	usedTimes = 2 ifTrue: [ self removeWeapon: aClawWeapon ].! !
!Weapon methodsFor: 'accesing' stamp: 'NB 5/7/2023 19:37:41'!
usedTimes
	
	^ usedTimes ! !
!TankRover methodsFor: 'no messages' stamp: 'NB 5/7/2023 19:38:03'!
getAttackedByClaw: aClawWeapon

	self life: self life - (25 * year).
	aClawWeapon	usedTimes = 2 ifTrue: [ self removeWeapon: aClawWeapon ].! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:38:33' prior: 50659325!
getAttackedByClaw: aClawWeapon

	self life: self life - (5 * year).
	self removeWeapon: aClawWeapon.! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:39:02'!
reduceLifeBy

	^ self life: self life - (25 * year)! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:39:02' prior: 50659314!
getAttackedByClaw: aClawWeapon

	self reduceLifeBy.
	aClawWeapon	usedTimes = 2 ifTrue: [ self removeWeapon: aClawWeapon ].! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:39:32'!
reduceLifeBy: aTimeLife

	^ self life: self life - (25 * year)! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:39:32' prior: 50659344!
getAttackedByClaw: aClawWeapon

	self reduceLifeBy: 25 * year.
	aClawWeapon	usedTimes = 2 ifTrue: [ self removeWeapon: aClawWeapon ].! !

!methodRemoval: Aluminum3000 #reduceLifeBy stamp: 'NB 5/7/2023 19:39:32'!
reduceLifeBy

	^ self life: self life - (25 * year)!
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:39:32' prior: 50659351!
reduceLifeBy: aTimeLife

	^ self life: self life - aTimeLife! !
!Robot methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:40:05'!
reduceLifeBy: aTimeLife

	^ self life: self life - aTimeLife! !

!methodRemoval: Aluminum3000 #reduceLifeBy: stamp: 'NB 5/7/2023 19:40:05'!
reduceLifeBy: aTimeLife

	^ self life: self life - aTimeLife!
!TankRover methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:40:20' prior: 50659333!
getAttackedByClaw: aClawWeapon

	self reduceLifeBy: 5 * year.
	self removeWeapon: aClawWeapon.! !
!Claw methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:40:35' prior: 50659295 overrides: 50659099!
specialAttack: aVictim by: anAttacker 	

	aVictim getAttackedByClaw: self.
	
	

	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 19:40:38'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 19:40:38'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:40:38'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 19:40:38'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:40:38'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 19:40:38'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 19:40:38'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 19:40:38'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 19:40:38'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 19:40:38'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 19:40:38'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 19:40:38'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 19:40:38'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 19:40:38'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 19:40:38'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 19:40:38'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 19:40:38'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 19:40:38'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 19:40:40'!
ERROR!
!Robot methodsFor: 'initialization' stamp: 'NB 5/7/2023 19:42:15'!
initializeLife: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	life := lifePoints.
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.
	weapons := OrderedCollection new.

	! !
!Aluminum3000 class methodsFor: 'no messages' stamp: 'NB 5/7/2023 19:42:51' overrides: 16785646!
new

	 ^ self basicNew 
		initializeLife: 100 * year
		speed: 90 * kilometer / hour
		maxWeaponWeight: 50 * kilogram ! !
!TankRover class methodsFor: 'no messages' stamp: 'NB 5/7/2023 19:43:37' overrides: 16785646!
new
		
		
		^ self basicNew 
		initializeLife: 100 * year
		speed: 40 * kilometer / hour
		maxWeaponWeight: 200 * kilogram! !
!RobotWarsTest methodsFor: 'robot creation' stamp: 'NB 5/7/2023 19:43:59' prior: 50657217!
createAluminum3000

	^ Aluminum3000 new! !
!RobotWarsTest methodsFor: 'robot creation' stamp: 'NB 5/7/2023 19:44:08' prior: 50657222!
createTankRover

	^ TankRover new.! !

!methodRemoval: Robot class #ofType: stamp: 'NB 5/7/2023 19:44:19'!
ofType: aRobotType

	aRobotType = #Aluminum3000 ifTrue: [ ^ self new 
		initializeType: aRobotType 
		life: 100 * year
		speed: 90 * kilometer / hour
		maxWeaponWeight: 50 * kilogram ].
	aRobotType = #TankRover ifTrue: [ ^ self new 
		initializeType: aRobotType 
		life: 100 * year
		speed: 40 * kilometer / hour
		maxWeaponWeight: 200 * kilogram ].

	self error: 'Invalid Robot Type'!

!methodRemoval: Robot #initializeType:life:speed:maxWeaponWeight: stamp: 'NB 5/7/2023 19:44:32'!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type := aRobotType.
	life := lifePoints.
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.
	weapons := OrderedCollection new.

	!

!methodRemoval: Robot #type stamp: 'NB 5/7/2023 19:44:51'!
type

	^ type	!
!HSBlaster methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:45:18' prior: 50659129 overrides: 50659099!
specialAttack: aVictim by: anAttacker 	

	aVictim getAttackedByHSBlaster: self.
	
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: TurboLaserCannon new ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: Claw new ].
		].! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:46:19'!
getAttackedByHSBlaster: aHSBlasterWeapon.
	
		
		self reduceLifeBy: 5 * year.
		aHSBlasterWeapon usedTimes = 5 ifTrue: [ 
				self removeWeapon: self.
				self addWeapon: TurboLaserCannon new ].
		! !
!Robot methodsFor: 'weapons' stamp: 'NB 5/7/2023 19:46:54'!
getAttackedByClaw: aClawWeapon

	self subclassResponsibility .! !
!Robot methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:47:15'!
getAttackedWithClaw: aClawWeapon

	self subclassResponsibility .! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:47:15' overrides: 50659556!
getAttackedWithClaw: aClawWeapon

	self reduceLifeBy: 25 * year.
	aClawWeapon	usedTimes = 2 ifTrue: [ self removeWeapon: aClawWeapon ].! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:47:15' overrides: 50659556!
getAttackedWithClaw: aClawWeapon

	self reduceLifeBy: 5 * year.
	self removeWeapon: aClawWeapon.! !
!Claw methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:47:15' prior: 50659391 overrides: 50659099!
specialAttack: aVictim by: anAttacker 	

	aVictim getAttackedWithClaw: self.
	
	

	! !

!methodRemoval: Robot #getAttackedByClaw: stamp: 'NB 5/7/2023 19:47:15'!
getAttackedByClaw: aClawWeapon

	self subclassResponsibility .!

!methodRemoval: Aluminum3000 #getAttackedByClaw: stamp: 'NB 5/7/2023 19:47:15'!
getAttackedByClaw: aClawWeapon

	self reduceLifeBy: 25 * year.
	aClawWeapon	usedTimes = 2 ifTrue: [ self removeWeapon: aClawWeapon ].!

!methodRemoval: TankRover #getAttackedByClaw: stamp: 'NB 5/7/2023 19:47:15'!
getAttackedByClaw: aClawWeapon

	self reduceLifeBy: 5 * year.
	self removeWeapon: aClawWeapon.!
!Claw methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:47:34' prior: 50659577 overrides: 50659099!
specialAttack: aVictim by: anAttacker 	

	aVictim getAttackedWithClaw: self by: anAttacker.
	
	

	! !
!Claw methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:47:43' prior: 50659600 overrides: 50659099!
specialAttack: aVictim by: anAttacker 	

	aVictim getAttackedWithClaw: self.
	
	

	! !
!Robot methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:48:36'!
getAttackedWithClaw: aClawWeapon by: by 

	self subclassResponsibility .! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:48:36' overrides: 50659612!
getAttackedWithClaw: aClawWeapon by: by 

	self reduceLifeBy: 25 * year.
	aClawWeapon	usedTimes = 2 ifTrue: [ self removeWeapon: aClawWeapon ].! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:48:36' overrides: 50659612!
getAttackedWithClaw: aClawWeapon by: by 

	self reduceLifeBy: 5 * year.
	self removeWeapon: aClawWeapon.! !
!Claw methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:48:36' prior: 50659607 overrides: 50659099!
specialAttack: aVictim by: anAttacker 	

	aVictim getAttackedWithClaw: self by: anAttacker.
	
	

	! !

!methodRemoval: Robot #getAttackedWithClaw: stamp: 'NB 5/7/2023 19:48:36'!
getAttackedWithClaw: aClawWeapon

	self subclassResponsibility .!

!methodRemoval: Aluminum3000 #getAttackedWithClaw: stamp: 'NB 5/7/2023 19:48:36'!
getAttackedWithClaw: aClawWeapon

	self reduceLifeBy: 25 * year.
	aClawWeapon	usedTimes = 2 ifTrue: [ self removeWeapon: aClawWeapon ].!

!methodRemoval: TankRover #getAttackedWithClaw: stamp: 'NB 5/7/2023 19:48:36'!
getAttackedWithClaw: aClawWeapon

	self reduceLifeBy: 5 * year.
	self removeWeapon: aClawWeapon.!
!Robot methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:49:05' prior: 50659612!
getAttackedWithClaw: aClawWeapon by: anAttacker 

	self subclassResponsibility .! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:49:17' prior: 50659618 overrides: 50659656!
getAttackedWithClaw: aClawWeapon by: anAttacker 

	self reduceLifeBy: 25 * year.
	aClawWeapon	usedTimes = 2 ifTrue: [ anAttacker removeWeapon: aClawWeapon ].! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:49:29' prior: 50659626 overrides: 50659656!
getAttackedWithClaw: aClawWeapon by: anAttacker 

	self reduceLifeBy: 5 * year.
	anAttacker removeWeapon: aClawWeapon.! !
!HSBlaster methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:49:46' prior: 50659526 overrides: 50659099!
specialAttack: aVictim by: anAttacker 	

	aVictim getAttackedWithHSBlaster: self by: anAttacker.
	
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: TurboLaserCannon new ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: Claw new ].
		].! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:50:02'!
getAttackedWithHSBlaster: aHSBlasterWeapon.
	
		
		self reduceLifeBy: 5 * year.
		aHSBlasterWeapon usedTimes = 5 ifTrue: [ 
				self removeWeapon: self.
				self addWeapon: TurboLaserCannon new ].
		! !

!methodRemoval: Aluminum3000 #getAttackedByHSBlaster: stamp: 'NB 5/7/2023 19:50:02'!
getAttackedByHSBlaster: aHSBlasterWeapon.
	
		
		self reduceLifeBy: 5 * year.
		aHSBlasterWeapon usedTimes = 5 ifTrue: [ 
				self removeWeapon: self.
				self addWeapon: TurboLaserCannon new ].
		!
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:50:19'!
getAttackedWithHSBlaster: aHSBlasterWeapon by: anAttacker
	
		
		self reduceLifeBy: 5 * year.
		aHSBlasterWeapon usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: aHSBlasterWeapon.
				anAttacker addWeapon: TurboLaserCannon new ].
		! !

!methodRemoval: Aluminum3000 #getAttackedWithHSBlaster: stamp: 'NB 5/7/2023 19:50:29'!
getAttackedWithHSBlaster: aHSBlasterWeapon.
	
		
		self reduceLifeBy: 5 * year.
		aHSBlasterWeapon usedTimes = 5 ifTrue: [ 
				self removeWeapon: self.
				self addWeapon: TurboLaserCannon new ].
		!
!TankRover methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:51:24'!
getAttackedWithHSBlaster: aHSBlasterWeapon by: anAttacker.
	
	self reduceLifeBy: 50 * year.
	self life <= (50 * year) ifTrue: [ anAttacker addWeapon: Claw new ].
	! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:51:29' prior: 50659734!
getAttackedWithHSBlaster: aHSBlasterWeapon by: anAttacker
	
	self reduceLifeBy: 50 * year.
	self life <= (50 * year) ifTrue: [ anAttacker addWeapon: Claw new ].
	! !
!HSBlaster methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:51:42' prior: 50659679 overrides: 50659099!
specialAttack: aVictim by: anAttacker 	

	aVictim getAttackedWithHSBlaster: self by: anAttacker.
	! !
!TurboLaserCannon methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:52:13' prior: 50659145 overrides: 50659099!
specialAttack: aVictim by: anAttacker 	
	
	aVictim getAttackedWithTurboLaserCannon: self by: anAttacker.
	
	
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: HSBlaster new ]
		].! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:53:01'!
getAttackedWithTurboLaserCannon: aTurboLaserCannon by: anAttacker
	
	
		self reduceLifeBy: (100 * year).
		aTurboLaserCannon usedTimes = 10 ifTrue: [ anAttacker removeWeapon: aTurboLaserCannon ]
		! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'NB 5/7/2023 19:53:51'!
getAttackedWithTurboLaserCannon: aTurboLaserCannon by: anAttacker
	
	
		self reduceLifeBy: (100 * year).
		aTurboLaserCannon usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: aTurboLaserCannon.
				anAttacker addWeapon: HSBlaster new ]
		
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 19:53:54'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 19:53:54'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:53:54'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 19:53:54'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:53:54'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 19:53:54'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 19:53:54'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 19:53:54'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 19:53:54'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 19:53:54'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 19:53:54'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 19:53:54'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 19:53:54'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 19:53:54'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 19:53:54'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 19:53:54'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 19:53:54'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 19:53:54'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 19:53:56'!
ERROR!

----SNAPSHOT----(7 May 2023 19:54:00) CuisUniversity-5706.image priorSource: 10483752!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 19:54:10'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 19:54:10'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:54:10'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 19:54:10'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:54:10'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 19:54:10'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 19:54:10'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 19:54:10'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 19:54:10'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 19:54:10'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 19:54:10'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 19:54:10'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 19:54:10'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 19:54:10'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 19:54:10'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 19:54:10'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 19:54:10'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 19:54:10'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 19:54:11'!
ERROR!
!TurboLaserCannon methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:54:27' prior: 50659759 overrides: 50659099!
specialAttack: aVictim by: anAttacker 	
	
	aVictim getAttackedWithTurboLaserCannon: self by: anAttacker.
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 19:54:28'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 19:54:28'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:54:28'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 19:54:28'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:54:28'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 19:54:28'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 19:54:28'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 19:54:28'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 19:54:28'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 19:54:28'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 19:54:28'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 19:54:28'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 19:54:28'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 19:54:28'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 19:54:28'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 19:54:28'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 19:54:28'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 19:54:28'!
PASSED!

----SNAPSHOT----(7 May 2023 19:54:31) CuisUniversity-5706.image priorSource: 10502847!

!classDefinition: #Robot category: 'ISW1-2021-1C-1erParcial' stamp: 'NB 5/7/2023 19:54:35'!
Object subclass: #Robot
	instanceVariableNames: 'life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Robot methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:55:26'!
getAttackedWithHSBlaster: aHSBlasterWeapon by: anAttacker
	

	self subclassResponsibility .! !
!Robot methodsFor: 'attacking' stamp: 'NB 5/7/2023 19:55:37'!
getAttackedWithTurboLaserCannon: aTurboLaserCannon by: anAttacker

	self subclassResponsibility .! !

----SNAPSHOT----(7 May 2023 19:56:20) CuisUniversity-5706.image priorSource: 10507491!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'NB 5/7/2023 19:56:22'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'NB 5/7/2023 19:56:22'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:56:22'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'NB 5/7/2023 19:56:22'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'NB 5/7/2023 19:56:22'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'NB 5/7/2023 19:56:22'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'NB 5/7/2023 19:56:22'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'NB 5/7/2023 19:56:22'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'NB 5/7/2023 19:56:22'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'NB 5/7/2023 19:56:22'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'NB 5/7/2023 19:56:22'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'NB 5/7/2023 19:56:22'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'NB 5/7/2023 19:56:22'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'NB 5/7/2023 19:56:22'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'NB 5/7/2023 19:56:22'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'NB 5/7/2023 19:56:22'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'NB 5/7/2023 19:56:22'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'NB 5/7/2023 19:56:22'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'NB 5/7/2023 21:40:11'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'NB 5/7/2023 21:40:11'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'NB 5/7/2023 21:40:11'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'NB 5/7/2023 21:40:11'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'NB 5/7/2023 21:40:11'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'NB 5/7/2023 21:40:11'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'NB 5/7/2023 21:40:11'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'NB 5/7/2023 21:40:11'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'NB 5/7/2023 21:40:21'!
PASSED!

----SNAPSHOT----(7 May 2023 21:40:28) CuisUniversity-5706.image priorSource: 10508164!

----STARTUP---- (7 May 2023 21:40:37) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


----SNAPSHOT----(7 May 2023 21:40:44) CuisUniversity-5706.image priorSource: 10513958!

----STARTUP---- (8 May 2023 17:20:21) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


----End fileIn of /Users/nico/Documents/inge1/1parcial/ISW1-2023-1C-Parcial-1.st----!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 17:22:30'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 17:22:30'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 17:22:30'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 17:22:30'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 17:22:30'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 17:22:30'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 17:22:30'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 17:22:30'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 17:22:30'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 17:22:30'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 17:22:30'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 17:22:30'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 17:22:30'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 17:22:30'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 17:22:30'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 17:22:30'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 17:22:30'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 17:22:30'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 17:22:30'!
PASSED!

----SNAPSHOT----(8 May 2023 17:23:55) CuisUniversity-5706.image priorSource: 10514152!
!Perforadora methodsFor: 'scan' stamp: 'NB 5/8/2023 17:27:29' prior: 50660754!
calcularProfundidadDelSuelo

	^capasDeSueloDebajo inject: 0 into: [:alturaAcumulada :capa |  (capa altura) ifNotNil: [capa altura] ifNil: [0]  ].
	
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 17:27:30'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 17:27:30'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 17:27:30'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 17:27:30'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 17:27:30'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 17:27:30'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 17:27:30'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 17:27:30'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 17:27:30'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 17:27:30'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 17:27:30'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 17:27:30'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 17:27:30'!
FAILURE!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 17:27:30'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 17:27:30'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 17:27:30'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 17:27:30'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 17:27:30'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 17:27:30'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 17:27:30'!
FAILURE!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 17:28:05'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 17:28:08'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 17:28:08'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 17:28:08'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 17:28:08'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 17:28:08'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 17:28:08'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 17:28:08'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 17:28:08'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 17:28:08'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 17:28:08'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 17:28:08'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 17:28:08'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 17:28:08'!
FAILURE!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 17:28:08'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 17:28:08'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 17:28:08'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 17:28:08'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 17:28:08'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 17:28:08'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 17:28:08'!
FAILURE!
!Perforadora methodsFor: 'scan' stamp: 'NB 5/8/2023 17:29:58' prior: 50660900!
calcularProfundidadDelSuelo

	^capasDeSueloDebajo inject: 0 into: [:alturaAcumulada :capa |  ^(capa altura) ifNotNil: [capa altura] ifNil: [0]  ].
	
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 17:29:59'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 17:29:59'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 17:29:59'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 17:29:59'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 17:29:59'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 17:29:59'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 17:29:59'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 17:29:59'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 17:29:59'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 17:29:59'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 17:29:59'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 17:29:59'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 17:29:59'!
FAILURE!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 17:29:59'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 17:29:59'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 17:29:59'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 17:29:59'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 17:29:59'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 17:29:59'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 17:29:59'!
FAILURE!
!Perforadora methodsFor: 'scan' stamp: 'NB 5/8/2023 17:30:13' prior: 50661069!
calcularProfundidadDelSuelo

	^capasDeSueloDebajo inject: 0 into: [:alturaAcumulada :capa |  (capa altura) ifNotNil: [alturaAcumulada + capa altura] ifNil: [0]  ].
	
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 17:30:14'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 17:30:14'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 17:30:14'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 17:30:14'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 17:30:14'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 17:30:14'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 17:30:14'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 17:30:14'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 17:30:14'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 17:30:14'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 17:30:14'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 17:30:14'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 17:30:14'!
FAILURE!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 17:30:14'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 17:30:14'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 17:30:14'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 17:30:14'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 17:30:14'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 17:30:14'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 17:30:14'!
FAILURE!
!Perforadora methodsFor: 'scan' stamp: 'NB 5/8/2023 17:31:10' prior: 50661155!
calcularProfundidadDelSuelo

	^capasDeSueloDebajo inject: 0 into: [:alturaAcumulada :capa |  (capa altura) 
						ifNotNil: [alturaAcumulada + capa altura] 
						ifNil: [alturaAcumulada]  ].
	
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 17:31:11'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 17:31:11'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 17:31:11'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 17:31:11'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 17:31:11'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 17:31:11'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 17:31:11'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 17:31:11'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 17:31:11'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 17:31:11'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 17:31:11'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 17:31:11'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 17:31:11'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 17:31:11'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 17:31:11'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 17:31:11'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 17:31:11'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 17:31:11'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 17:31:11'!
PASSED!

----SNAPSHOT----(8 May 2023 17:31:15) CuisUniversity-5706.image priorSource: 10535889!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 17:32:28'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 17:32:28'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 17:32:28'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 17:32:28'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 17:32:28'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 17:32:28'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 17:32:28'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 17:32:28'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 17:32:28'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 17:32:28'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 17:32:28'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 17:32:28'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 17:32:28'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 17:32:28'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 17:32:28'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 17:32:28'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 17:32:28'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 17:32:28'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 17:32:28'!
PASSED!

CapaDeSuelo subclass: #CapaArenosa
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaArenosa category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 17:34:04'!
CapaDeSuelo subclass: #CapaArenosa
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #CapaTierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaTierra category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 17:34:29'!
CapaDeSuelo subclass: #CapaTierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #CapaConcreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaConcreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 17:34:36'!
CapaDeSuelo subclass: #CapaConcreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

----SNAPSHOT----(8 May 2023 17:34:44) CuisUniversity-5706.image priorSource: 10549607!
!CapaArenosa methodsFor: 'no messages' stamp: 'NB 5/8/2023 17:36:43'!
darGolpeDeTaladro: unaPerforadora
		
	
	unaPerforadora mechaPuesta = #Soft ifTrue: [ ^unaPerforadora pasarAProximaCapa ].
	unaPerforadora mechaPuesta = #Widia ifTrue: [ ^unaPerforadora pasarAProximaCapa ].
	unaPerforadora mechaPuesta = #Diamante ifTrue: [ unaPerforadora mechaPuesta: #Rota. self error: 'Se rompió' ].
	^unaPerforadora.
	
! !
!Perforadora methodsFor: 'accessing' stamp: 'NB 5/8/2023 17:37:26'!
mechaPuesta: unaMecha

	mechaPuesta:= unaMecha! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 17:37:33'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 17:37:33'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 17:37:33'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 17:37:33'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 17:37:33'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 17:37:33'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 17:37:33'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 17:37:33'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 17:37:33'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 17:37:33'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 17:37:33'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 17:37:33'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 17:37:33'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 17:37:33'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 17:37:33'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 17:37:33'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 17:37:33'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 17:37:33'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 17:37:33'!
PASSED!
!CapaConcreto methodsFor: 'no messages' stamp: 'NB 5/8/2023 17:39:22'!
darGolpeDeTaladro: unaPerforadora

	
		unaPerforadora mechaPuesta = #Soft ifTrue: [ unaPerforadora mechaPuesta: #Rota. self error: 'Se rompió'  ].
		unaPerforadora mechaPuesta = #Widia ifTrue: [ 
			unaPerforadora vecesQueGolpeoCapaActual = 3 ifTrue: [ unaPerforadora mechaPuesta: #Rota. self error: 'Se rompió' ].
			^unaPerforadora ].
		unaPerforadora mechaPuesta = #Diamante ifTrue: [ 
			unaPerforadora vecesQueGolpeoCapaActual even ifTrue: [ unaPerforadora capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			unaPerforadora capasDeSueloDebajo first sinResistencia ifTrue: [ ^unaPerforadora transformarCapaEnArenoso].
			^unaPerforadora vecesQueGolpeoCapaActual ]
	! !
!CapaTierra methodsFor: 'no messages' stamp: 'NB 5/8/2023 17:40:47'!
darGolpeDeTaladro: unaPerforadora
		

	
		unaPerforadora mechaPuesta = #Soft ifTrue: [ ^unaPerforadora ].
		unaPerforadora mechaPuesta = #Widia ifTrue: [ 
			unaPerforadora vecesQueGolpeoCapaActual = 2 ifTrue: [ ^unaPerforadora transformarCapaEnArenoso ].
			^unaPerforadora ].
		unaPerforadora mechaPuesta = #Diamante ifTrue: [ ^unaPerforadora pasarAProximaCapa ]
	! !

----SNAPSHOT----(8 May 2023 17:40:51) CuisUniversity-5706.image priorSource: 10553260!
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'NB 5/8/2023 17:43:17' prior: 50660613!
arenoso

	^CapaArenosa new! !
!CapaArenosa methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 17:43:39' overrides: 16920235!
initialize
	
	tipo := #Arenoso.
	altura := nil.! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'NB 5/8/2023 17:43:57' prior: 50660623!
tierra

	^CapaTierra new.! !
!CapaTierra methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 17:44:28' overrides: 16920235!
initialize
	
	tipo := #Tierra.
	altura := nil.! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'NB 5/8/2023 17:45:17' prior: 50660617!
concretoConResistencia: resistencia 

	^CapaConcreto new initializeConResistencia: resistencia.! !
!CapaConcreto methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 17:45:27'!
initializeConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := #Concreto.
	altura := nil.! !
!Perforadora methodsFor: 'sobre qué suelo' stamp: 'NB 5/8/2023 17:47:24'!
sueloAPerforar
	^capasDeSueloDebajo first! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 17:48:00' prior: 50660662!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	
	self sueloAPerforar darGolpeDeTaladro: self.
	
	self error: 'error'! !

----SNAPSHOT----(8 May 2023 17:48:03) CuisUniversity-5706.image priorSource: 10557521!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 17:48:04'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 17:48:04'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 17:48:04'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 17:48:04'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 17:48:04'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 17:48:04'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 17:48:04'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 17:48:04'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 17:48:04'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 17:48:04'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 17:48:04'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 17:48:04'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 17:48:04'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 17:48:04'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 17:48:04'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 17:48:04'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 17:48:04'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 17:48:04'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 17:48:04'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 17:48:08'!
ERROR!
!Perforadora methodsFor: 'accessing' stamp: 'NB 5/8/2023 17:48:34'!
mechaPuesta
	self shouldBeImplemented.
	^mechaPuesta! !
!Perforadora methodsFor: 'accessing' stamp: 'NB 5/8/2023 17:48:40' prior: 50661704!
mechaPuesta

	^mechaPuesta! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 17:48:43'!
ERROR!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 17:49:10' prior: 50661613!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	
	^self sueloAPerforar darGolpeDeTaladro: self.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 17:49:11'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 17:49:11'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 17:49:11'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 17:49:11'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 17:49:11'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 17:49:11'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 17:49:11'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 17:49:11'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 17:49:11'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 17:49:11'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 17:49:11'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 17:49:11'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 17:49:11'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 17:49:11'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 17:49:11'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 17:49:11'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 17:49:11'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 17:49:11'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 17:49:11'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 17:49:14'!
ERROR!
!Perforadora methodsFor: 'accessing' stamp: 'NB 5/8/2023 17:49:21'!
vecesQueGolpeoCapaActual
	self shouldBeImplemented.
	^vecesQueGolpeoCapaActual! !
!Perforadora methodsFor: 'accessing' stamp: 'NB 5/8/2023 17:49:25' prior: 50661805!
vecesQueGolpeoCapaActual
	^vecesQueGolpeoCapaActual! !

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 17:49:26'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 17:49:28'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 17:49:29'!
ERROR!
!Perforadora methodsFor: 'accessing' stamp: 'NB 5/8/2023 17:49:36'!
capasDeSueloDebajo
	self shouldBeImplemented.
	^capasDeSueloDebajo! !
!Perforadora methodsFor: 'accessing' stamp: 'NB 5/8/2023 17:49:40' prior: 50661829!
capasDeSueloDebajo
	
	^capasDeSueloDebajo! !

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 17:49:41'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 17:49:45'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 17:49:45'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 17:49:45'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 17:49:45'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 17:49:45'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 17:49:45'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 17:49:45'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 17:49:45'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 17:49:45'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 17:49:45'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 17:49:45'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 17:49:45'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 17:49:45'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 17:49:45'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 17:49:45'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 17:49:45'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 17:49:45'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 17:49:45'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 17:49:45'!
PASSED!

----SNAPSHOT----(8 May 2023 17:49:48) CuisUniversity-5706.image priorSource: 10559092!
!CapaArenosa methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 17:50:38' prior: 50661443!
darGolpeDeTaladro: unaPerforadora

	
		
	
	unaPerforadora mechaPuesta = #Soft ifTrue: [ ^unaPerforadora pasarAProximaCapa ].
	unaPerforadora mechaPuesta = #Widia ifTrue: [ ^unaPerforadora pasarAProximaCapa ].
	unaPerforadora mechaPuesta = #Diamante ifTrue: [ unaPerforadora mechaPuesta: #Rota. self error: 'Se rompió' ].
	^unaPerforadora.
	
! !
!CapaArenosa methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 17:52:09' prior: 50661921!
darGolpeDeTaladro: unaPerforadora

	unaPerforadora darGolpeSobreCapaArenosa: self.

	
! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 17:52:53'!
darGolpeSobreCapaArenosa: unaCapaArenosa
		
	self mechaPuesta = #Soft ifTrue: [ ^self pasarAProximaCapa ].
	self mechaPuesta = #Widia ifTrue: [ ^self pasarAProximaCapa ].
	self mechaPuesta = #Diamante ifTrue: [ self mechaPuesta: #Rota. self error: 'Se rompió' ].
	^self.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 17:53:31'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 17:53:31'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 17:53:31'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 17:53:31'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 17:53:31'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 17:53:31'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 17:53:31'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 17:53:31'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 17:53:31'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 17:53:31'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 17:53:31'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 17:53:31'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 17:53:31'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 17:53:31'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 17:53:31'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 17:53:31'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 17:53:31'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 17:53:31'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 17:53:31'!
PASSED!
!CapaConcreto methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 17:53:59' prior: 50661535!
darGolpeDeTaladro: unaPerforadora

	unaPerforadora darGolpeSobreCapaConcreto: self.

	
		unaPerforadora mechaPuesta = #Soft ifTrue: [ unaPerforadora mechaPuesta: #Rota. self error: 'Se rompió'  ].
		unaPerforadora mechaPuesta = #Widia ifTrue: [ 
			unaPerforadora vecesQueGolpeoCapaActual = 3 ifTrue: [ unaPerforadora mechaPuesta: #Rota. self error: 'Se rompió' ].
			^unaPerforadora ].
		unaPerforadora mechaPuesta = #Diamante ifTrue: [ 
			unaPerforadora vecesQueGolpeoCapaActual even ifTrue: [ unaPerforadora capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			unaPerforadora capasDeSueloDebajo first sinResistencia ifTrue: [ ^unaPerforadora transformarCapaEnArenoso].
			^unaPerforadora vecesQueGolpeoCapaActual ]
	! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 17:54:43'!
darGolpeSobreCapaConcreto: unaCapaDeConcreto

	
		self mechaPuesta = #Soft ifTrue: [ self mechaPuesta: #Rota. self error: 'Se rompió'  ].
		self mechaPuesta = #Widia ifTrue: [ 
			self vecesQueGolpeoCapaActual = 3 ifTrue: [ self mechaPuesta: #Rota. self error: 'Se rompió' ].
			^self ].
		self mechaPuesta = #Diamante ifTrue: [ 
			self vecesQueGolpeoCapaActual even ifTrue: [ self capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			self capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^self vecesQueGolpeoCapaActual ]! !
!CapaConcreto methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 17:55:10' prior: 50662027!
darGolpeDeTaladro: unaPerforadora

	unaPerforadora darGolpeSobreCapaConcreto: self.
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 17:55:13'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 17:55:13'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 17:55:13'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 17:55:13'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 17:55:13'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 17:55:13'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 17:55:13'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 17:55:13'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 17:55:13'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 17:55:13'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 17:55:13'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 17:55:13'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 17:55:13'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 17:55:13'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 17:55:13'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 17:55:13'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 17:55:13'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 17:55:13'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 17:55:13'!
PASSED!

----SNAPSHOT----(8 May 2023 17:55:15) CuisUniversity-5706.image priorSource: 10568538!
!CapaTierra methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 17:55:51' prior: 50661559!
darGolpeDeTaladro: unaPerforadora

	unaPerforadora darGolpeSobreCapaTierra: self.
	
		unaPerforadora mechaPuesta = #Soft ifTrue: [ ^unaPerforadora ].
		unaPerforadora mechaPuesta = #Widia ifTrue: [ 
			unaPerforadora vecesQueGolpeoCapaActual = 2 ifTrue: [ ^unaPerforadora transformarCapaEnArenoso ].
			^unaPerforadora ].
		unaPerforadora mechaPuesta = #Diamante ifTrue: [ ^unaPerforadora pasarAProximaCapa ]
	! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 17:56:32'!
darGolpeSobreCapaTierra: unaCapaTierra.
	
		self mechaPuesta = #Soft ifTrue: [ ^self ].
		self mechaPuesta = #Widia ifTrue: [ 
			self vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		self mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]! !
!CapaTierra methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 17:56:41' prior: 50662157!
darGolpeDeTaladro: unaPerforadora

	unaPerforadora darGolpeSobreCapaTierra: self.! !

----SNAPSHOT----(8 May 2023 17:56:45) CuisUniversity-5706.image priorSource: 10576086!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 17:56:50'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 17:56:50'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 17:56:50'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 17:56:50'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 17:56:50'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 17:56:50'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 17:56:50'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 17:56:50'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 17:56:50'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 17:56:50'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 17:56:50'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 17:56:50'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 17:56:50'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 17:56:50'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 17:56:50'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 17:56:50'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 17:56:50'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 17:56:50'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 17:56:50'!
PASSED!

----SNAPSHOT----(8 May 2023 17:58:16) CuisUniversity-5706.image priorSource: 10577268!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 17:58:41'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 17:58:41'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 17:58:41'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 17:58:41'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 17:58:41'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 17:58:41'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 17:58:41'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 17:58:41'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 17:58:41'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 17:58:41'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 17:58:41'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 17:58:41'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 17:58:41'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 17:58:41'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 17:58:41'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 17:58:41'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 17:58:42'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 17:58:42'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 17:58:42'!
PASSED!

----SNAPSHOT----(8 May 2023 17:59:35) CuisUniversity-5706.image priorSource: 10579754!

Object subclass: #Mecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Mecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 18:01:09'!
Object subclass: #Mecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

Mecha subclass: #MechaSoft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #MechaSoft category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 18:01:34'!
Mecha subclass: #MechaSoft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

Mecha subclass: #MechaWidia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #MechaWidia category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 18:01:39'!
Mecha subclass: #MechaWidia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

Mecha subclass: #MechaDiamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #MechaDiamante category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 18:01:44'!
Mecha subclass: #MechaDiamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

----SNAPSHOT----(8 May 2023 18:02:01) CuisUniversity-5706.image priorSource: 10582240!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:02:03'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:02:03'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:02:03'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:02:03'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:02:03'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:02:03'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:02:03'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:02:03'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:02:03'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:02:03'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:02:03'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:02:03'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:02:03'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:02:03'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:02:03'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:02:03'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:02:03'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:02:03'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:02:03'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:03:44' prior: 50661940!
darGolpeSobreCapaArenosa: unaCapaArenosa
	
	mechaPuesta darGolpeSobreCapaArenosa: unaCapaArenosa conPerforadora: self. 	
	self mechaPuesta = #Soft ifTrue: [ ^self pasarAProximaCapa ].
	self mechaPuesta = #Widia ifTrue: [ ^self pasarAProximaCapa ].
	self mechaPuesta = #Diamante ifTrue: [ self mechaPuesta: #Rota. self error: 'Se rompió' ].
	^self.! !
!MechaDiamante methodsFor: 'no messages' stamp: 'NB 5/8/2023 18:05:24'!
darGolpeSobreCapaArenosa: unaCapaArenosa conPerforadora: unaPerforadora

	unaPerforadora darGolpeSobreCapaArenosa: unaCapaArenosa conMechaDiamante: self.
	self mechaPuesta = #Soft ifTrue: [ ^self pasarAProximaCapa ].
	self mechaPuesta = #Widia ifTrue: [ ^self pasarAProximaCapa ].
	self mechaPuesta = #Diamante ifTrue: [ self mechaPuesta: #Rota. self error: 'Se rompió' ].
	^self.! !
!MechaDiamante methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 18:05:35' prior: 50662487!
darGolpeSobreCapaArenosa: unaCapaArenosa conPerforadora: unaPerforadora

	^unaPerforadora darGolpeSobreCapaArenosa: unaCapaArenosa conMechaDiamante: self.
	! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:06:42'!
darGolpeSobreCapaArenosa: unaCapaArenosa conMechaDiamante: unaMechaDiamante

	self mechaPuesta: #Rota. self error: 'Se rompió'.! !
!MechaSoft methodsFor: 'no messages' stamp: 'NB 5/8/2023 18:07:13'!
darGolpeSobreCapaArenosa: unaCapaArenosa conPerforadora: unaPerforadora

	^unaPerforadora darGolpeSobreCapaArenosa: unaCapaArenosa conMechaSoft: self.! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:07:30'!
darGolpeSobreCapaArenosa: unaCapaArenosa conMechaSoft: unaMechaSoft! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:07:42' prior: 50662525!
darGolpeSobreCapaArenosa: unaCapaArenosa conMechaSoft: unaMechaSoft

	^self pasarAProximaCapa ! !
!MechaWidia methodsFor: 'no messages' stamp: 'NB 5/8/2023 18:08:07'!
darGolpeSobreCapaArenosa: unaCapaArenosa conPerforadora: unaPerforadora

	^unaPerforadora darGolpeSobreCapaArenosa: unaCapaArenosa conMechaWidia: self.! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:08:23'!
darGolpeSobreCapaArenosa: unaCapaArenosa conMechaWidia: unaMechaWidia! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:08:35' prior: 50662543!
darGolpeSobreCapaArenosa: unaCapaArenosa conMechaWidia: unaMechaWidia

 		^self pasarAProximaCapa.! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:09:27' prior: 50662473!
darGolpeSobreCapaArenosa: unaCapaArenosa
	
	^mechaPuesta darGolpeSobreCapaArenosa: unaCapaArenosa conPerforadora: self. 	
	! !

Mecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #SinMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 18:09:51'!
Mecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Perforadora methodsFor: 'initialization' stamp: 'NB 5/8/2023 18:10:06' prior: 50660702!
initializeSobreSuelo: capasDeSueloAExcavarInicialmente

	capasDeSueloDebajo := capasDeSueloAExcavarInicialmente.
	vecesQueGolpeoCapaActual := 0.
	container := OrderedCollection new.
	mechaPuesta := SinMecha new.! !
!Perforadora methodsFor: 'accessing' stamp: 'NB 5/8/2023 18:11:27' prior: 50660723!
sinMecha

	^mechaPuesta isKindOf: SinMecha.! !

!classDefinition: #MechaRota category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 18:12:16'!
Mecha subclass: #MechaRota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Perforadora methodsFor: 'accessing' stamp: 'NB 5/8/2023 18:12:01' prior: 50660715!
conMechaRota

	^mechaPuesta isKindOf: MechaRota.! !

----SNAPSHOT----(8 May 2023 18:12:29) CuisUniversity-5706.image priorSource: 10583817!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:12:51' prior: 50662511!
darGolpeSobreCapaArenosa: unaCapaArenosa conMechaDiamante: unaMechaDiamante

	self mechaPuesta: MechaRota new. self error: 'Se rompió'.! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:13:07' prior: 50662052!
darGolpeSobreCapaConcreto: unaCapaDeConcreto

	
		self mechaPuesta = #Soft ifTrue: [ self mechaPuesta: MechaRota new. self error: 'Se rompió'  ].
		self mechaPuesta = #Widia ifTrue: [ 
			self vecesQueGolpeoCapaActual = 3 ifTrue: [ self mechaPuesta: MechaRota new. self error: 'Se rompió' ].
			^self ].
		self mechaPuesta = #Diamante ifTrue: [ 
			self vecesQueGolpeoCapaActual even ifTrue: [ self capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			self capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^self vecesQueGolpeoCapaActual ]! !

----SNAPSHOT----(8 May 2023 18:13:19) CuisUniversity-5706.image priorSource: 10590355!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:14:15' prior: 50662611!
darGolpeSobreCapaConcreto: unaCapaDeConcreto

	mechaPuesta darGolpeSobreCapaConcreto: unaCapaDeConcreto conPerforadora: self. 	

	
		self mechaPuesta = #Soft ifTrue: [ self mechaPuesta: MechaRota new. self error: 'Se rompió'  ].
		self mechaPuesta = #Widia ifTrue: [ 
			self vecesQueGolpeoCapaActual = 3 ifTrue: [ self mechaPuesta: MechaRota new. self error: 'Se rompió' ].
			^self ].
		self mechaPuesta = #Diamante ifTrue: [ 
			self vecesQueGolpeoCapaActual even ifTrue: [ self capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			self capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^self vecesQueGolpeoCapaActual ]! !
!MechaDiamante methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 18:15:15'!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conPerforadora: unaPerforadora. 	

	^unaPerforadora darGolpeSobreCapaConcreto: unaCapaDeConcreto conMechaDiamante: self.
	! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:15:32'!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conMechaDiamante: unaMechaDiamante
	! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:16:02' prior: 50662667!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conMechaDiamante: unaMechaDiamante
	
	self vecesQueGolpeoCapaActual even ifTrue: [ self capasDeSueloDebajo first bajaUnDecimoDeResistencia].
	self capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
	^self vecesQueGolpeoCapaActual! !
!MechaDiamante methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 18:16:16' prior: 50662659!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conPerforadora: unaPerforadora

	^unaPerforadora darGolpeSobreCapaConcreto: unaCapaDeConcreto conMechaDiamante: self.
	! !
!MechaSoft methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 18:16:38'!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conPerforadora: unaPerforadora

	^unaPerforadora darGolpeSobreCapaConcreto: unaCapaDeConcreto conMechaSoft: self.! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:16:56'!
 darGolpeSobreCapaConcreto: unaCapaDeConcreto conMechaSoft: unaMechaSoft! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:16:58' prior: 50662702!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conMechaSoft: unaMechaSoft

	! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:17:09' prior: 50662708!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conMechaSoft: unaMechaSoft

	self mechaPuesta: MechaRota new. self error: 'Se rompió' 

	! !
!MechaWidia methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 18:17:38'!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conPerforadora: unaPerforadora

	^unaPerforadora darGolpeSobreCapaConcreto: unaCapaDeConcreto conMechaWidia: self.! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:18:06'!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conMechaWidia: unaMechaWidia

		
	! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:18:24' prior: 50662729!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conMechaWidia: unaMechaWidia

	self vecesQueGolpeoCapaActual = 3 ifTrue: [ self mechaPuesta: MechaRota new. self error: 'Se rompió' ].
	^self. 
	! !

----SNAPSHOT----(8 May 2023 18:18:34) CuisUniversity-5706.image priorSource: 10591399!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:18:48' prior: 50662635!
darGolpeSobreCapaConcreto: unaCapaDeConcreto

	^mechaPuesta darGolpeSobreCapaConcreto: unaCapaDeConcreto conPerforadora: self. 	

! !

----SNAPSHOT----(8 May 2023 18:18:51) CuisUniversity-5706.image priorSource: 10594978!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:20:00' prior: 50662173!
darGolpeSobreCapaTierra: unaCapaTierra.

	mechaPuesta darGolpeSobreCapaTierra: unaCapaTierra conPerforadora: self
	
		self mechaPuesta = #Soft ifTrue: [ ^self ].
		self mechaPuesta = #Widia ifTrue: [ 
			self vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		self mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]! !
!MechaDiamante methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 18:20:33'!
darGolpeSobreCapaTierra: unaCapaTierra conPerforadora: unaPerforadora

	^unaPerforadora darGolpeSobreCapaTierra: unaCapaTierra conMechaDiamante: self.
	! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:20:49'!
darGolpeSobreCapaTierra: unaCapaTierra conMechaDiamante: unaMechaDiamante

	! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:21:02' prior: 50662779!
darGolpeSobreCapaTierra: unaCapaTierra conMechaDiamante: unaMechaDiamante

	^self pasarAProximaCapa.! !
!MechaSoft methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 18:21:21'!
darGolpeSobreCapaTierra: unaCapaTierra conPerforadora: unaPerforadora

	^unaPerforadora darGolpeSobreCapaTierra: unaCapaTierra conMechaSoft: self.
	! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:21:38'!
darGolpeSobreCapaTierra: unaCapaTierra conMechaSoft: unaMechaSoft

	! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:21:50' prior: 50662798!
darGolpeSobreCapaTierra: unaCapaTierra conMechaSoft: unaMechaSoft

	^self ! !
!MechaWidia methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 18:22:18'!
darGolpeSobreCapaTierra: unaCapaTierra conPerforadora: unaPerforadora

	^unaPerforadora darGolpeSobreCapaTierra: unaCapaTierra conMechaWidia: self.! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:22:37'!
darGolpeSobreCapaTierra: unaCapaTierra conMechaWidia: unaMechaWidia

	! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:22:49' prior: 50662815!
darGolpeSobreCapaTierra: unaCapaTierra conMechaWidia: unaMechaWidia

	self vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
	^self! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:23:01' prior: 50662757!
darGolpeSobreCapaTierra: unaCapaTierra.

	^mechaPuesta darGolpeSobreCapaTierra: unaCapaTierra conPerforadora: self.
	! !

----SNAPSHOT----(8 May 2023 18:23:13) CuisUniversity-5706.image priorSource: 10595301!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:23:15'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:23:15'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:23:15'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:23:15'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:23:15'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:23:15'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:23:15'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:23:15'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:23:15'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:23:15'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:23:15'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:23:15'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:23:15'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:23:15'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:23:15'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:23:15'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:23:15'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:23:15'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:23:15'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:23:18'!
ERROR!
!Perforadora methodsFor: 'colocar mecha' stamp: 'NB 5/8/2023 18:24:02' prior: 50660742!
ponerMechaDiamante
	mechaPuesta := MechaDiamante new.! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'NB 5/8/2023 18:24:08' prior: 50660746!
ponerMechaSoft
	mechaPuesta := MechaSoft new.! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'NB 5/8/2023 18:24:15' prior: 50660750!
ponerMechaWidia
	mechaPuesta := MechaWidia new.! !

----SNAPSHOT----(8 May 2023 18:24:18) CuisUniversity-5706.image priorSource: 10597880!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:24:19'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:24:19'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:24:19'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:24:19'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:24:19'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:24:19'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:24:19'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:24:19'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:24:19'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:24:19'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:24:19'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:24:19'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:24:19'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:24:19'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:24:19'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:24:19'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:24:19'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:24:19'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:24:19'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:24:22'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:24:23'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:24:23'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:24:23'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:24:23'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:24:23'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:24:23'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:24:23'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:24:23'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:24:23'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:24:23'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:24:23'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:24:23'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:24:23'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:24:23'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:24:23'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:24:23'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:24:23'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:24:23'!
PASSED!

----SNAPSHOT----(8 May 2023 18:24:26) CuisUniversity-5706.image priorSource: 10600978!

----SNAPSHOT----(8 May 2023 18:27:13) CuisUniversity-5706.image priorSource: 10605862!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 18:28:27' prior: 50661717!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	
	^self capaDeSueloInmediata darGolpeDeTaladro: self.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:28:28'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:28:28'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:28:28'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:28:28'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:28:28'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:28:28'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:28:28'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:28:28'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:28:28'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:28:28'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:28:28'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:28:28'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:28:28'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:28:28'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:28:28'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:28:28'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:28:28'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:28:28'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:28:28'!
PASSED!

!methodRemoval: Perforadora #sueloAPerforar stamp: 'NB 5/8/2023 18:28:43'!
sueloAPerforar
	^capasDeSueloDebajo first!

----SNAPSHOT----(8 May 2023 18:28:45) CuisUniversity-5706.image priorSource: 10605950!
!CapaArenosa methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 18:34:18' overrides: 50660595!
scan

	^ 7! !
!CapaConcreto methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 18:34:28' overrides: 50660595!
scan

	^ 50. ! !
!CapaTierra methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 18:34:39' overrides: 50660595!
scan

	^ 10.! !
!CapaDeSuelo methodsFor: 'scan' stamp: 'NB 5/8/2023 18:34:52' prior: 50660595!
scan

	self subclassResponsibility ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:36:40'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:36:40'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:36:40'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:36:40'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:36:40'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:36:40'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:36:40'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:36:40'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:36:40'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:36:40'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:36:40'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:36:40'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:36:40'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:36:40'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:36:40'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:36:40'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:36:40'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:36:40'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:36:40'!
PASSED!

!methodRemoval: Perforadora #sobreSueloArenoso stamp: 'NB 5/8/2023 18:37:28'!
sobreSueloArenoso
	^capasDeSueloDebajo first esArenoso!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:37:31'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:37:31'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:37:31'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:37:31'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:37:31'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:37:31'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:37:31'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:37:31'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:37:31'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:37:31'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:37:31'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:37:31'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:37:31'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:37:31'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:37:31'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:37:31'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:37:31'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:37:31'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:37:31'!
PASSED!

!methodRemoval: Perforadora #sobreSueloConcreto stamp: 'NB 5/8/2023 18:37:41'!
sobreSueloConcreto
	^capasDeSueloDebajo first esConcreto!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:37:43'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:37:43'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:37:43'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:37:43'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:37:43'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:37:43'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:37:43'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:37:43'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:37:43'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:37:43'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:37:43'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:37:43'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:37:43'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:37:43'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:37:43'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:37:43'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:37:43'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:37:43'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:37:43'!
PASSED!

!methodRemoval: Perforadora #sobreSueloTierra stamp: 'NB 5/8/2023 18:37:52'!
sobreSueloTierra
	^capasDeSueloDebajo first esTierra!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:37:54'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:37:54'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:37:54'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:37:54'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:37:54'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:37:54'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:37:54'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:37:54'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:37:54'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:37:54'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:37:54'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:37:54'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:37:54'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:37:54'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:37:54'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:37:54'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:37:54'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:37:54'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:37:54'!
PASSED!

----SNAPSHOT----(8 May 2023 18:37:57) CuisUniversity-5706.image priorSource: 10608857!

!methodRemoval: CapaDeSuelo #esArenoso stamp: 'NB 5/8/2023 18:38:11'!
esArenoso
	^tipo = #Arenoso!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:38:16'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:38:16'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:38:16'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:38:16'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:38:16'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:38:16'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:38:16'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:38:16'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:38:16'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:38:16'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:38:16'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:38:16'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:38:16'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:38:16'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:38:16'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:38:16'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:38:16'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:38:16'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:38:16'!
PASSED!

!methodRemoval: CapaDeSuelo #esConcreto stamp: 'NB 5/8/2023 18:38:24'!
esConcreto
	^tipo = #Concreto!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:38:32'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:38:32'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:38:32'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:38:32'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:38:32'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:38:32'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:38:32'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:38:32'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:38:32'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:38:32'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:38:32'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:38:32'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:38:32'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:38:32'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:38:32'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:38:32'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:38:32'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:38:32'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:38:32'!
PASSED!

----SNAPSHOT----(8 May 2023 18:38:36) CuisUniversity-5706.image priorSource: 10619443!

!methodRemoval: CapaDeSuelo #esTierra stamp: 'NB 5/8/2023 18:38:50'!
esTierra
	^tipo = #Tierra!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:38:53'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:38:53'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:38:53'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:38:53'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:38:53'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:38:53'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:38:53'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:38:53'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:38:53'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:38:53'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:38:53'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:38:53'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:38:53'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:38:53'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:38:53'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:38:53'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:38:53'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:38:53'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:38:53'!
PASSED!
!CapaDeSuelo methodsFor: 'comparing' stamp: 'NB 5/8/2023 18:39:44' prior: 50660564 overrides: 16901772!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia]! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:39:45'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:39:45'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:39:45'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:39:45'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:39:45'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:39:45'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:39:45'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:39:45'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:39:45'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:39:45'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:39:45'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:39:45'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:39:45'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:39:45'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:39:45'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:39:45'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:39:45'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:39:45'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:39:45'!
PASSED!

!methodRemoval: CapaDeSuelo #tipo stamp: 'NB 5/8/2023 18:40:06'!
tipo

	^tipo!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:40:09'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:40:09'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:40:09'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:40:09'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:40:09'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:40:09'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:40:09'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:40:09'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:40:09'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:40:09'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:40:09'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:40:09'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:40:09'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:40:09'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:40:09'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:40:09'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:40:09'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:40:09'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:40:09'!
PASSED!

----SNAPSHOT----(8 May 2023 18:40:14) CuisUniversity-5706.image priorSource: 10624530!
!CapaDeSuelo methodsFor: 'initialization' stamp: 'NB 5/8/2023 18:41:16' prior: 50660537!
initializeArenoso
	
	altura := nil.! !
!CapaDeSuelo methodsFor: 'initialization' stamp: 'NB 5/8/2023 18:41:20' prior: 50660542!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	altura := nil.! !
!CapaDeSuelo methodsFor: 'initialization' stamp: 'NB 5/8/2023 18:41:25' prior: 50660549!
initializeTierra
	
	altura := nil.! !
!CapaArenosa methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 18:41:33' prior: 50661581 overrides: 16920235!
initialize
	
	altura := nil.! !
!CapaConcreto methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 18:41:38' prior: 50661601!
initializeConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	altura := nil.! !
!CapaTierra methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 18:41:43' prior: 50661590 overrides: 16920235!
initialize
	
	altura := nil.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:41:45'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:41:45'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:41:45'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:41:45'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:41:45'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:41:45'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:41:45'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:41:45'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:41:45'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:41:45'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:41:45'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:41:45'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:41:45'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:41:45'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:41:45'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:41:45'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:41:45'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:41:45'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:41:45'!
PASSED!

----SNAPSHOT----(8 May 2023 18:41:48) CuisUniversity-5706.image priorSource: 10632216!
!CapaDeSuelo methodsFor: 'comparing' stamp: 'NB 5/8/2023 18:42:09' prior: 50660572 overrides: 16901788!
hash

	^resistencia hash! !

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 18:42:16'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:42:19'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:42:19'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:42:19'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:42:19'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:42:19'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:42:19'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:42:19'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:42:19'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:42:19'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:42:19'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:42:19'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:42:19'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:42:19'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:42:19'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:42:19'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:42:19'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:42:19'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:42:19'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:42:19'!
PASSED!

----SNAPSHOT----(8 May 2023 18:42:22) CuisUniversity-5706.image priorSource: 10635709!
!Perforadora methodsFor: 'scan' stamp: 'NB 5/8/2023 18:43:30' prior: 50660766!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| valor acc ix |
	
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [ valor := 7 ].
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	
	acc := 0.
	ix := 1.
	
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		
		capa = tipoDeCapa ifTrue: [ ^ acc ].
		
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc.
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'NB 5/8/2023 18:43:48' prior: 50660785!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	
	| valor acc ix |
	
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [ valor := 7 ].
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	
	acc := 0.
	ix := 1.
	
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa |
		capa := capasDeSueloDebajo at: ix.
		capa = tipoDeCapa ifTrue: [ acc := acc + 1 ].
		ix := ix + 1.		
	].

	^ acc! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:43:54'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:43:54'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:43:54'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:43:54'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:43:54'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:43:54'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:43:54'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:43:54'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:43:54'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:43:54'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:43:54'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:43:54'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:43:54'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:43:54'!
FAILURE!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:43:54'!
FAILURE!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:43:54'!
FAILURE!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:43:54'!
FAILURE!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:43:54'!
FAILURE!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:43:54'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:44:10' prior: 50660439!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: CapaArenosa new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:44:20' prior: 50660452!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: CapaTierra new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:44:28' prior: 50660465!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: CapaConcreto new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:44:38' prior: 50660479!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: CapaArenosa new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:44:46' prior: 50660494!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: CapaTierra new).

	! !

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:44:47'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:44:47'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:44:48'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:44:48'!
FAILURE!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:44:55'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:44:58'!
FAILURE!
!CapaDeSuelo methodsFor: 'comparing' stamp: 'NB 5/8/2023 18:47:17' prior: 50663749 overrides: 16901772!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class)! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:47:19'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:47:19'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:47:19'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:47:19'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:47:19'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:47:19'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:47:19'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:47:19'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:47:19'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:47:19'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:47:19'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:47:19'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:47:19'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:47:19'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:47:19'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:47:19'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:47:19'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:47:19'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:47:19'!
PASSED!

----SNAPSHOT----(8 May 2023 18:47:21) CuisUniversity-5706.image priorSource: 10638585!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:48:47' prior: 50660237!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaArenosa new.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:48:51'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:48:51'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:48:51'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:48:51'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:48:51'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:48:51'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:48:51'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:48:51'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:48:51'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:48:51'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:48:51'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:48:51'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:48:51'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:48:51'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:48:51'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:48:51'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:48:51'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:48:51'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:48:51'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:49:16' prior: 50660284!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaArenosa new.
			CapaTierra new.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:49:33' prior: 50660299!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaTierra new.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: CapaDeSuelo arenoso equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:49:43' prior: 50660335!
test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaArenosa new.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota ].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:49:50' prior: 50660385!
test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaArenosa new.
			'Mica'.
			'Marmol'
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: {	'Mica'. 'Marmol'} equals: excavadora elementsInContainer
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:49:56' prior: 50660399!
test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaArenosa new.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: excavadora elementsInContainer isEmpty
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:50:01' prior: 50660411!
test12NoPuedePerforarSinMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaArenosa new.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
		
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'No puede perforar' equals: unError messageText.
			self assert: (CapaDeSuelo arenoso) equals: excavadora capaDeSueloInmediata ].	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:50:09' prior: 50660427!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:50:17' prior: 50664225!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: CapaArenosa new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:50:23' prior: 50664239!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: CapaTierra new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:50:28' prior: 50664253!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: CapaConcreto new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:50:36' prior: 50664267!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: CapaArenosa new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:50:43' prior: 50664282!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: CapaTierra new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:50:49' prior: 50660509!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !
!Perforadora methodsFor: 'cambiar capa' stamp: 'NB 5/8/2023 18:50:56' prior: 50660655!
transformarCapaEnArenoso
	capasDeSueloDebajo :=
			capasDeSueloDebajo allButFirst asOrderedCollection
			addFirst: CapaArenosa new;
			yourself! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:51:00'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:51:00'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:51:00'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:51:00'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:51:00'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:51:00'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:51:00'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:51:00'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:51:00'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:51:00'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:51:00'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:51:00'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:51:00'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:51:00'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:51:00'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:51:00'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:51:00'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:51:00'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:51:00'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:51:34' prior: 50664510!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaTierra new.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: CapaArenosa new equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:51:42' prior: 50664574!
test12NoPuedePerforarSinMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaArenosa new.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
		
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'No puede perforar' equals: unError messageText.
			self assert: (CapaArenosa new) equals: excavadora capaDeSueloInmediata ].	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:51:49' prior: 50664590!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:52:00' prior: 50664603!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: CapaArenosa new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:52:06' prior: 50664617!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: CapaTierra new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:52:13' prior: 50664631!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: CapaConcreto new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:52:18' prior: 50664645!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: CapaArenosa new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:52:25' prior: 50664660!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: CapaTierra new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 18:52:33' prior: 50664675!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:52:40'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:52:40'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:52:40'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:52:40'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:52:40'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:52:40'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:52:40'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:52:40'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:52:40'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:52:40'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:52:40'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:52:40'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:52:40'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:52:40'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:52:40'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:52:40'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:52:40'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:52:40'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:52:40'!
PASSED!

!methodRemoval: CapaDeSuelo class #arenoso stamp: 'NB 5/8/2023 18:52:49'!
arenoso

	^CapaArenosa new!

----SNAPSHOT----(8 May 2023 18:52:51) CuisUniversity-5706.image priorSource: 10647962!
!Perforadora methodsFor: 'scan' stamp: 'NB 5/8/2023 18:55:04' prior: 50664110!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	
	
	capasDeSueloDebajo inject: 0 into: [:alturaAcumulada :capa |
						capa = tipoDeCapa 
							ifTrue: [^alturaAcumulada ]
							ifFalse: [
								  (capa altura) 
						ifNotNil: [alturaAcumulada + capa altura] 
						ifNil: [alturaAcumulada] 
								]
						 ]
	
	
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'NB 5/8/2023 18:55:15' prior: 50664987!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	
	^capasDeSueloDebajo inject: 0 into: [:alturaAcumulada :capa |
						capa = tipoDeCapa 
							ifTrue: [^alturaAcumulada ]
							ifFalse: [
								  (capa altura) 
						ifNotNil: [alturaAcumulada + capa altura] 
						ifNil: [alturaAcumulada] 
								]
						 ]
	
	
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:55:18'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:55:18'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:55:18'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:55:18'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:55:18'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:55:18'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:55:18'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:55:18'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:55:18'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:55:18'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:55:18'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:55:18'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:55:18'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:55:18'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:55:18'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:55:18'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:55:18'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:55:18'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:55:18'!
PASSED!

----SNAPSHOT----(8 May 2023 18:55:21) CuisUniversity-5706.image priorSource: 10666657!
!Perforadora methodsFor: 'scan' stamp: 'NB 5/8/2023 18:56:34' prior: 50664129!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	
	^capasDeSueloDebajo count: [:capa | capa = tipoDeCapa].
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 18:56:36'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 18:56:36'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 18:56:36'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 18:56:36'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 18:56:36'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 18:56:36'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 18:56:36'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 18:56:36'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 18:56:36'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 18:56:36'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 18:56:36'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 18:56:36'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 18:56:36'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 18:56:36'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 18:56:36'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 18:56:36'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 18:56:36'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 18:56:36'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 18:56:36'!
PASSED!

----SNAPSHOT----(8 May 2023 18:56:39) CuisUniversity-5706.image priorSource: 10669988!

----SNAPSHOT----(8 May 2023 18:58:01) CuisUniversity-5706.image priorSource: 10672831!

Object subclass: #Suelo
	instanceVariableNames: 'capas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Suelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 19:07:28'!
Object subclass: #Suelo
	instanceVariableNames: 'capas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Suelo class methodsFor: 'no messages' stamp: 'NB 5/8/2023 19:08:44'!
with: capasDeSuelo

	self assertNoHayCapasDeSueloContiguasDelMismoTipo
	^self basicNew initializeWith: capasDeSuelo.! !

----SNAPSHOT----(8 May 2023 19:08:55) CuisUniversity-5706.image priorSource: 10672919!
!Suelo class methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:10:07' prior: 50665194!
with: capasDeSuelo

	self assertNoHayCapasDeSueloContiguasDelMismoTipo: capasDeSuelo.
	^self basicNew initializeWith: capasDeSuelo.! !
!Suelo class methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:10:16'!
assertNoHayCapasDeSueloContiguasDelMismoTipo: capasDeSuelo
	
	! !
!Suelo class methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:15:59' prior: 50665211!
assertNoHayCapasDeSueloContiguasDelMismoTipo: capasDeSuelo
	
	capasDeSuelo withNextDo: [:capa :capaSiguiente | capa = capaSiguiente ifTrue: [self error: 'no se puede crear un suelo con dos capas contiguas del mismo tipo']].! !
!Suelo methodsFor: 'no messages' stamp: 'NB 5/8/2023 19:16:23'!
initializeWith: capasDeSuelo

	capas := capasDeSuelo ! !

----SNAPSHOT----(8 May 2023 19:16:34) CuisUniversity-5706.image priorSource: 10673591!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 19:16:49'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 19:16:49'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 19:16:49'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 19:16:49'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 19:16:49'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 19:16:49'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 19:16:49'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 19:16:49'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 19:16:49'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 19:16:49'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 19:16:49'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 19:16:49'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 19:16:49'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 19:16:49'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 19:16:49'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 19:16:50'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 19:16:50'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 19:16:50'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 19:16:50'!
PASSED!

!classDefinition: #Perforadora category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 19:16:55'!
Object subclass: #Perforadora
	instanceVariableNames: 'mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Suelo methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:17:23'!
capaDebajo

	^capas first.! !

----SNAPSHOT----(8 May 2023 19:17:31) CuisUniversity-5706.image priorSource: 10674552!

!classDefinition: #Perforadora category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 19:17:41'!
Object subclass: #Perforadora
	instanceVariableNames: 'mechaPuesta vecesQueGolpeoCapaActual suelo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Perforadora methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:17:41' prior: 50660711!
capaDeSueloInmediata
	^suelo first! !
!Perforadora methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:17:41' prior: 50662573!
initializeSobreSuelo: capasDeSueloAExcavarInicialmente

	suelo := capasDeSueloAExcavarInicialmente.
	vecesQueGolpeoCapaActual := 0.
	container := OrderedCollection new.
	mechaPuesta := SinMecha new.! !
!Perforadora methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:17:41' prior: 50665000!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	
	^suelo inject: 0 into: [:alturaAcumulada :capa |
						capa = tipoDeCapa 
							ifTrue: [^alturaAcumulada ]
							ifFalse: [
								  (capa altura) 
						ifNotNil: [alturaAcumulada + capa altura] 
						ifNil: [alturaAcumulada] 
								]
						 ]
	
	
	
	 ! !
!Perforadora methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:17:41' prior: 50660644!
pasarAProximaCapa
	vecesQueGolpeoCapaActual := 0.
	suelo := suelo allButFirst.
	suelo ifEmpty: [^self]. 
	(suelo first isKindOf: CapaDeSuelo) ifFalse:[
			container addAll: suelo.
		]! !
!Perforadora methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:17:41' prior: 50661242!
calcularProfundidadDelSuelo

	^suelo inject: 0 into: [:alturaAcumulada :capa |  (capa altura) 
						ifNotNil: [alturaAcumulada + capa altura] 
						ifNil: [alturaAcumulada]  ].
	
	
	 ! !
!Perforadora methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:17:41' prior: 50665091!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	
	^suelo count: [:capa | capa = tipoDeCapa].
	! !
!Perforadora methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:17:41' prior: 50661834!
capasDeSueloDebajo
	
	^suelo! !
!Perforadora methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:17:41' prior: 50664690!
transformarCapaEnArenoso
	suelo :=
			suelo allButFirst asOrderedCollection
			addFirst: CapaArenosa new;
			yourself! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 19:17:43'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 19:17:43'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 19:17:43'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 19:17:43'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 19:17:43'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 19:17:43'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 19:17:43'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 19:17:43'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 19:17:43'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 19:17:44'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 19:17:44'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 19:17:44'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 19:17:44'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 19:17:44'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 19:17:44'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 19:17:44'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 19:17:44'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 19:17:44'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 19:17:44'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'NB 5/8/2023 19:18:29' prior: 50665371!
calcularProfundidadDelSuelo

	^suelo capaDebajo inject: 0 into: [:alturaAcumulada :capa |  (capa altura) 
						ifNotNil: [alturaAcumulada + capa altura] 
						ifNil: [alturaAcumulada]  ].
	
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'NB 5/8/2023 19:18:47' prior: 50665349!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	
	^suelo capaDebajo inject: 0 into: [:alturaAcumulada :capa |
						capa = tipoDeCapa 
							ifTrue: [^alturaAcumulada ]
							ifFalse: [
								  (capa altura) 
						ifNotNil: [alturaAcumulada + capa altura] 
						ifNil: [alturaAcumulada] 
								]
						 ]
	
	
	
	 ! !
!Perforadora methodsFor: 'accessing' stamp: 'NB 5/8/2023 19:19:01' prior: 50665334!
capaDeSueloInmediata
	^suelo capaDebajo ! !
!Suelo methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:19:21'!
capas

	^capas.! !
!Perforadora methodsFor: 'scan' stamp: 'NB 5/8/2023 19:19:27' prior: 50665477!
calcularProfundidadDelSuelo

	^suelo capas inject: 0 into: [:alturaAcumulada :capa |  (capa altura) 
						ifNotNil: [alturaAcumulada + capa altura] 
						ifNil: [alturaAcumulada]  ].
	
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'NB 5/8/2023 19:19:35' prior: 50665486!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	
	^suelo capas inject: 0 into: [:alturaAcumulada :capa |
						capa = tipoDeCapa 
							ifTrue: [^alturaAcumulada ]
							ifFalse: [
								  (capa altura) 
						ifNotNil: [alturaAcumulada + capa altura] 
						ifNil: [alturaAcumulada] 
								]
						 ]
	
	
	
	 ! !
!Perforadora methodsFor: 'accessing' stamp: 'NB 5/8/2023 19:20:23' prior: 50665391!
capasDeSueloDebajo
	
	^suelo capas! !

----SNAPSHOT----(8 May 2023 19:20:33) CuisUniversity-5706.image priorSource: 10677469!

----SNAPSHOT----(8 May 2023 19:20:56) CuisUniversity-5706.image priorSource: 10684229!
!Perforadora methodsFor: 'scan' stamp: 'NB 5/8/2023 19:21:43' prior: 50665380!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	
	^suelo contarCapas: tipoDeCapa.  
	! !
!Suelo methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:22:03'!
contarCapas: tipoDeCapa

	^ capas	count: [:capa | capa = tipoDeCapa].! !
!Suelo methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:22:41'!
profundidad

	^capas inject: 0 into: [:alturaAcumulada :capa |  (capa altura) 
						ifNotNil: [alturaAcumulada + capa altura] 
						ifNil: [alturaAcumulada]  ].! !

----SNAPSHOT----(8 May 2023 19:26:07) CuisUniversity-5706.image priorSource: 10684317!
!Perforadora methodsFor: 'scan' stamp: 'NB 5/8/2023 19:26:31' prior: 50665507!
calcularProfundidadDelSuelo

	^suelo profundidad
	
	
	 ! !
!Suelo methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:26:55'!
profundidadDelSueloHasta: tipoDeCapa
	
	
	^capas inject: 0 into: [:alturaAcumulada :capa |
						capa = tipoDeCapa 
							ifTrue: [^alturaAcumulada ]
							ifFalse: [
								  (capa altura) 
						ifNotNil: [alturaAcumulada + capa altura] 
						ifNil: [alturaAcumulada] 
								]
						 ]
	
	! !

----SNAPSHOT----(8 May 2023 19:27:00) CuisUniversity-5706.image priorSource: 10685157!
!Perforadora methodsFor: 'scan' stamp: 'NB 5/8/2023 19:27:19' prior: 50665516!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	
	^suelo profundidadDelSueloHasta: tipoDeCapa.
	
	
	
	 ! !
!Suelo methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:34:23'!
pasarAProximaCapa: unaPerforadora
	
	
	capas := capas allButFirst.
	capas ifEmpty: [^self]. 
	(capas first isKindOf: CapaDeSuelo) ifFalse:[
			unaPerforadora recogerPiedrasConTamiz.
	]! !
!Perforadora methodsFor: 'cambiar capa' stamp: 'NB 5/8/2023 19:35:07'!
recogerPiedrasConTamiz

	container addAll: suelo capas! !
!Perforadora methodsFor: 'cambiar capa' stamp: 'NB 5/8/2023 19:35:36' prior: 50665362!
pasarAProximaCapa

	vecesQueGolpeoCapaActual := 0.
	suelo pasarAProximaCapa: self.! !
!Suelo methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:36:06'!
transformarCapaEnArenoso

	capas :=
			capas allButFirst asOrderedCollection
			addFirst: CapaArenosa new;
			yourself! !
!Perforadora methodsFor: 'cambiar capa' stamp: 'NB 5/8/2023 19:36:18' prior: 50665395!
transformarCapaEnArenoso

	suelo transformarCapaEnArenoso ! !
!Perforadora methodsFor: 'cambiar capa' stamp: 'NB 5/8/2023 19:36:27' prior: 50665617!
transformarCapaEnArenoso

	^suelo transformarCapaEnArenoso ! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:38:19' prior: 50664403!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:38:24' prior: 50660252!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:38:28' prior: 50660267!
test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaDeSuelo concretoConResistencia: 5.
			CapaDeSuelo tierra.} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:38:32' prior: 50664494!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			CapaTierra new.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:38:36' prior: 50664773!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaTierra new.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: CapaArenosa new equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:38:40' prior: 50660315!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaDeSuelo concretoConResistencia: 5.	
			CapaDeSuelo tierra.
} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:38:45' prior: 50664527!
test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota ].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:38:48' prior: 50660353!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	
	self assert: (CapaDeSuelo concretoConResistencia: 5) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:38:53' prior: 50660368!
test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaDeSuelo concretoConResistencia: 5.
			CapaDeSuelo tierra.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: (CapaDeSuelo concretoConResistencia: 4) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:38:57' prior: 50664546!
test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			'Mica'.
			'Marmol'
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: {	'Mica'. 'Marmol'} equals: excavadora elementsInContainer
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:39:01' prior: 50664561!
test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: excavadora elementsInContainer isEmpty
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:39:06' prior: 50664790!
test12NoPuedePerforarSinMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
		
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'No puede perforar' equals: unError messageText.
			self assert: (CapaArenosa new) equals: excavadora capaDeSueloInmediata ].	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:39:10' prior: 50664806!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:39:16' prior: 50664819!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with:{ CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: CapaArenosa new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:39:20' prior: 50664833!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: CapaTierra new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:39:25' prior: 50664847!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: CapaConcreto new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:39:29' prior: 50664861!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: CapaArenosa new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:39:33' prior: 50664876!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with:{ CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: CapaTierra new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:39:38' prior: 50664891!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !

----SNAPSHOT----(8 May 2023 19:39:42) CuisUniversity-5706.image priorSource: 10685804!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 19:39:47'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 19:39:47'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 19:39:47'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 19:39:47'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 19:39:47'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 19:39:47'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 19:39:47'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 19:39:47'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 19:39:47'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 19:39:47'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 19:39:47'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 19:39:47'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 19:39:47'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 19:39:47'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 19:39:47'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 19:39:47'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 19:39:47'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 19:39:47'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 19:39:47'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 19:39:50'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 19:39:50'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 19:39:50'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 19:39:50'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 19:39:50'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 19:39:50'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 19:39:50'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 19:39:50'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 19:39:50'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 19:39:50'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 19:39:50'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 19:39:50'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 19:39:50'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 19:39:50'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 19:39:50'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 19:39:50'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 19:39:50'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 19:39:50'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 19:39:50'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 19:40:54' prior: 50662673!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conMechaDiamante: unaMechaDiamante
	
	self vecesQueGolpeoCapaActual even ifTrue: [ self capaDeSueloInmediata bajaUnDecimoDeResistencia].
	self capaDeSueloInmediata sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
	^self vecesQueGolpeoCapaActual! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 19:40:59'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 19:40:59'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 19:40:59'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 19:40:59'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 19:40:59'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 19:40:59'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 19:40:59'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 19:40:59'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 19:40:59'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 19:40:59'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 19:40:59'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 19:40:59'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 19:40:59'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 19:40:59'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 19:40:59'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 19:40:59'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 19:40:59'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 19:40:59'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 19:40:59'!
PASSED!

!methodRemoval: Perforadora #capasDeSueloDebajo stamp: 'NB 5/8/2023 19:41:12'!
capasDeSueloDebajo
	
	^suelo capas!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 19:41:14'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 19:41:15'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 19:41:15'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 19:41:15'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 19:41:15'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 19:41:15'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 19:41:15'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 19:41:15'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 19:41:15'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 19:41:15'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 19:41:15'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 19:41:15'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 19:41:15'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 19:41:15'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 19:41:15'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 19:41:15'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 19:41:15'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 19:41:15'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 19:41:15'!
PASSED!

----SNAPSHOT----(8 May 2023 19:41:18) CuisUniversity-5706.image priorSource: 10696872!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:44:26'!
test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo

	self should: (Suelo with: {CapaArenosa new, CapaArenosa new }) 
	       raise: Error  
	       description: 'no se'. 
	
	

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:44:40' prior: 50666249!
test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo

	self should: (Suelo with: {CapaTierra new, CapaArenosa new, CapaArenosa new }) 
	       raise: Error  
	       description: 'no se'. 
	
	

	! !
!Suelo class methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:46:29'!
noSePuedeCrearSueloConDosCapasContiguasDelMismoTipoDescription


	 ^'No se puede crear un suelo con dos capas contiguas del mismo tipo'.! !

----SNAPSHOT----(8 May 2023 19:46:43) CuisUniversity-5706.image priorSource: 10707069!
!Suelo class methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:47:02' prior: 50665216!
assertNoHayCapasDeSueloContiguasDelMismoTipo: capasDeSuelo
	
	capasDeSuelo withNextDo: [:capa :capaSiguiente | capa = capaSiguiente ifTrue: [self error: self noSePuedeCrearSueloConDosCapasContiguasDelMismoTipoDescription ]].! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:47:16' prior: 50666258!
test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo

	self should: (Suelo with: {CapaTierra new, CapaArenosa new, CapaArenosa new }) 
	       raise: Error  
	       description: Suelo noSePuedeCrearSueloConDosCapasContiguasDelMismoTipoDescription.
	
	

	! !

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 19:47:17'!
ERROR!
!Suelo class methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:47:45' prior: 50666278!
assertNoHayCapasDeSueloContiguasDelMismoTipo: capasDeSuelo
	
	capasDeSuelo withNextDo: [:capa :capaSiguiente | capa = capaSiguiente ifTrue: [self error: Suelo noSePuedeCrearSueloConDosCapasContiguasDelMismoTipoDescription ]].! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 19:47:47'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 19:47:47'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 19:47:47'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 19:47:47'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 19:47:47'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 19:47:47'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 19:47:47'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 19:47:47'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 19:47:47'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 19:47:47'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 19:47:47'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 19:47:47'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 19:47:47'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 19:47:47'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 19:47:47'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 19:47:47'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 19:47:47'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 19:47:47'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 19:47:47'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 19:47:47'!
ERROR!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 19:47:47'!
ERROR!
!Suelo class methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 19:48:04' prior: 50666304!
assertNoHayCapasDeSueloContiguasDelMismoTipo: capasDeSuelo
	
	capasDeSuelo withNextDo: [:capa :capaSiguiente | capa = capaSiguiente ifTrue: [self error: self noSePuedeCrearSueloConDosCapasContiguasDelMismoTipoDescription ]].! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:48:23' prior: 50666288!
test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo

	self should: (Suelo with: {CapaTierra new. CapaArenosa new. CapaArenosa new }) 
	       raise: Error  
	       description: Suelo noSePuedeCrearSueloConDosCapasContiguasDelMismoTipoDescription.
	
	

	! !

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 19:48:24'!
ERROR!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 19:48:39'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 19:48:45'!
ERROR!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 19:48:45'!
ERROR!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:49:33' prior: 50666408!
test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo

	self should: (Suelo with: {CapaTierra new. CapaArenosa new. CapaArenosa new }) 
	       raise: Error  
	       withMessageText: Suelo noSePuedeCrearSueloConDosCapasContiguasDelMismoTipoDescription.
	
	

	! !

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 19:49:35'!
ERROR!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:50:19' prior: 50666436!
test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo

	self should: [Suelo with: {CapaTierra new. CapaArenosa new. CapaArenosa new }]
	       raise: Error  
	       withMessageText: Suelo noSePuedeCrearSueloConDosCapasContiguasDelMismoTipoDescription.
	
	

	! !

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 19:50:20'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 19:50:27'!
PASSED!

----SNAPSHOT----(8 May 2023 19:52:36) CuisUniversity-5706.image priorSource: 10707947!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 19:52:38'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 19:52:38'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 19:52:38'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 19:52:38'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 19:52:38'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 19:52:38'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 19:52:38'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 19:52:38'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 19:52:38'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 19:52:38'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 19:52:38'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 19:52:38'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 19:52:38'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 19:52:38'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 19:52:38'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 19:52:38'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 19:52:38'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 19:52:38'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 19:52:38'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 19:52:38'!
PASSED!
!Perforadora methodsFor: 'initialization' stamp: 'NB 5/8/2023 19:53:41' prior: 50665339!
initializeSobreSuelo: unSuelo

	suelo := unSuelo.
	vecesQueGolpeoCapaActual := 0.
	container := OrderedCollection new.
	mechaPuesta := SinMecha new.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 19:53:45'!
PASSED!

!methodRemoval: CapaDeSuelo #initializeArenoso stamp: 'NB 5/8/2023 19:53:58'!
initializeArenoso
	
	altura := nil.!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 19:54:01'!
PASSED!

!methodRemoval: CapaDeSuelo #initializeTierra stamp: 'NB 5/8/2023 19:54:15'!
initializeTierra
	
	altura := nil.!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 19:54:18'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 19:54:18'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 19:54:18'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 19:54:18'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 19:54:18'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 19:54:18'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 19:54:18'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 19:54:18'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 19:54:18'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 19:54:18'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 19:54:18'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 19:54:18'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 19:54:18'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 19:54:18'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 19:54:18'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 19:54:18'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 19:54:18'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 19:54:18'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 19:54:18'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 19:54:18'!
PASSED!
!CapaConcreto class methodsFor: 'no messages' stamp: 'NB 5/8/2023 19:55:39'!
resistencia: unaResistencia

	^self basicNew initializeConResistencia: unaResistencia! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:56:25' prior: 50665627!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			CapaDeSuelo tierra.
			CapaConcreto resistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:56:38' prior: 50665643!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaDeSuelo tierra.
			CapaConcreto resistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:56:47' prior: 50665658!
test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaConcreto resistencia: 5.
			CapaDeSuelo tierra.} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:57:01' prior: 50665676!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			CapaTierra new.
			CapaConcreto resistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:57:13' prior: 50665692!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaTierra new.
			CapaConcreto resistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: CapaArenosa new equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:57:23' prior: 50665709!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaConcreto resistencia: 5.	
			CapaDeSuelo tierra.
} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:57:34' prior: 50665730!
test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			CapaDeSuelo tierra.
			CapaConcreto resistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota ].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:57:43' prior: 50665749!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaDeSuelo tierra.
			CapaConcreto resistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	
	self assert: (CapaDeSuelo concretoConResistencia: 5) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:57:52' prior: 50665765!
test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaConcreto resistencia: 5.
			CapaDeSuelo tierra.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: (CapaDeSuelo concretoConResistencia: 4) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:58:01' prior: 50665840!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with:{ CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new. CapaConcreto resistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: CapaArenosa new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:58:10' prior: 50665854!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new. CapaConcreto resistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: CapaTierra new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:58:18' prior: 50665868!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new. CapaConcreto resistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: CapaConcreto new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:58:25' prior: 50665882!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new. CapaConcreto resistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: CapaArenosa new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:58:34' prior: 50665898!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with:{ CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new. CapaConcreto resistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: CapaTierra new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:58:41' prior: 50665913!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: { CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new. CapaConcreto resistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:59:06' prior: 50667091!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaDeSuelo tierra.
			CapaConcreto resistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	
	self assert: (CapaConcreto resistencia: 5) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 19:59:16' prior: 50667107!
test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaConcreto resistencia: 5.
			CapaDeSuelo tierra.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: (CapaConcreto resistencia: 4) equals: excavadora capaDeSueloInmediata

	
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 19:59:26'!
PASSED!

!methodRemoval: CapaDeSuelo class #concretoConResistencia: stamp: 'NB 5/8/2023 19:59:32'!
concretoConResistencia: resistencia 

	^CapaConcreto new initializeConResistencia: resistencia.!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 19:59:34'!
PASSED!

!methodRemoval: CapaDeSuelo #initializeConcretoConResistencia: stamp: 'NB 5/8/2023 19:59:49'!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	altura := nil.!

!methodRemoval: CapaArenosa #initialize stamp: 'NB 5/8/2023 20:00:12'!
initialize
	
	altura := nil.!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:00:14'!
PASSED!

!methodRemoval: CapaArenosa #scan stamp: 'NB 5/8/2023 20:00:34'!
scan

	^ 7!

!methodRemoval: CapaConcreto #scan stamp: 'NB 5/8/2023 20:00:44'!
scan

	^ 50. !

!methodRemoval: CapaTierra #scan stamp: 'NB 5/8/2023 20:00:49'!
scan

	^ 10.!

!methodRemoval: CapaTierra #initialize stamp: 'NB 5/8/2023 20:00:56'!
initialize
	
	altura := nil.!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:00:58'!
PASSED!

!methodRemoval: CapaDeSuelo #scan stamp: 'NB 5/8/2023 20:01:29'!
scan

	self subclassResponsibility !

----SNAPSHOT----(8 May 2023 20:01:57) CuisUniversity-5706.image priorSource: 10719316!
!CapaArenosa methodsFor: 'bajar resistencia' stamp: 'NB 5/8/2023 20:02:02' overrides: 50660576!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1! !
!CapaTierra methodsFor: 'bajar resistencia' stamp: 'NB 5/8/2023 20:02:02' overrides: 50660576!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1! !
!CapaConcreto methodsFor: 'bajar resistencia' stamp: 'NB 5/8/2023 20:02:02' overrides: 50660576!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1! !

!methodRemoval: CapaDeSuelo #bajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:02:02'!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:02:06'!
PASSED!

!methodRemoval: CapaDeSuelo #resistencia stamp: 'NB 5/8/2023 20:02:55'!
resistencia

	^ resistencia.!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:02:57'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:02:57'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:02:57'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:02:57'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:02:57'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:02:57'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:02:57'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:02:57'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:02:57'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:02:57'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:02:57'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:02:57'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:02:57'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:02:57'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:02:57'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:02:57'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:02:57'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:02:57'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:02:57'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:02:57'!
PASSED!
!CapaArenosa methodsFor: 'bajar resistencia' stamp: 'NB 5/8/2023 20:03:23' overrides: 50660581!
sinResistencia
	^resistencia = 0! !
!CapaTierra methodsFor: 'bajar resistencia' stamp: 'NB 5/8/2023 20:03:23' overrides: 50660581!
sinResistencia
	^resistencia = 0! !
!CapaConcreto methodsFor: 'bajar resistencia' stamp: 'NB 5/8/2023 20:03:23' overrides: 50660581!
sinResistencia
	^resistencia = 0! !

!methodRemoval: CapaDeSuelo #sinResistencia stamp: 'NB 5/8/2023 20:03:23'!
sinResistencia
	^resistencia = 0!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:03:24'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:03:24'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:03:24'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:03:24'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:03:24'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:03:24'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:03:24'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:03:24'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:03:24'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:03:25'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:03:25'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:03:25'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:03:25'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:03:25'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:03:25'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:03:25'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:03:25'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:03:25'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:03:25'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:03:25'!
PASSED!

!methodRemoval: CapaArenosa #bajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:04:00'!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1!

!methodRemoval: CapaArenosa #sinResistencia stamp: 'NB 5/8/2023 20:04:00'!
sinResistencia
	^resistencia = 0!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:04:02'!
PASSED!

!methodRemoval: CapaTierra #bajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:04:16'!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1!

!methodRemoval: CapaTierra #sinResistencia stamp: 'NB 5/8/2023 20:04:16'!
sinResistencia
	^resistencia = 0!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:04:19'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:04:19'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:04:19'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:04:19'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:04:19'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:04:19'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:04:19'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:04:19'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:04:19'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:04:19'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:04:19'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:04:19'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:04:19'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:04:19'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:04:19'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:04:19'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:04:19'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:04:19'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:04:19'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:04:19'!
PASSED!
!CapaDeSuelo methodsFor: 'comparing' stamp: 'NB 5/8/2023 20:05:04'!
darGolpeDeTaladro: unaPerforadora

	self subclassResponsibility .
! !
!CapaConcreto methodsFor: 'initialization' stamp: 'NB 5/8/2023 20:05:57' prior: 50663931!
initializeConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:06:03'!
PASSED!

----SNAPSHOT----(8 May 2023 20:06:07) CuisUniversity-5706.image priorSource: 10750060!

----SNAPSHOT----(8 May 2023 20:07:34) CuisUniversity-5706.image priorSource: 10767478!
!CapaDeSuelo methodsFor: 'accessing' stamp: 'NB 5/8/2023 20:10:01' overrides: 16920235!
initialize

	altura:= 0.! !
!CapaConcreto methodsFor: 'initialization' stamp: 'NB 5/8/2023 20:10:36' prior: 50668050!
initializeConResistencia: resistenciaInicial 
	
	super initialize.
	resistencia := resistenciaInicial.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:10:39'!
PASSED!

----SNAPSHOT----(8 May 2023 20:10:44) CuisUniversity-5706.image priorSource: 10767566!

----SNAPSHOT----(8 May 2023 20:10:55) CuisUniversity-5706.image priorSource: 10770506!
!Suelo methodsFor: 'profundidad' stamp: 'NB 5/8/2023 20:11:55' prior: 50665554!
profundidad

	^capas inject: 0 into: [:alturaAcumulada :capa |  alturaAcumulada + capa altura ].! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:11:57'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:11:57'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:11:57'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:11:57'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:11:57'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:11:57'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:11:57'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:11:57'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:11:57'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:11:57'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:11:57'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:11:57'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:11:57'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:11:57'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:11:57'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:11:57'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:11:57'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:11:57'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:11:57'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:11:57'!
PASSED!
!Suelo methodsFor: 'profundidad' stamp: 'NB 5/8/2023 20:12:22' prior: 50665570!
profundidadDelSueloHasta: tipoDeCapa
	
	
	^capas inject: 0 into: [:alturaAcumulada :capa |
						capa = tipoDeCapa 
							ifTrue: [^alturaAcumulada ]
							ifFalse: [
								  alturaAcumulada + capa altura
								]
						 ]
	
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:12:24'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:12:24'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:12:24'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:12:24'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:12:24'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:12:24'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:12:24'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:12:24'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:12:24'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:12:24'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:12:24'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:12:24'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:12:24'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:12:24'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:12:24'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:12:24'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:12:24'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:12:24'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:12:24'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:12:24'!
PASSED!
!Suelo methodsFor: 'profundidad' stamp: 'NB 5/8/2023 20:13:01' prior: 50668235!
profundidad

	^self profundidadDelSueloHasta: nil.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:13:02'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:13:42'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:13:45'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:13:45'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:13:45'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:13:45'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:13:45'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:13:45'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:13:45'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:13:45'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:13:45'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:13:45'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:13:45'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:13:45'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:13:45'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:13:45'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:13:45'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:13:45'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:13:46'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:13:46'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:13:46'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:13:46'!
PASSED!
!Suelo methodsFor: 'profundidad' stamp: 'NB 5/8/2023 20:17:07' prior: 50668409!
profundidad

        "Se calcula la profundidad del suelo hasta llegar al fondo. Reutilzo el mensaje que calcula hasta un tipo de capa determinado usando nil   como representando el fondo. Se podria mejor representar el fondo como una capa nula o vacia pero como esa instancia"

	^self profundidadDelSueloHasta: nil.! !

CapaDeSuelo subclass: #SinCapa
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #SinCapa category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 20:17:54'!
CapaDeSuelo subclass: #SinCapa
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!SinCapa methodsFor: 'no messages' stamp: 'NB 5/8/2023 20:18:18' overrides: 50668045!
darGolpeDeTaladro: unaPerforadora

	self error: 'No se puede excavar en una capa vacia'.! !
!Suelo methodsFor: 'initialization' stamp: 'NB 5/8/2023 20:19:01' prior: 50665226!
initializeWith: capasDeSuelo

	capas := capasDeSuelo.
	capas addLast: SinCapa new.! !
!Suelo methodsFor: 'profundidad' stamp: 'NB 5/8/2023 20:19:45' prior: 50668651!
profundidad

        "Se calcula la profundidad del suelo hasta llegar al fondo. Reutilzo el mensaje que calcula hasta un tipo de capa determinado usando nil   como representando el fondo. Se podria mejor representar el fondo como una capa nula o vacia pero como esa instancia"

	^self profundidadDelSueloHasta: SinCapa new.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:19:46'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:19:46'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:19:46'!
ERROR!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:19:46'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:19:46'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:19:46'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:19:46'!
ERROR!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:19:46'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:19:46'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:19:46'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:19:46'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:19:46'!
ERROR!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:19:46'!
ERROR!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:19:46'!
ERROR!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:19:46'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:19:46'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:19:46'!
ERROR!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:19:46'!
ERROR!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:19:46'!
ERROR!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:19:46'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:19:49'!
ERROR!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:22:30'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:22:30'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:22:30'!
ERROR!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:22:30'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:22:30'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:22:30'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:22:30'!
ERROR!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:22:30'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:22:30'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:22:30'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:22:30'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:22:30'!
ERROR!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:22:30'!
ERROR!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:22:30'!
ERROR!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:22:30'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:22:30'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:22:30'!
ERROR!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:22:30'!
ERROR!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:22:30'!
ERROR!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:22:30'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:22:34'!
ERROR!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:22:53'!
ERROR!
!Suelo methodsFor: 'initialization' stamp: 'NB 5/8/2023 20:24:41' prior: 50668682!
initializeWith: capasDeSuelo

	capas := capasDeSuelo.
	capas add: SinCapa new.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:24:42'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:24:42'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:24:42'!
ERROR!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:24:42'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:24:42'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:24:42'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:24:42'!
ERROR!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:24:42'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:24:42'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:24:42'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:24:42'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:24:42'!
ERROR!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:24:42'!
ERROR!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:24:42'!
ERROR!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:24:42'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:24:42'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:24:42'!
ERROR!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:24:42'!
ERROR!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:24:42'!
ERROR!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:24:42'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:24:44'!
ERROR!
!Suelo methodsFor: 'initialization' stamp: 'NB 5/8/2023 20:25:42' prior: 50668870!
initializeWith: capasDeSuelo

	capas := capasDeSuelo.! !
!Suelo methodsFor: 'profundidad' stamp: 'NB 5/8/2023 20:25:53' prior: 50668688!
profundidad

        "Se calcula la profundidad del suelo hasta llegar al fondo. Reutilzo el mensaje que calcula hasta un tipo de capa determinado usando nil   como representando el fondo. Se podria mejor representar el fondo como una capa nula o vacia pero como esa instancia"

	^self profundidadDelSueloHasta: nil.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:25:54'!
PASSED!

!classRemoval: #SinCapa stamp: 'NB 5/8/2023 20:26:06'!
CapaDeSuelo subclass: #SinCapa
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Suelo methodsFor: 'initialization' stamp: 'NB 5/8/2023 20:26:43' prior: 50668958!
initializeWith: capasDeSuelo

	capas := capasDeSuelo asOrderedCollection.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:26:44'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:26:44'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:26:45'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:26:45'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:26:45'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:26:45'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:26:45'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:26:45'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:26:45'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:26:45'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:26:45'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:26:45'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:26:45'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:26:45'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:26:45'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:26:45'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:26:45'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:26:45'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:26:45'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:26:45'!
PASSED!

CapaDeSuelo subclass: #CapaFinal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaFinal category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 20:26:55'!
CapaDeSuelo subclass: #CapaFinal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!CapaFinal methodsFor: 'no messages' stamp: 'NB 5/8/2023 20:27:22' overrides: 50668045!
darGolpeDeTaladro: unaPerforadora

	self shouldNotImplement 
	! !
!Suelo methodsFor: 'initialization' stamp: 'NB 5/8/2023 20:27:42' prior: 50669061!
initializeWith: capasDeSuelo

	capas := capasDeSuelo asOrderedCollection.
	capas addLast: CapaFinal new.! !
!Suelo methodsFor: 'profundidad' stamp: 'NB 5/8/2023 20:27:53' prior: 50668963!
profundidad

        "Se calcula la profundidad del suelo hasta llegar al fondo. Reutilzo el mensaje que calcula hasta un tipo de capa determinado usando nil   como representando el fondo. Se podria mejor representar el fondo como una capa nula o vacia pero como esa instancia"

	^self profundidadDelSueloHasta: CapaFinal new.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:27:55'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:27:55'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:27:55'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:27:55'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:27:55'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:27:55'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:27:55'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:27:55'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:27:55'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:27:55'!
FAILURE!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:27:55'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:27:55'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:27:55'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:27:55'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:27:55'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:27:55'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:27:55'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:27:55'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:27:55'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:27:55'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:27:55'!
FAILURE!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:28:10'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:28:10'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:28:10'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:28:10'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:28:10'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:28:10'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:28:10'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:28:10'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:28:10'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:28:10'!
FAILURE!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:28:10'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:28:10'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:28:10'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:28:10'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:28:10'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:28:10'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:28:10'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:28:10'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:28:10'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:28:10'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:28:10'!
FAILURE!
!Suelo methodsFor: 'capas' stamp: 'NB 5/8/2023 20:28:39' prior: 50665503!
capas

	^capas allButLast.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:28:40'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:28:45'!
PASSED!

----SNAPSHOT----(8 May 2023 20:31:19) CuisUniversity-5706.image priorSource: 10770594!

CapaDeSuelo subclass: #CapaPiedras
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaPiedras category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 20:33:29'!
CapaDeSuelo subclass: #CapaPiedras
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Suelo methodsFor: 'transformaciones' stamp: 'NB 5/8/2023 20:35:46' prior: 50665591!
pasarAProximaCapa: unaPerforadora
	
	
	capas := capas allButFirst.
	capas ifEmpty: [^self]. 
	(capas first isKindOf: CapaDeSuelo) ifFalse:[
			unaPerforadora recogerPiedrasConTamiz: capas allButFirst.
	]! !
!Suelo methodsFor: 'transformaciones' stamp: 'NB 5/8/2023 20:35:58' prior: 50669526!
pasarAProximaCapa: unaPerforadora
	
	
	capas := capas allButFirst.
	capas ifEmpty: [^self]. 
	(capas first isKindOf: CapaDeSuelo) ifFalse:[
			unaPerforadora recogerPiedrasConTamiz: self capas.
	]! !
!Perforadora methodsFor: 'cambiar capa' stamp: 'NB 5/8/2023 20:36:32'!
recogerPiedrasConTamiz: capasConPiedas

	container addAll: capasConPiedas! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:36:35'!
PASSED!

!methodRemoval: Perforadora #recogerPiedrasConTamiz stamp: 'NB 5/8/2023 20:37:09'!
recogerPiedrasConTamiz

	container addAll: suelo capas!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:37:12'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:37:12'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:37:13'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:37:13'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:37:13'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:37:13'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:37:13'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:37:13'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:37:13'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:37:13'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:37:13'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:37:13'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:37:13'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:37:13'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:37:13'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:37:13'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:37:13'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:37:13'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:37:13'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:37:13'!
PASSED!

----SNAPSHOT----(8 May 2023 20:37:51) CuisUniversity-5706.image priorSource: 10811519!
!Suelo methodsFor: 'profundidad' stamp: 'NB 5/8/2023 20:38:06' prior: 50669169!
profundidad

	^self profundidadDelSueloHasta: CapaFinal new.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:38:13'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:38:13'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:38:13'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:38:13'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:38:13'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:38:13'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:38:13'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:38:14'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:38:14'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:38:14'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:38:14'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:38:14'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:38:14'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:38:14'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:38:14'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:38:14'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:38:14'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:38:14'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:38:14'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:38:14'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:38:17'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:38:17'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:38:17'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:38:18'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:38:18'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:38:18'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:38:18'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:38:18'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:38:18'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:38:18'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:38:18'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:38:18'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:38:18'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:38:18'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:38:18'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:38:18'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:38:18'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:38:18'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:38:18'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:38:18'!
PASSED!

----SNAPSHOT----(8 May 2023 20:38:21) CuisUniversity-5706.image priorSource: 10817978!

----SNAPSHOT----(8 May 2023 20:40:27) CuisUniversity-5706.image priorSource: 10823297!

!methodRemoval: CapaDeSuelo #hash stamp: 'NB 5/8/2023 20:40:38'!
hash

	^resistencia hash!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:40:42'!
PASSED!

!classRemoval: #CapaPiedras stamp: 'NB 5/8/2023 20:40:49'!
CapaDeSuelo subclass: #CapaPiedras
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!CapaConcreto methodsFor: 'comparing' stamp: 'NB 5/8/2023 20:41:20' overrides: 16901788!
hash

	^resistencia hash! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:41:21'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:41:21'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:41:21'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:41:21'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:41:21'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:41:21'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:41:21'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:41:21'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:41:21'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:41:21'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:41:21'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:41:21'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:41:21'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:41:21'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:41:21'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:41:22'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:41:22'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:41:22'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:41:22'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:41:22'!
PASSED!

----SNAPSHOT----(8 May 2023 20:41:34) CuisUniversity-5706.image priorSource: 10823385!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 20:42:39'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaArenosa category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 20:42:39'!
CapaDeSuelo subclass: #CapaArenosa
	instanceVariableNames: 'resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaTierra category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 20:42:39'!
CapaDeSuelo subclass: #CapaTierra
	instanceVariableNames: 'resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaConcreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 20:42:39'!
CapaDeSuelo subclass: #CapaConcreto
	instanceVariableNames: 'resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaFinal category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 20:42:39'!
CapaDeSuelo subclass: #CapaFinal
	instanceVariableNames: 'resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #CapaArenosa
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaArenosa category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 20:42:48'!
CapaDeSuelo subclass: #CapaArenosa
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #CapaFinal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaFinal category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 20:42:52'!
CapaDeSuelo subclass: #CapaFinal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #CapaTierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaTierra category: 'ISW1-2023-1C-Parcial-1' stamp: 'NB 5/8/2023 20:42:55'!
CapaDeSuelo subclass: #CapaTierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:43:00'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:43:00'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:43:01'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:43:01'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:43:01'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:43:01'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:43:01'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:43:01'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:43:01'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:43:01'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:43:01'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:43:01'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:43:01'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:43:01'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:43:01'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:43:01'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:43:01'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:43:01'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:43:01'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:43:01'!
PASSED!

----SNAPSHOT----(8 May 2023 20:43:49) CuisUniversity-5706.image priorSource: 10828956!
!Mecha methodsFor: 'no messages' stamp: 'NB 5/8/2023 20:44:07'!
darGolpeSobreCapaArenosa: unaCapaArenosa conPerforadora: unaPerforadora

	self subclassResponsibility 
	! !
!Mecha methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 20:44:27'!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conPerforadora: unaPerforadora

	self subclassResponsibility 
	! !
!Mecha methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 20:44:43'!
darGolpeSobreCapaTierra: unaCapaTierra conPerforadora: unaPerforadora

	self subclassResponsibility 
	! !

----SNAPSHOT----(8 May 2023 20:45:20) CuisUniversity-5706.image priorSource: 10833987!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:45:26'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:45:26'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:45:26'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:45:26'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:45:26'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:45:26'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:45:26'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:45:26'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:45:26'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:45:26'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:45:26'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:45:26'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:45:26'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:45:26'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:45:26'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:45:26'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:45:26'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:45:26'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:45:26'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:45:26'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:48:57'!
capaConcretoConResistenciaCinco

	^ CapaConcreto resistencia: 5! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:48:57' prior: 50666970!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			CapaDeSuelo tierra.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:48:57' prior: 50667035!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaTierra new.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: CapaArenosa new equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:48:57' prior: 50666986!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaDeSuelo tierra.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:48:57' prior: 50667001!
test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			self capaConcretoConResistenciaCinco.
			CapaDeSuelo tierra.} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:48:57' prior: 50667019!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			CapaTierra new.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:48:57' prior: 50667052!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			self capaConcretoConResistenciaCinco.	
			CapaDeSuelo tierra.
} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:48:57' prior: 50667072!
test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			CapaDeSuelo tierra.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota ].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:48:57' prior: 50667228!
test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			self capaConcretoConResistenciaCinco.
			CapaDeSuelo tierra.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: (CapaConcreto resistencia: 4) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:48:57' prior: 50667212!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaDeSuelo tierra.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	
	self assert: (CapaConcreto resistencia: 5) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:48:57' prior: 50670459!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaDeSuelo tierra.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	
	self assert: (self capaConcretoConResistenciaCinco) equals: excavadora capaDeSueloInmediata

	
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:49:01'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:49:01'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:51:33'!
sueloConCapaArenosaTierraArenosaYConcreto

	^ Suelo with:{ CapaArenosa new setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaArenosa new. CapaConcreto resistencia: 10 }! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:51:33' prior: 50667125!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self sueloConCapaArenosaTierraArenosaYConcreto.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: CapaArenosa new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:51:33' prior: 50667182!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self sueloConCapaArenosaTierraArenosaYConcreto.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: CapaTierra new).

	! !

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:51:34'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:51:34'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:51:35'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:51:35'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:51:35'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:51:35'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:51:35'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:51:35'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:51:35'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:51:35'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:51:35'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:51:35'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:51:35'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:51:35'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:51:35'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:51:35'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:51:35'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:51:35'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:51:35'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:51:35'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:51:35'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:51:55' prior: 50667139!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self sueloConCapaArenosaTierraArenosaYConcreto.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: CapaTierra new).

	! !

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:51:56'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:52:01'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:52:01'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:52:04' prior: 50667153!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self sueloConCapaArenosaTierraArenosaYConcreto.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: CapaConcreto new).

	! !

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:52:05'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:52:05'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:52:11' prior: 50667167!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self sueloConCapaArenosaTierraArenosaYConcreto.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: CapaArenosa new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:52:20' prior: 50667197!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self sueloConCapaArenosaTierraArenosaYConcreto.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:52:22'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:52:22'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:53:55'!
excavadoraParaSueloConCapaArenosaTierraArenosaYConcreto

	|  sueloAExcavar |
	
	sueloAExcavar := self sueloConCapaArenosaTierraArenosaYConcreto.
	^Perforadora sobreSuelo: sueloAExcavar.
	

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:54:23' prior: 50670583!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self sueloConCapaArenosaTierraArenosaYConcreto.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (self excavadoraParaSueloConCapaArenosaTierraArenosaYConcreto contarCapas: CapaArenosa new).

	! !

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:54:26'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:54:26'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:54:31' prior: 50671077!
test14PuedeContarLasCapasDeTipoArenoso
	
	self assert: 2 equals: (self excavadoraParaSueloConCapaArenosaTierraArenosaYConcreto contarCapas: CapaArenosa new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:54:47' prior: 50670690!
test15PuedeContarLasCapasDeTipoTierra

	
	self assert: 1 equals: (self excavadoraParaSueloConCapaArenosaTierraArenosaYConcreto contarCapas: CapaTierra new).

	! !

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:54:48'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:54:48'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:54:59' prior: 50670866!
test16PuedeContarLasCapasDeTipoConcreto

	
	self assert: 1 equals: (self excavadoraParaSueloConCapaArenosaTierraArenosaYConcreto contarCapas: CapaConcreto new).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:55:10' prior: 50670960!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	
	self assert: 0 equals: (self excavadoraParaSueloConCapaArenosaTierraArenosaYConcreto calcularProfundidadDelSueloHasta: CapaArenosa new).

	! !

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:55:11'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:55:11'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:55:28' prior: 50670595!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	
	self assert: 2 equals: (self excavadoraParaSueloConCapaArenosaTierraArenosaYConcreto calcularProfundidadDelSueloHasta: CapaTierra new).

	! !

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:55:29'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:55:29'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:55:41' prior: 50670973!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	
	self assert: 42 equals: (self excavadoraParaSueloConCapaArenosaTierraArenosaYConcreto calcularProfundidadDelSueloHasta: #Concreto).

	! !

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:55:44'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:55:44'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:55:59' prior: 50671466!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	
	self assert: 42 equals: (self excavadoraParaSueloConCapaArenosaTierraArenosaYConcreto calcularProfundidadDelSueloHasta: CapaConcreto new).

	! !

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:56:00'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:56:50'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:56:50'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:56:50'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:56:50'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:56:50'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:56:50'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:56:50'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:56:50'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:56:50'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:56:50'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:56:50'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:56:50'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:56:50'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:56:50'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:56:50'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:56:50'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:56:50'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:56:50'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:56:50'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:56:50'!
PASSED!
!TestDePerforación methodsFor: 'suelo' stamp: 'NB 5/8/2023 20:57:12' prior: 50670574!
sueloConCapaArenosaTierraArenosaYConcreto

	^ Suelo with:{ CapaArenosa new setAltura: 2. CapaTierra new setAltura: 40. CapaArenosa new. CapaConcreto resistencia: 10 }! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:57:22' prior: 50670320!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			CapaTierra new.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:57:27' prior: 50671739!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			CapaTierra new.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaTierra new equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:57:32' prior: 50670353!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaTierra new.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:57:38' prior: 50671771!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaTierra new.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaTierra new equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:57:47' prior: 50670368!
test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			self capaConcretoConResistenciaCinco.
			CapaTierra new} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:58:00' prior: 50670386!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			CapaTierra new.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaTierra new equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:58:07' prior: 50670402!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			self capaConcretoConResistenciaCinco.	
			CapaTierra new.
} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:58:14' prior: 50670423!
test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			CapaTierra new.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota ].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:58:20' prior: 50670475!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaTierra new.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	
	self assert: (self capaConcretoConResistenciaCinco) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:58:29' prior: 50670442!
test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			self capaConcretoConResistenciaCinco.
			CapaTierra new.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: (CapaConcreto resistencia: 4) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 20:58:37' prior: 50665827!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: { CapaArenosa new setAltura: 2. CapaTierra new setAltura: 40. CapaArenosa new} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:58:43'!
PASSED!

----SNAPSHOT----(8 May 2023 20:58:46) CuisUniversity-5706.image priorSource: 10834633!

!methodRemoval: CapaDeSuelo class #tierra stamp: 'NB 5/8/2023 20:59:00'!
tierra

	^CapaTierra new.!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 20:59:29'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 20:59:29'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 20:59:29'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 20:59:29'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 20:59:29'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 20:59:29'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 20:59:29'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 20:59:29'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 20:59:29'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 20:59:29'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 20:59:29'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 20:59:29'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 20:59:29'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 20:59:29'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 20:59:29'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 20:59:29'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 20:59:29'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 20:59:29'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 20:59:29'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 20:59:29'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 21:01:35'!
ponerMechaSoftYDarGolpeDeTaladro: excavadora

	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 21:01:35' prior: 50671755!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			CapaTierra new.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self ponerMechaSoftYDarGolpeDeTaladro: excavadora.
	
	self assert: CapaTierra new equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 21:01:35' prior: 50665783!
test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			'Mica'.
			'Marmol'
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self ponerMechaSoftYDarGolpeDeTaladro: excavadora.
	
	self assert: {	'Mica'. 'Marmol'} equals: excavadora elementsInContainer
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 21:01:35' prior: 50671786!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaTierra new.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self ponerMechaSoftYDarGolpeDeTaladro: excavadora.
	
	self assert: CapaTierra new equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 21:01:35' prior: 50665798!
test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self ponerMechaSoftYDarGolpeDeTaladro: excavadora.
	
	self assert: excavadora elementsInContainer isEmpty
	! !

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:01:37'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:01:37'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 21:04:26'!
ponerMechaWidiaYDarGolpeDeTalado: excavadora

	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 21:04:26' prior: 50671835!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			self capaConcretoConResistenciaCinco.	
			CapaTierra new.
} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self ponerMechaWidiaYDarGolpeDeTalado: excavadora.
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 21:04:26' prior: 50670336!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaTierra new.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self ponerMechaWidiaYDarGolpeDeTalado: excavadora.
	excavadora darGolpeDeTaladro.	
	
	self assert: CapaArenosa new equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 21:04:26' prior: 50671819!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			CapaTierra new.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self ponerMechaWidiaYDarGolpeDeTalado: excavadora.
	
	self assert: CapaTierra new equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 21:05:23'!
ponerMechaDiamanteYDarGolpeDeTaladro: excavadora

	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 21:05:23' prior: 50671890!
test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			self capaConcretoConResistenciaCinco.
			CapaTierra new.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self ponerMechaDiamanteYDarGolpeDeTaladro: excavadora.
	excavadora darGolpeDeTaladro.	
	
	self assert: (CapaConcreto resistencia: 4) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 21:05:23' prior: 50671874!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaTierra new.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self ponerMechaDiamanteYDarGolpeDeTaladro: excavadora.
	
	self assert: (self capaConcretoConResistenciaCinco) equals: excavadora capaDeSueloInmediata

	
	! !

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:05:26'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:06:08'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:06:12'!
PASSED!

----SNAPSHOT----(8 May 2023 21:06:15) CuisUniversity-5706.image priorSource: 10891126!
!Mecha methodsFor: 'testing' stamp: 'NB 5/8/2023 21:07:42'!
estaRota

	self subclassResponsibility 
	! !
!MechaDiamante methodsFor: 'nil' stamp: 'NB 5/8/2023 21:08:00' overrides: 50672498!
estaRota

	^false! !
!MechaRota methodsFor: 'no messages' stamp: 'NB 5/8/2023 21:08:11' overrides: 50672498!
estaRota

	^true! !
!MechaSoft methodsFor: 'nil' stamp: 'NB 5/8/2023 21:08:19' overrides: 50672498!
estaRota

	^false! !
!MechaWidia methodsFor: 'nil' stamp: 'NB 5/8/2023 21:08:28' overrides: 50672498!
estaRota

	^false! !
!SinMecha methodsFor: 'no messages' stamp: 'NB 5/8/2023 21:08:36' overrides: 50672498!
estaRota

	^false! !
!Perforadora methodsFor: 'accessing' stamp: 'NB 5/8/2023 21:09:02' prior: 50662595!
conMechaRota

	^mechaPuesta estaRota .! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:09:03'!
PASSED!

----SNAPSHOT----(8 May 2023 21:09:07) CuisUniversity-5706.image priorSource: 10907030!

----SNAPSHOT----(8 May 2023 21:09:10) CuisUniversity-5706.image priorSource: 10910570!
!Mecha methodsFor: 'testing' stamp: 'NB 5/8/2023 21:09:40'!
noTieneMecha

	self subclassResponsibility 
	! !
!MechaDiamante methodsFor: 'testing' stamp: 'NB 5/8/2023 21:09:50' overrides: 50672611!
noTieneMecha

	^false! !
!MechaRota methodsFor: 'testing' stamp: 'NB 5/8/2023 21:10:09' overrides: 50672611!
noTieneMecha

	^false! !
!MechaSoft methodsFor: 'testing' stamp: 'NB 5/8/2023 21:10:18' overrides: 50672611!
noTieneMecha

	^false! !
!MechaWidia methodsFor: 'testing' stamp: 'NB 5/8/2023 21:10:27' overrides: 50672611!
noTieneMecha

	^false! !
!SinMecha methodsFor: 'testing' stamp: 'NB 5/8/2023 21:10:38' overrides: 50672611!
noTieneMecha

	^true! !
!Perforadora methodsFor: 'accessing' stamp: 'NB 5/8/2023 21:10:53' prior: 50662583!
sinMecha

	^mechaPuesta noTieneMecha ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:10:54'!
PASSED!

----SNAPSHOT----(8 May 2023 21:10:57) CuisUniversity-5706.image priorSource: 10910658!

----SNAPSHOT----(8 May 2023 21:14:47) CuisUniversity-5706.image priorSource: 10914185!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:14:49'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:14:49'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:14:49'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:14:49'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:14:49'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:14:49'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:14:49'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:14:49'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:14:49'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:14:49'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:14:49'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:14:49'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:14:49'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:14:49'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:14:49'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:14:49'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:14:49'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:14:49'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:14:49'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:14:49'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:15:31'!
incrementarVecesQueSeGolpeoCapaActual

	^ vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:15:31' prior: 50663090!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	self incrementarVecesQueSeGolpeoCapaActual.
	
	^self capaDeSueloInmediata darGolpeDeTaladro: self.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:15:37'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:15:37'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:15:37'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:15:37'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:15:37'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:15:37'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:15:37'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:15:37'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:15:37'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:15:37'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:15:37'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:15:37'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:15:37'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:15:37'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:15:37'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:15:37'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:15:37'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:15:37'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:15:37'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:15:37'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:15:45' prior: 50672809!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].
	
	^self capaDeSueloInmediata darGolpeDeTaladro: self.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:15:48'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:15:48'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:15:48'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:15:48'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:15:48'!
FAILURE!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:15:48'!
FAILURE!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:15:48'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:15:48'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:15:48'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:15:48'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:15:48'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:15:48'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:15:48'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:15:48'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:15:48'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:15:48'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:15:48'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:15:48'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:15:48'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:15:48'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:16:09' prior: 50662603!
darGolpeSobreCapaArenosa: unaCapaArenosa conMechaDiamante: unaMechaDiamante

	self incrementarVecesQueSeGolpeoCapaActual.
	self mechaPuesta: MechaRota new. self error: 'Se rompió'.! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:16:14' prior: 50662530!
darGolpeSobreCapaArenosa: unaCapaArenosa conMechaSoft: unaMechaSoft

	self incrementarVecesQueSeGolpeoCapaActual.
	^self pasarAProximaCapa ! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:16:20' prior: 50662548!
darGolpeSobreCapaArenosa: unaCapaArenosa conMechaWidia: unaMechaWidia

	self incrementarVecesQueSeGolpeoCapaActual.
 	^self pasarAProximaCapa.! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:16:26' prior: 50666081!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conMechaDiamante: unaMechaDiamante
	
	self incrementarVecesQueSeGolpeoCapaActual.
	self vecesQueGolpeoCapaActual even ifTrue: [ self capaDeSueloInmediata bajaUnDecimoDeResistencia].
	self capaDeSueloInmediata sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
	^self vecesQueGolpeoCapaActual! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:16:33' prior: 50662714!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conMechaSoft: unaMechaSoft

	self incrementarVecesQueSeGolpeoCapaActual.
	self mechaPuesta: MechaRota new. self error: 'Se rompió' 

	! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:18:08' prior: 50662735!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conMechaWidia: unaMechaWidia

	self incrementarVecesQueSeGolpeoCapaActual.
	self vecesQueGolpeoCapaActual = 3 ifTrue: [ self mechaPuesta: MechaRota new. self error: 'Se rompió' ].
	^self. 
	! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:18:14' prior: 50662785!
darGolpeSobreCapaTierra: unaCapaTierra conMechaDiamante: unaMechaDiamante

	self incrementarVecesQueSeGolpeoCapaActual.
	^self pasarAProximaCapa.! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:18:20' prior: 50662803!
darGolpeSobreCapaTierra: unaCapaTierra conMechaSoft: unaMechaSoft

	self incrementarVecesQueSeGolpeoCapaActual.
	^self ! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:18:29' prior: 50662820!
darGolpeSobreCapaTierra: unaCapaTierra conMechaWidia: unaMechaWidia

	self incrementarVecesQueSeGolpeoCapaActual.
	self vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
	^self! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:18:31'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:18:31'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:18:31'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:18:31'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:18:31'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:18:31'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:18:31'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:18:31'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:18:31'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:18:31'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:18:31'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:18:31'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:18:31'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:18:31'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:18:31'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:18:31'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:18:31'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:18:31'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:18:31'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:18:31'!
PASSED!
!SinMecha class methodsFor: 'no messages' stamp: 'NB 5/8/2023 21:19:17'!
noPuedePerforarErrorDescription
	
	^'no puede perforar'.! !
!SinMecha class methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 21:19:36' prior: 50673146!
noPuedePerforarErrorDescription
	
	^'No puede perforar'.! !
!SinMecha methodsFor: 'nil' stamp: 'NB 5/8/2023 21:20:01' overrides: 50670215!
darGolpeSobreCapaArenosa: unaCapaArenosa conPerforadora: unaPerforadora

	self error: SinMecha noPuedePerforarErrorDescription .! !
!SinMecha methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 21:20:18' overrides: 50670221!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conPerforadora: unaPerforadora

	self error: SinMecha noPuedePerforarErrorDescription .! !
!SinMecha methodsFor: 'as yet unclassified' stamp: 'NB 5/8/2023 21:20:32' overrides: 50670227!
darGolpeSobreCapaTierra: unaCapaTierra conPerforadora: unaPerforadora

	self error: SinMecha noPuedePerforarErrorDescription .! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:20:52' prior: 50672897!
darGolpeDeTaladro
	
	^self capaDeSueloInmediata darGolpeDeTaladro: self.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:20:54'!
PASSED!

----SNAPSHOT----(8 May 2023 21:20:58) CuisUniversity-5706.image priorSource: 10914273!
!MechaRota class methodsFor: 'no messages' stamp: 'NB 5/8/2023 21:22:21'!
mechaRotaErrorDescription

	^'Se rompió'.! !
!MechaRota methodsFor: 'testing' stamp: 'NB 5/8/2023 21:22:45' overrides: 50670215!
darGolpeSobreCapaArenosa: unaCapaArenosa conPerforadora: unaPerforadora

	self error: MechaRota mechaRotaErrorDescription .! !
!MechaRota methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:23:19' overrides: 50670221!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conPerforadora: unaPerforadora

	self error: MechaRota mechaRotaErrorDescription .! !
!MechaRota methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:23:30' overrides: 50670227!
darGolpeSobreCapaTierra: unaCapaTierra conPerforadora: unaPerforadora

	self error: MechaRota mechaRotaErrorDescription .! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:23:33'!
PASSED!

----SNAPSHOT----(8 May 2023 21:23:36) CuisUniversity-5706.image priorSource: 10931596!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:24:41' prior: 50672984!
darGolpeSobreCapaArenosa: unaCapaArenosa conMechaDiamante: unaMechaDiamante

	self incrementarVecesQueSeGolpeoCapaActual.
	self mechaPuesta: MechaRota new. self error: MechaRota mechaRotaErrorDescription .! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:24:42'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:24:42'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:24:42'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:24:42'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:24:42'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:24:42'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:24:42'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:24:42'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:24:42'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:24:42'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:24:42'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:24:42'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:24:42'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:24:42'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:24:42'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:24:42'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:24:42'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:24:42'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:24:42'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:24:42'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:25:03' prior: 50673023!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conMechaSoft: unaMechaSoft

	self incrementarVecesQueSeGolpeoCapaActual.
	self mechaPuesta: MechaRota new. self error: MechaRota mechaRotaErrorDescription .

	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:25:05'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:25:05'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:25:05'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:25:05'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:25:05'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:25:05'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:25:05'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:25:05'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:25:05'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:25:05'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:25:05'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:25:05'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:25:05'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:25:05'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:25:05'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:25:05'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:25:05'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:25:05'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:25:05'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:25:05'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:25:19' prior: 50673032!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conMechaWidia: unaMechaWidia

	self incrementarVecesQueSeGolpeoCapaActual.
	self vecesQueGolpeoCapaActual = 3 ifTrue: [ self mechaPuesta: MechaRota new. self error: MechaRota mechaRotaErrorDescription ].
	^self. 
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:25:20'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:25:29'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:25:29'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:25:29'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:25:29'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:25:29'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:25:29'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:25:29'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:25:29'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:25:29'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:25:29'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:25:29'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:25:29'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:25:29'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:25:29'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:25:29'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:25:29'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:25:29'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:25:29'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:25:29'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:25:30'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 21:26:09' prior: 50671801!
test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			self capaConcretoConResistenciaCinco.
			CapaTierra new} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	
	self should: [self ponerMechaSoftYDarGolpeDeTaladro: excavadora]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	! !

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:26:10'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:26:10'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 21:26:17' prior: 50673721!
test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			self capaConcretoConResistenciaCinco.
			CapaTierra new} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self should: [self ponerMechaSoftYDarGolpeDeTaladro: excavadora]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	! !

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:26:18'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:26:18'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 21:26:36' prior: 50673821!
test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			self capaConcretoConResistenciaCinco.
			CapaTierra new} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self should: [self ponerMechaSoftYDarGolpeDeTaladro: excavadora]
		raise: Error
		withExceptionDo: [:unError |
			self assert: MechaRota mechaRotaErrorDescription equals: unError messageText.
			self assert: excavadora conMechaRota.].
	! !

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:26:37'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:26:37'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 21:27:07' prior: 50672238!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			self capaConcretoConResistenciaCinco.	
			CapaTierra new.
} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self ponerMechaWidiaYDarGolpeDeTalado: excavadora.
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: MechaRota mechaRotaErrorDescription equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:27:09'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:27:09'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 21:27:35' prior: 50671855!
test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			CapaTierra new.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self should: [self ponerMechaDiamanteYDarGolpeDeTaladro: excavadora]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota ].
	
	! !

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:27:36'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:27:36'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:27:36'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:27:36'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:27:36'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:27:36'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:27:36'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:27:36'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:27:36'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:27:36'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:27:36'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:27:36'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:27:36'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:27:36'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:27:37'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:27:37'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:27:37'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:27:37'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:27:37'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:27:37'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:27:37'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 21:27:54' prior: 50674126!
test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			CapaTierra new.
			self capaConcretoConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self should: [self ponerMechaDiamanteYDarGolpeDeTaladro: excavadora]
		raise: Error
		withExceptionDo: [:unError |
			self assert: MechaRota mechaRotaErrorDescription equals: unError messageText.
			self assert: excavadora conMechaRota ].
	
	! !

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:27:55'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:27:55'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'NB 5/8/2023 21:28:26' prior: 50665811!
test12NoPuedePerforarSinMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := Suelo with: {
			CapaArenosa new.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
		
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: SinMecha noPuedePerforarErrorDescription equals: unError messageText.
			self assert: (CapaArenosa new) equals: excavadora capaDeSueloInmediata ].	
	! !

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:28:27'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:28:27'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:28:27'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:28:27'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:28:27'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:28:27'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:28:27'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:28:27'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:28:27'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:28:28'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:28:28'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:28:28'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:28:28'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:28:28'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:28:28'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:28:28'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:28:28'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:28:28'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:28:28'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:28:28'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:28:28'!
PASSED!

----SNAPSHOT----(8 May 2023 21:29:23) CuisUniversity-5706.image priorSource: 10935037!
!Perforadora class methodsFor: 'instance creation' stamp: 'NB 5/8/2023 21:34:23' prior: 50660814!
sobreSuelo: sueloAExcavar 

	^self new initializeSobreSuelo: sueloAExcavar ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:34:25'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:34:25'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:34:25'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:34:25'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:34:25'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:34:25'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:34:25'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:34:25'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:34:25'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:34:25'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:34:25'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:34:25'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:34:25'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:34:25'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:34:25'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:34:25'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:34:25'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:34:25'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:34:25'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:34:25'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:39:33'!
incrementarVecesQueSeGolpeoCapaActualYRomperMecha

	self incrementarVecesQueSeGolpeoCapaActual.
	self mechaPuesta: MechaRota new. self error: MechaRota mechaRotaErrorDescription! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:39:33' prior: 50673374!
darGolpeSobreCapaArenosa: unaCapaArenosa conMechaDiamante: unaMechaDiamante

	self incrementarVecesQueSeGolpeoCapaActualYRomperMecha .! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:39:33' prior: 50673463!
darGolpeSobreCapaConcreto: unaCapaDeConcreto conMechaSoft: unaMechaSoft

	self incrementarVecesQueSeGolpeoCapaActualYRomperMecha .

	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:39:37'!
PASSED!

----SNAPSHOT----(8 May 2023 21:40:55) CuisUniversity-5706.image priorSource: 10968894!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:41:00' prior: 50672993!
darGolpeSobreCapaArenosa: unaCapaArenosa conMechaSoft: unaMechaSoft

	self incrementarVecesQueSeGolpeoCapaActual.
	self pasarAProximaCapa ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:41:02'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:41:02'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:41:02'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:41:02'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:41:02'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:41:02'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:41:02'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:41:02'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:41:02'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:41:02'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:41:02'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:41:02'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:41:02'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:41:02'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:41:02'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:41:02'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:41:02'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:41:02'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:41:02'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:41:02'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:41:31'!
incrementarVecesQueSeGolpeoCapaActualYPasarAProximaCapa

	self incrementarVecesQueSeGolpeoCapaActual.
	self pasarAProximaCapa! !
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:41:31' prior: 50674621!
darGolpeSobreCapaArenosa: unaCapaArenosa conMechaSoft: unaMechaSoft

	self incrementarVecesQueSeGolpeoCapaActualYPasarAProximaCapa ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:41:37'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:41:37'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:41:37'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:41:37'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:41:37'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:41:37'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:41:37'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:41:37'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:41:37'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:41:37'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:41:37'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:41:37'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:41:37'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:41:37'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:41:37'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:41:37'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:41:37'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:41:37'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:41:37'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:41:37'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:41:53' prior: 50673001!
darGolpeSobreCapaArenosa: unaCapaArenosa conMechaWidia: unaMechaWidia

	self incrementarVecesQueSeGolpeoCapaActualYPasarAProximaCapa! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:41:54'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:41:54'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:41:54'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:41:54'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:41:54'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:41:54'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:41:54'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:41:54'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:41:54'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:41:54'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:41:54'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:41:54'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:41:54'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:41:54'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:41:54'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:41:54'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:41:54'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:41:54'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:41:54'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:41:54'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:42:08' prior: 50673043!
darGolpeSobreCapaTierra: unaCapaTierra conMechaDiamante: unaMechaDiamante

	self incrementarVecesQueSeGolpeoCapaActualYPasarAProximaCapa! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:42:09'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:42:09'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:42:09'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:42:09'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:42:10'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:42:10'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:42:10'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:42:10'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:42:10'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:42:10'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:42:10'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:42:10'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:42:10'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:42:10'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:42:10'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:42:10'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:42:10'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:42:10'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:42:10'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:42:10'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:42:22' prior: 50673051!
darGolpeSobreCapaTierra: unaCapaTierra conMechaSoft: unaMechaSoft

	self incrementarVecesQueSeGolpeoCapaActual.
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:42:23'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:42:23'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:42:23'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:42:23'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:42:23'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:42:23'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:42:23'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:42:23'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:42:23'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:42:23'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:42:23'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:42:23'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:42:23'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:42:23'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:42:23'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:42:23'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:42:23'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:42:23'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:42:23'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:42:23'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'NB 5/8/2023 21:42:28' prior: 50673058!
darGolpeSobreCapaTierra: unaCapaTierra conMechaWidia: unaMechaWidia

	self incrementarVecesQueSeGolpeoCapaActual.
	self vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:42:30'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:42:41'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

!testRun: #TestDePerforación #test20NoSePuedeCrearUnSueloConDosCapasContiguasDelMismoTipo stamp: 'NB 5/8/2023 21:42:47'!
PASSED!

----SNAPSHOT----(8 May 2023 21:43:04) CuisUniversity-5706.image priorSource: 10974953!

----SNAPSHOT----(8 May 2023 21:43:08) CuisUniversity-5706.image priorSource: 10996936!

----STARTUP---- (11 May 2023 20:32:45) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #MarsRover category: 'MarsRoverEjercicio' stamp: 'NB 5/11/2023 20:44:26'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #MarsRoverTest category: 'MarsRoverEjercicio' stamp: 'NB 5/11/2023 20:45:26'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classRemoval: #MarsRover stamp: 'NB 5/11/2023 21:44:00'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

----STARTUP---- (14 May 2023 19:02:45) as /Users/nico/Documents/inge1/macos64/CuisUniversity-5706.image!


----End fileIn of /Users/nico/Documents/inge1/inge1-2023-1c/05-MarsRover/MarsRover.st----!

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 19:06:52'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 19:06:52'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 19:06:52'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 19:06:52'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 19:06:52'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 19:06:52'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 19:06:52'!
PASSED!

!testRun: #MarsRoverTests #test08MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 19:06:52'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 19:06:52'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 19:06:52'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 19:06:52'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 19:06:52'!
PASSED!
!MarsRover methodsFor: 'initilizacion' stamp: 'NB 5/14/2023 19:45:07'!
receiveCommands: aPackageOfCommands 
	moves:=aPackageOfCommands. ! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:45:07' prior: 50675385!
test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'bb'.
	aMarsRover move.
	self assert: (aMarsRover isAt: -1@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:45:07' prior: 50675426!
test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'fff'.
	aMarsRover move.
	self assert: (aMarsRover isAt: 4@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:45:07' prior: 50675365!
test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'f'.
	aMarsRover move.
	self assert: (aMarsRover isAt: 2@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:45:07' prior: 50675416!
test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'ff'.
	aMarsRover move.
	self assert: (aMarsRover isAt: 3@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:45:07' prior: 50675395!
test08MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'bb'.
	aMarsRover move.
	self assert: (aMarsRover isAt: -1@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:45:07' prior: 50675375!
test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'b'.
	aMarsRover move.
	self assert: (aMarsRover isAt: 0@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:45:07' prior: 50675355!
test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: #North.
	aMarsRover receiveCommands: 'b'.
	aMarsRover move.
	self assert: (aMarsRover isAt: -1@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:45:07' prior: 50675335!
test02MarsRoverWithEmptyCommandsMoveStayTheSame
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: #North.
	aMarsRover receiveCommands: ''.
	aMarsRover move.
	self assert: (aMarsRover isAt: 0@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:45:07' prior: 50675405!
test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'bbb'.
	aMarsRover move.
	self assert: (aMarsRover isAt: -2@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:45:07' prior: 50675345!
test03MarsRoverAtAPositionWithFCommandMoveFowardOnce
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: #North.
	aMarsRover receiveCommands: 'f'.
	aMarsRover move.
	self assert: (aMarsRover isAt: 1@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:45:07' prior: 50675437!
test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'fbbffb'.
	aMarsRover move.
	self assert: (aMarsRover isAt: 1@0 facing: #North).! !

!methodRemoval: MarsRover #reciveComands: stamp: 'NB 5/14/2023 19:45:07'!
reciveComands: aPackageOfCommands 
	moves:=aPackageOfCommands. !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 19:45:09'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 19:45:09'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 19:45:09'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 19:45:09'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 19:45:09'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 19:45:09'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 19:45:09'!
PASSED!

!testRun: #MarsRoverTests #test08MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 19:45:09'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 19:45:09'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 19:45:09'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 19:45:09'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 19:45:09'!
PASSED!
!MarsRover methodsFor: 'initilizacion' stamp: 'NB 5/14/2023 19:54:38' prior: 50675553!
receiveCommands: aPackageOfCommands 

	 | index aCommand |
	index:=1.
	aPackageOfCommands size < 1 ifTrue:[^self].
	
	[index <= aPackageOfCommands size] whileTrue:[
		aCommand := aPackageOfCommands at: index.
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (1@0).
			] 
			ifFalse: [
				xyPosition := xyPosition + (1@0).
			].
		index:= index + 1.
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 19:54:40'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 19:54:40'!
ERROR!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 19:54:40'!
ERROR!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 19:54:40'!
ERROR!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 19:54:40'!
ERROR!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 19:54:40'!
ERROR!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 19:54:40'!
ERROR!

!testRun: #MarsRoverTests #test08MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 19:54:40'!
ERROR!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 19:54:40'!
ERROR!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 19:54:40'!
ERROR!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 19:54:40'!
ERROR!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 19:54:40'!
ERROR!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 19:54:42'!
ERROR!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:54:59' prior: 50675636!
test02MarsRoverWithEmptyCommandsMoveStayTheSame
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: #North.
	aMarsRover receiveCommands: ''.
	
	self assert: (aMarsRover isAt: 0@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:55:03' prior: 50675658!
test03MarsRoverAtAPositionWithFCommandMoveFowardOnce
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: #North.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 1@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:55:08' prior: 50675625!
test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: #North.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: -1@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:55:18' prior: 50675581!
test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 2@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:55:22' prior: 50675614!
test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 0@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:55:25' prior: 50675559!
test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'bb'.
	
	self assert: (aMarsRover isAt: -1@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:55:30' prior: 50675603!
test08MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'bb'.
	
	self assert: (aMarsRover isAt: -1@0 facing: #North).! !

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 19:55:32'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:55:36' prior: 50675647!
test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'bbb'.
	
	self assert: (aMarsRover isAt: -2@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:55:40' prior: 50675592!
test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'ff'.
	
	self assert: (aMarsRover isAt: 3@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:55:45' prior: 50675570!
test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'fff'.
	
	self assert: (aMarsRover isAt: 4@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 19:55:50' prior: 50675669!
test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'fbbffb'.
	
	self assert: (aMarsRover isAt: 1@0 facing: #North).! !

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 19:55:51'!
PASSED!

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 19:55:51'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 19:55:51'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 19:55:51'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 19:55:51'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 19:55:51'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 19:55:52'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 19:55:52'!
PASSED!

!testRun: #MarsRoverTests #test08MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 19:55:52'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 19:55:52'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 19:55:52'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 19:55:52'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 19:55:52'!
PASSED!

!methodRemoval: MarsRover #move stamp: 'NB 5/14/2023 19:56:01'!
move
	 | index aCommand |
	index:=1.
	moves size < 1 ifTrue:[^self].
	
	[index <= moves size] whileTrue:[
		aCommand := moves at: index.
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (1@0).
			] 
			ifFalse: [
				xyPosition := xyPosition + (1@0).
			].
		index:= index + 1.
	]. !

!classDefinition: #MarsRover category: 'MarsRoverClass' stamp: 'NB 5/14/2023 19:56:18'!
Object subclass: #MarsRover
	instanceVariableNames: 'cardinalPoint xyPosition facing moves'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverClass'!

!classDefinition: #MarsRover category: 'MarsRoverClass' stamp: 'NB 5/14/2023 19:56:18'!
Object subclass: #MarsRover
	instanceVariableNames: 'xyPosition facing moves'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverClass'!

!classDefinition: #MarsRover category: 'MarsRoverClass' stamp: 'NB 5/14/2023 19:56:18'!
Object subclass: #MarsRover
	instanceVariableNames: 'xyPosition facing'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverClass'!

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 19:56:25'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 19:56:25'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 19:56:25'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 19:56:25'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 19:56:25'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 19:56:25'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 19:56:25'!
PASSED!

!testRun: #MarsRoverTests #test08MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 19:56:25'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 19:56:25'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 19:56:25'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 19:56:25'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 19:56:25'!
PASSED!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 20:06:35' prior: 50675732!
receiveCommands: aPackageOfCommands 

	 | index aCommand |
	index:=1.
	aPackageOfCommands size < 1 ifTrue:[^self].
	
	[index <= aPackageOfCommands size] whileTrue:[
		aCommand := aPackageOfCommands at: index.
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (0@1).
			] 
			ifFalse: [
				xyPosition := xyPosition + (0@1).
			].
		index:= index + 1.
	]. ! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 20:07:07' prior: 50675808!
test03MarsRoverAtAPositionWithFCommandMoveFowardOnce
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: #North.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 0@1 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 20:07:20' prior: 50675818!
test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: #North.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 0@-1 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 20:07:58' prior: 50675848!
test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'bb'.
	
	self assert: (aMarsRover isAt: 1@-2 facing: #North).! !

!methodRemoval: MarsRoverTests #test08MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 20:08:18'!
test08MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'bb'.
	
	self assert: (aMarsRover isAt: -1@0 facing: #North).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 20:08:33' prior: 50675874!
test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'bbb'.
	
	self assert: (aMarsRover isAt: 1@-3 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 20:08:53' prior: 50675885!
test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'ff'.
	
	self assert: (aMarsRover isAt: 1@2 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 20:08:58' prior: 50675895!
test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'fff'.
	
	self assert: (aMarsRover isAt: 1@3 facing: #North).! !

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 20:09:26'!
PASSED!

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 20:09:28'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 20:09:28'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 20:09:29'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 20:09:29'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 20:09:29'!
FAILURE!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 20:09:29'!
FAILURE!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 20:09:29'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 20:09:29'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 20:09:29'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 20:09:29'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 20:09:29'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 20:09:40' prior: 50675828!
test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 1@1 facing: #North).! !

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 20:09:41'!
FAILURE!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 20:09:41'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 20:09:41'!
FAILURE!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 20:09:52' prior: 50675838!
test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 1@-1 facing: #North).! !

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 20:09:53'!
PASSED!

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 20:09:59'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 20:09:59'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 20:09:59'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 20:09:59'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 20:09:59'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 20:09:59'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 20:09:59'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 20:09:59'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 20:09:59'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 20:09:59'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 20:09:59'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 20:11:35'!
test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'x'.
	
	self assert: (aMarsRover isAt: 1@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 20:11:45' prior: 50676304!
test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	aMarsRover receiveCommands: 'xfff'.
	
	self assert: (aMarsRover isAt: 1@0 facing: #North).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 20:13:40' prior: 50676315!
test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	
	
	self   should: [aMarsRover receiveCommands: 'xfff'] 
		raise: Error 
		withExceptionDo: [self assert: (aMarsRover isAt: 1@0 facing: #North)]
		description: 'Comando invalido'.! !

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 20:13:41'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 20:14:58' prior: 50676050!
receiveCommands: aPackageOfCommands 

	 | index aCommand |
	index:=1.
	aPackageOfCommands size < 1 ifTrue:[^self].
	
	[index <= aPackageOfCommands size] whileTrue:[
		aCommand := aPackageOfCommands at: index.
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (0@1).
			] .
		aCommand = $f  ifTrue:[
				xyPosition := xyPosition + (0@1).
			] .
		self error: 'Comando invalido'.
		index:= index + 1.
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 20:14:59'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 20:14:59'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 20:14:59'!
ERROR!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 20:14:59'!
ERROR!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 20:14:59'!
ERROR!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 20:14:59'!
ERROR!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 20:14:59'!
ERROR!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 20:14:59'!
ERROR!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 20:14:59'!
ERROR!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 20:14:59'!
ERROR!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 20:14:59'!
ERROR!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 20:14:59'!
ERROR!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 20:16:02' prior: 50676344!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (0@1).
			] .
		aCommand = $f  ifTrue:[
				xyPosition := xyPosition + (0@1).
			] .
		self error: 'Comando invalido'.
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 20:16:03'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 20:16:03'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 20:16:03'!
ERROR!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 20:16:03'!
ERROR!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 20:16:03'!
ERROR!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 20:16:03'!
ERROR!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 20:16:03'!
ERROR!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 20:16:03'!
ERROR!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 20:16:03'!
ERROR!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 20:16:03'!
ERROR!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 20:16:03'!
ERROR!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 20:16:03'!
ERROR!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 20:16:09'!
ERROR!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 20:18:16' prior: 50676408!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (0@1).
			] 
				ifFalse: [
					aCommand = $f  ifTrue:[
						xyPosition := xyPosition + (0@1).
						]  ifFalse:  [
		self error: 'Comando invalido'.
		]
		]
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 20:18:18'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 20:18:18'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 20:18:18'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 20:18:18'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 20:18:18'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 20:18:18'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 20:18:18'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 20:18:18'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 20:18:18'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 20:18:18'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 20:18:18'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 20:18:18'!
ERROR!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 20:18:18'!
ERROR!

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 20:18:48'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 20:18:50'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 20:18:51'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 20:18:53'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 20:18:55'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 20:18:56'!
ERROR!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 20:18:56'!
ERROR!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 20:19:31'!
ERROR!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 20:19:40'!
ERROR!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 20:20:37' prior: 50676326!
test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	
	
	self   should: [aMarsRover receiveCommands: 'xfff'] 
		raise: Error 
		withExceptionDo: [:error | self assert: (aMarsRover isAt: 1@0 facing: #North)]
		description: 'Comando invalido'.! !

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 20:20:38'!
PASSED!

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 20:20:38'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 20:20:38'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 20:20:38'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 20:20:38'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 20:20:38'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 20:20:38'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 20:20:38'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 20:20:38'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 20:20:38'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 20:20:38'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 20:20:38'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 20:20:38'!
PASSED!

----SNAPSHOT----(14 May 2023 20:21:22) CuisUniversity-5706.image priorSource: 10997024!
!MarsRover class methodsFor: 'instance creation' stamp: 'NB 5/14/2023 20:57:52'!
invalidCommandDescription
	
	^'Comando invalido'.! !
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 20:58:28' prior: 50676471!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (0@1).
			] 
				ifFalse: [
					aCommand = $f  ifTrue:[
						xyPosition := xyPosition + (0@1).
						]  ifFalse:  [
		self class invalidCommandDescription .
		]
		]
	]. ! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 20:58:39' prior: 50676575!
test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: #North.
	
	
	self   should: [aMarsRover receiveCommands: 'xfff'] 
		raise: Error 
		withExceptionDo: [:error | self assert: (aMarsRover isAt: 1@0 facing: #North)]
		description: MarsRover invalidCommandDescription .! !

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 20:58:40'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 20:59:07' prior: 50676650!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (0@1).
			] 
				ifFalse: [
					aCommand = $f  ifTrue:[
						xyPosition := xyPosition + (0@1).
						]  ifFalse:  [
		self error: self class invalidCommandDescription .
		]
		]
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 20:59:08'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 20:59:08'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 20:59:08'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 20:59:08'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 20:59:08'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 20:59:08'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 20:59:08'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 20:59:08'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 20:59:08'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 20:59:08'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 20:59:08'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 20:59:08'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 21:00:29'!
test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: #South.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 0@-1 facing: #South).! !

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 21:00:30'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 21:02:32' prior: 50676682!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		facing = #North ifTrue: [
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (0@1).
			] 
				ifFalse: [
					aCommand = $f  ifTrue:[
						xyPosition := xyPosition + (0@1).
						]  ifFalse:  [
		self error: self class invalidCommandDescription .
		]
		] ]. 
		facing = #South ifTrue: [
			aCommand = $f  ifTrue:[
				xyPosition := xyPosition + (0@-1).
			] 	
		]
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 21:02:33'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 21:02:33'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 21:02:33'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 21:02:33'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 21:02:33'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 21:02:33'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 21:02:33'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 21:02:33'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 21:02:33'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 21:02:33'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 21:02:33'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 21:02:33'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 21:02:33'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 21:02:58'!
test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: #South.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 0@-1 facing: #South).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 21:03:01' prior: 50676827!
test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: #South.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 0@-1 facing: #South).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 21:03:16' prior: 50676838!
test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: #South.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 0@1 facing: #South).! !

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 21:03:17'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 21:04:48' prior: 50676757!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		facing = #North ifTrue: [
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (0@1).
			] 
				ifFalse: [
					aCommand = $f  ifTrue:[
						xyPosition := xyPosition + (0@1).
						]  ifFalse:  [
		self error: self class invalidCommandDescription .
		]
		] ]. 
		facing = #South ifTrue: [
			aCommand = $f  ifTrue:[
				xyPosition := xyPosition + (0@-1).
			] ifFalse: [
			aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (0@-1).
			] 
			]	
		]
	]. ! !

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 21:05:03'!
PASSED!

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 21:05:07'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 21:05:07'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 21:05:07'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 21:05:07'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 21:05:07'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 21:05:07'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 21:05:07'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 21:05:07'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 21:05:07'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 21:05:07'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 21:05:07'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 21:05:07'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 21:05:07'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 21:05:07'!
PASSED!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 21:07:58' prior: 50676864!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		
		(((aCommand = $b) not) and: [(aCommand = $f) not]) ifTrue: [self error: self class invalidCommandDescription].
		
		
		facing = #North ifTrue: [
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (0@1).
			] 
				ifFalse: [
					aCommand = $f  ifTrue:[
						xyPosition := xyPosition + (0@1).
						] 
		] ]. 
		facing = #South ifTrue: [
			aCommand = $f  ifTrue:[
				xyPosition := xyPosition + (0@-1).
			] ifFalse: [
			aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (0@-1).
			] 
			]	
		]
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 21:07:59'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 21:07:59'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 21:07:59'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 21:07:59'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 21:07:59'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 21:07:59'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 21:07:59'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 21:07:59'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 21:07:59'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 21:07:59'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 21:07:59'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 21:07:59'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 21:07:59'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 21:07:59'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 21:09:14'!
test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: #East.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 1@0 facing: #East).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 21:10:29'!
test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: #East.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 1@0 facing: #East).! !

!methodRemoval: MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 21:10:29'!
test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: #East.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 1@0 facing: #East).!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 21:10:40'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 21:11:19' prior: 50676945!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		
		(((aCommand = $b) not) and: [(aCommand = $f) not]) ifTrue: [self error: self class invalidCommandDescription].
		
		
		facing = #North ifTrue: [
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (0@1).
			] 
				ifFalse: [
					aCommand = $f  ifTrue:[
						xyPosition := xyPosition + (0@1).
						] 
		] ]. 
		facing = #South ifTrue: [
			aCommand = $f  ifTrue:[
				xyPosition := xyPosition + (0@-1).
			] ifFalse: [
			aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (0@-1).
			] 
			]	
		].
		facing = #East ifTrue: [
			aCommand = $f  ifTrue:[
				xyPosition := xyPosition + (1@0).
			] ifFalse: [
			]	
		]
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 21:11:20'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 21:11:20'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 21:11:20'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 21:11:20'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 21:11:20'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 21:11:20'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 21:11:20'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 21:11:20'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 21:11:20'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 21:11:20'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 21:11:20'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 21:11:20'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 21:11:20'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 21:11:20'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 21:11:20'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 21:12:03'!
test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: #East.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: -1@0 facing: #East).! !

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 21:12:04'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 21:12:38' prior: 50677058!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		
		(((aCommand = $b) not) and: [(aCommand = $f) not]) ifTrue: [self error: self class invalidCommandDescription].
		
		
		facing = #North ifTrue: [
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (0@1).
			] 
				ifFalse: [
					aCommand = $f  ifTrue:[
						xyPosition := xyPosition + (0@1).
						] 
		] ]. 
		facing = #South ifTrue: [
			aCommand = $f  ifTrue:[
				xyPosition := xyPosition + (0@-1).
			] ifFalse: [
			aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (0@-1).
			] 
			]	
		].
		facing = #East ifTrue: [
			aCommand = $f  ifTrue:[
				xyPosition := xyPosition + (1@0).
			] ifFalse: [
			aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (-1@0).
			] 
			]	
		]
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 21:12:39'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 21:12:39'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 21:12:39'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 21:12:39'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 21:12:39'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 21:12:39'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 21:12:39'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 21:12:39'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 21:12:39'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 21:12:39'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 21:12:39'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 21:12:39'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 21:12:39'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 21:12:39'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 21:12:39'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 21:12:39'!
FAILURE!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 21:12:39'!
FAILURE!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 21:12:55'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 21:12:57'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 21:13:01'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 21:13:05'!
FAILURE!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 21:13:05'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 21:13:29' prior: 50677158!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		
		(((aCommand = $b) not) and: [(aCommand = $f) not]) ifTrue: [self error: self class invalidCommandDescription].
		
		
		facing = #North ifTrue: [
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (0@1).
			] 
				ifFalse: [
					aCommand = $f  ifTrue:[
						xyPosition := xyPosition + (0@1).
						] 
		] ]. 
		facing = #South ifTrue: [
			aCommand = $f  ifTrue:[
				xyPosition := xyPosition + (0@-1).
			] ifFalse: [
			aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (0@-1).
			] 
			]	
		].
		facing = #East ifTrue: [
			aCommand = $f  ifTrue:[
				xyPosition := xyPosition + (1@0).
			] ifFalse: [
			aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (1@0).
			] 
			]	
		]
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 21:13:32'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 21:13:32'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 21:13:32'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 21:13:32'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 21:13:32'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 21:13:32'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 21:13:32'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 21:13:32'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 21:13:32'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 21:13:32'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 21:13:32'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 21:13:32'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 21:13:32'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 21:13:32'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 21:13:32'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 21:13:32'!
PASSED!

Object subclass: #CardinalPoint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverClass'!

!classDefinition: #CardinalPoint category: 'MarsRoverClass' stamp: 'NB 5/14/2023 21:13:51'!
Object subclass: #CardinalPoint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverClass'!

CardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverClass'!

!classDefinition: #North category: 'MarsRoverClass' stamp: 'NB 5/14/2023 21:13:59'!
CardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverClass'!

CardinalPoint subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverClass'!

!classDefinition: #East category: 'MarsRoverClass' stamp: 'NB 5/14/2023 21:14:03'!
CardinalPoint subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverClass'!

CardinalPoint subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverClass'!

!classDefinition: #South category: 'MarsRoverClass' stamp: 'NB 5/14/2023 21:14:07'!
CardinalPoint subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverClass'!
!CardinalPoint methodsFor: 'no messages' stamp: 'NB 5/14/2023 21:14:31'!
forwardPointDirection

	self subclassResponsibility ! !
!North methodsFor: 'no messages' stamp: 'NB 5/14/2023 21:14:58' overrides: 50677414!
forwardPointDirection

	^0@1! !
!South methodsFor: 'no messages' stamp: 'NB 5/14/2023 21:15:13' overrides: 50677414!
forwardPointDirection

	^0@-1! !
!East methodsFor: 'no messages' stamp: 'NB 5/14/2023 21:15:30' overrides: 50677414!
forwardPointDirection

	^1@0! !
!CardinalPoint methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 21:20:09'!
point

	self subclassResponsibility ! !
!East methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 21:20:09' overrides: 50677431!
point

	^1@0! !
!North methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 21:20:10' overrides: 50677431!
point

	^0@1! !
!South methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 21:20:10' overrides: 50677431!
point

	^0@-1! !

!methodRemoval: CardinalPoint #forwardPointDirection stamp: 'NB 5/14/2023 21:20:10'!
forwardPointDirection

	self subclassResponsibility !

!methodRemoval: East #forwardPointDirection stamp: 'NB 5/14/2023 21:20:10'!
forwardPointDirection

	^1@0!

!methodRemoval: North #forwardPointDirection stamp: 'NB 5/14/2023 21:20:10'!
forwardPointDirection

	^0@1!

!methodRemoval: South #forwardPointDirection stamp: 'NB 5/14/2023 21:20:10'!
forwardPointDirection

	^0@-1!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 21:21:21' prior: 50677277!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		
		(((aCommand = $b) not) and: [(aCommand = $f) not]) ifTrue: [self error: self class invalidCommandDescription].
		
		
		facing = #North ifTrue: [
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - North new point.
			] 
				ifFalse: [
					aCommand = $f  ifTrue:[
						xyPosition := xyPosition + North new point.
						] 
		] ]. 
		facing = #South ifTrue: [
			aCommand = $f  ifTrue:[
				xyPosition := xyPosition + (0@-1).
			] ifFalse: [
			aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (0@-1).
			] 
			]	
		].
		facing = #East ifTrue: [
			aCommand = $f  ifTrue:[
				xyPosition := xyPosition + (1@0).
			] ifFalse: [
			aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (1@0).
			] 
			]	
		]
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 21:21:22'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 21:21:22'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 21:21:22'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 21:21:22'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 21:21:22'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 21:21:22'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 21:21:22'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 21:21:22'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 21:21:22'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 21:21:22'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 21:21:22'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 21:21:22'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 21:21:22'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 21:21:22'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 21:21:22'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 21:21:22'!
PASSED!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 21:21:36' prior: 50677462!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		
		(((aCommand = $b) not) and: [(aCommand = $f) not]) ifTrue: [self error: self class invalidCommandDescription].
		
		
		facing = #North ifTrue: [
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - North new point.
			] 
				ifFalse: [
					aCommand = $f  ifTrue:[
						xyPosition := xyPosition + North new point.
						] 
		] ]. 
		facing = #South ifTrue: [
			aCommand = $f  ifTrue:[
				xyPosition := xyPosition + South new point.
			] ifFalse: [
			aCommand = $b  ifTrue:[
				xyPosition := xyPosition - South new point.
			] 
			]	
		].
		facing = #East ifTrue: [
			aCommand = $f  ifTrue:[
				xyPosition := xyPosition + (1@0).
			] ifFalse: [
			aCommand = $b  ifTrue:[
				xyPosition := xyPosition - (1@0).
			] 
			]	
		]
	]. ! !
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 21:21:55' prior: 50677555!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		
		(((aCommand = $b) not) and: [(aCommand = $f) not]) ifTrue: [self error: self class invalidCommandDescription].
		
		
		facing = #North ifTrue: [
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - North new point.
			] 
				ifFalse: [
					aCommand = $f  ifTrue:[
						xyPosition := xyPosition + North new point.
						] 
		] ]. 
		facing = #South ifTrue: [
			aCommand = $f  ifTrue:[
				xyPosition := xyPosition + South new point.
			] ifFalse: [
			aCommand = $b  ifTrue:[
				xyPosition := xyPosition - South new point.
			] 
			]	
		].
		facing = #East ifTrue: [
			aCommand = $f  ifTrue:[
				xyPosition := xyPosition + East new point.
			] ifFalse: [
			aCommand = $b  ifTrue:[
				xyPosition := xyPosition - East new point.
			] 
			]	
		]
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 21:21:56'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 21:21:56'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 21:21:57'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 21:21:57'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 21:21:57'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 21:21:57'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 21:21:57'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 21:21:57'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 21:21:57'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 21:21:57'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 21:21:57'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 21:21:57'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 21:21:57'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 21:21:57'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 21:21:57'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 21:21:57'!
PASSED!

TestCase subclass: #MarsRoverTests
	instanceVariableNames: 'north east south west'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverClass'!

!classDefinition: #MarsRoverTests category: 'MarsRoverClass' stamp: 'NB 5/14/2023 21:54:01'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: 'north east south west'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverClass'!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 21:54:56' overrides: 16961394!
setUp

	north:= North new.
	east:= East new.
	south:= South new.! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 21:55:43' prior: 50675326!
test01MarsRoverStartAtaPositionAndFacingAcardinalPoint
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: north.
	
	self assert: (aMarsRover isAt: 0@0 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 21:55:53' prior: 50675798!
test02MarsRoverWithEmptyCommandsMoveStayTheSame
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: north.
	aMarsRover receiveCommands: ''.
	
	self assert: (aMarsRover isAt: 0@0 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 21:55:57' prior: 50676065!
test03MarsRoverAtAPositionWithFCommandMoveFowardOnce
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: north.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 0@1 facing: #North).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 21:56:03' prior: 50677716!
test03MarsRoverAtAPositionWithFCommandMoveFowardOnce
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: north.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 0@1 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 21:56:14' prior: 50676075!
test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: north.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 0@-1 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 21:56:36' prior: 50676185!
test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: north.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 1@1 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 21:56:45' prior: 50676247!
test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: north.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 1@-1 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 21:56:53' prior: 50676085!
test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: north.
	aMarsRover receiveCommands: 'bb'.
	
	self assert: (aMarsRover isAt: 1@-2 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 21:57:04' prior: 50676106!
test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: north.
	aMarsRover receiveCommands: 'bbb'.
	
	self assert: (aMarsRover isAt: 1@-3 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 21:57:12' prior: 50676117!
test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: north.
	aMarsRover receiveCommands: 'ff'.
	
	self assert: (aMarsRover isAt: 1@2 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 21:57:21' prior: 50676127!
test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: north.
	aMarsRover receiveCommands: 'fff'.
	
	self assert: (aMarsRover isAt: 1@3 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 21:57:31' prior: 50675906!
test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: north.
	aMarsRover receiveCommands: 'fbbffb'.
	
	self assert: (aMarsRover isAt: 1@0 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 21:57:40' prior: 50676663!
test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: north.
	
	
	self   should: [aMarsRover receiveCommands: 'xfff'] 
		raise: Error 
		withExceptionDo: [:error | self assert: (aMarsRover isAt: 1@0 facing: north)]
		description: MarsRover invalidCommandDescription .! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 21:57:46' prior: 50676743!
test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: south.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 0@-1 facing: #South).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 21:57:50' prior: 50677830!
test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: south.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 0@-1 facing: south).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 21:57:58' prior: 50676849!
test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: south.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 0@1 facing: south).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 21:58:07' prior: 50677033!
test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: east.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 1@0 facing: east).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 21:58:18' prior: 50677144!
test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: east.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: -1@0 facing: east).! !
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 21:59:11' prior: 50677584!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		
		(((aCommand = $b) not) and: [(aCommand = $f) not]) ifTrue: [self error: self class invalidCommandDescription].
		
		
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - facing point.
			] 
				ifFalse: [
					aCommand = $f  ifTrue:[
						xyPosition := xyPosition + facing point.
						] 
		]. 
		
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 21:59:12'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 21:59:12'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 21:59:12'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 21:59:12'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 21:59:12'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 21:59:12'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 21:59:12'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 21:59:12'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 21:59:12'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 21:59:12'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 21:59:12'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 21:59:12'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 21:59:12'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 21:59:12'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 21:59:12'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 21:59:12'!
PASSED!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 22:00:35'!
test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: west.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: -1@0 facing: west).! !

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 22:00:40'!
ERROR!

!classDefinition: #West category: 'MarsRoverClass' stamp: 'NB 5/14/2023 22:01:10'!
CardinalPoint subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverClass'!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 22:00:53' prior: 50677692 overrides: 16961394!
setUp

	north:= North new.
	east:= East new.
	south:= South new.
	west:= West new.! !

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 22:01:14'!
ERROR!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 22:01:14'!
ERROR!
!West methodsFor: 'category-name' stamp: 'NB 5/14/2023 22:01:25' overrides: 50677431!
point
	self shouldBeImplemented.! !
!West methodsFor: 'category-name' stamp: 'NB 5/14/2023 22:01:34' prior: 50677996 overrides: 50677431!
point
	^-1@0! !

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 22:01:35'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 22:01:36'!
PASSED!

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 22:01:37'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 22:01:37'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:01:37'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:01:37'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:01:37'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:01:37'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 22:01:37'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 22:01:37'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 22:01:37'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 22:01:37'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 22:01:37'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 22:01:37'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 22:01:37'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 22:01:37'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 22:01:37'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 22:01:37'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 22:01:37'!
PASSED!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 22:04:43'!
assertCommandIsValid: aCommand

	^ (((aCommand = $b) not) and: [(aCommand = $f) not]) ifTrue: [self error: self class invalidCommandDescription]! !
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 22:04:43' prior: 50677880!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		
		self assertCommandIsValid: aCommand.
		
		
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - facing point.
			] 
				ifFalse: [
					aCommand = $f  ifTrue:[
						xyPosition := xyPosition + facing point.
						] 
		]. 
		
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 22:25:16'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 22:25:16'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:25:16'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:25:16'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:25:16'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:25:16'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 22:25:16'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 22:25:16'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 22:25:16'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 22:25:16'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 22:25:16'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 22:25:16'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 22:25:16'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 22:25:16'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 22:25:16'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 22:25:16'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 22:25:16'!
PASSED!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 22:37:36'!
test17MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: north.
	aMarsRover receiveCommands: 'l'.
	
	self assert: (aMarsRover isAt: 0@0 facing: west).! !

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 22:37:38'!
ERROR!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 22:38:37' prior: 50678090!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		
		self assertCommandIsValid: aCommand.
		
		
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - facing point.
			].
		aCommand = $f  ifTrue:[
						xyPosition := xyPosition + facing point.
			].
		aCommand = $l ifTrue: [
			facing:= West new.	
		]  
		
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 22:38:38'!
ERROR!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 22:38:38'!
ERROR!
!MarsRover methodsFor: 'assertions' stamp: 'NB 5/14/2023 22:39:10' prior: 50678082!
assertCommandIsValid: aCommand

	^ (((aCommand = $b) not) and: [(aCommand = $f) not] and: [(aCommand = $l) not]) ifTrue: [self error: self class invalidCommandDescription]! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 22:39:11'!
FAILURE!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 22:39:11'!
FAILURE!
!CardinalPoint methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 22:41:35' overrides: 16901772!
= anObject

	^self class = anObject class.! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 22:41:39'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 22:41:39'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:41:39'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:41:39'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:41:39'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:41:39'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 22:41:39'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 22:41:39'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 22:41:39'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 22:41:39'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 22:41:39'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 22:41:39'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 22:41:39'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 22:41:39'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 22:41:39'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 22:41:39'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 22:41:39'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 22:41:39'!
PASSED!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 22:47:32'!
test17MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: west.
	aMarsRover receiveCommands: 'l'.
	
	self assert: (aMarsRover isAt: 0@0 facing: south).! !

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/14/2023 22:47:34'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 22:48:57' prior: 50678187!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		
		self assertCommandIsValid: aCommand.
		
		
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - facing point.
			].
		aCommand = $f  ifTrue:[
						xyPosition := xyPosition + facing point.
			].
		aCommand = $l ifTrue: [
			(facing isKindOf: North) ifTrue: [facing:= West new.	].
			(facing isKindOf: West) ifTrue: [facing:= South new.	].
		]  
		
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 22:48:59'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 22:48:59'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:48:59'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:48:59'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:48:59'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:48:59'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 22:48:59'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 22:48:59'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 22:48:59'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 22:48:59'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 22:48:59'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 22:48:59'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 22:48:59'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 22:48:59'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 22:48:59'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 22:48:59'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 22:48:59'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/14/2023 22:48:59'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 22:48:59'!
FAILURE!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 22:48:59'!
FAILURE!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/14/2023 22:49:11'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/14/2023 22:49:21'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 22:49:23'!
FAILURE!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 22:49:23'!
FAILURE!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 22:49:58'!
test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: north.
	aMarsRover receiveCommands: 'l'.
	
	self assert: (aMarsRover isAt: 0@0 facing: west).! !

!methodRemoval: MarsRoverTests #test17MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 22:49:58'!
test17MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: north.
	aMarsRover receiveCommands: 'l'.
	
	self assert: (aMarsRover isAt: 0@0 facing: west).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 22:50:11'!
test19MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: west.
	aMarsRover receiveCommands: 'l'.
	
	self assert: (aMarsRover isAt: 0@0 facing: south).! !

!methodRemoval: MarsRoverTests #test17MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/14/2023 22:50:11'!
test17MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: west.
	aMarsRover receiveCommands: 'l'.
	
	self assert: (aMarsRover isAt: 0@0 facing: south).!

!testRun: #MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/14/2023 22:50:15'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 22:50:17'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 22:50:21'!
FAILURE!

!testRun: #MarsRoverTests #test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 22:50:21'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 22:52:03' prior: 50678459!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		
		self assertCommandIsValid: aCommand.
		
		
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - facing point.
			].
		aCommand = $f  ifTrue:[
						xyPosition := xyPosition + facing point.
			].
		aCommand = $l ifTrue: [
			(facing isKindOf: North) ifTrue: [facing:= West new.	] ifFalse: [(facing isKindOf: West) ifTrue: [facing:= South new.	]].
			.
		]  
		
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 22:52:04'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 22:52:04'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:52:04'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:52:04'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:52:04'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:52:04'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 22:52:04'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 22:52:04'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 22:52:04'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 22:52:04'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 22:52:04'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 22:52:04'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 22:52:04'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 22:52:04'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 22:52:04'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 22:52:04'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 22:52:04'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 22:52:04'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/14/2023 22:52:04'!
PASSED!
!CardinalPoint methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 22:53:35'!
rotate90DegreesToLeft

	self subclassResponsibility ! !
!North methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 22:54:07' overrides: 50678731!
rotate90DegreesToLeft

	^West new! !
!West methodsFor: 'category-name' stamp: 'NB 5/14/2023 22:54:29' overrides: 50678731!
rotate90DegreesToLeft

	^South new.! !
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 22:54:52' prior: 50678636!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		
		self assertCommandIsValid: aCommand.
		
		
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - facing point.
			].
		aCommand = $f  ifTrue:[
						xyPosition := xyPosition + facing point.
			].
		aCommand = $l ifTrue: [
			facing:= facing rotate90DegreesToLeft.
		]  
		
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 22:54:52'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 22:54:52'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:54:53'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:54:53'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:54:53'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:54:53'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 22:54:53'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 22:54:53'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 22:54:53'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 22:54:53'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 22:54:53'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 22:54:53'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 22:54:53'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 22:54:53'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 22:54:53'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 22:54:53'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 22:54:53'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 22:54:53'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/14/2023 22:54:53'!
PASSED!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 22:56:21'!
test19MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: south.
	aMarsRover receiveCommands: 'l'.
	
	self assert: (aMarsRover isAt: 0@0 facing: east).! !

!testRun: #MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/14/2023 22:56:22'!
ERROR!
!South methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 22:56:29' overrides: 50678731!
rotate90DegreesToLeft
	self shouldBeImplemented.! !
!South methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 22:56:37' prior: 50678851 overrides: 50678731!
rotate90DegreesToLeft
	
	^East new.! !

!testRun: #MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/14/2023 22:56:38'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/14/2023 22:56:38'!
PASSED!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 22:56:50'!
test20MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: south.
	aMarsRover receiveCommands: 'l'.
	
	self assert: (aMarsRover isAt: 0@0 facing: east).! !

!methodRemoval: MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/14/2023 22:56:50'!
test19MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: south.
	aMarsRover receiveCommands: 'l'.
	
	self assert: (aMarsRover isAt: 0@0 facing: east).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 22:57:09'!
test21MarsRoverAtAPositionWithlCommandRotatesLeftToNorthWhenPointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: east.
	aMarsRover receiveCommands: 'l'.
	
	self assert: (aMarsRover isAt: 0@0 facing: north).! !

!testRun: #MarsRoverTests #test21MarsRoverAtAPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/14/2023 22:57:10'!
ERROR!
!East methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 22:57:14' overrides: 50678731!
rotate90DegreesToLeft
	self shouldBeImplemented.! !
!East methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 22:57:23' prior: 50678984 overrides: 50678731!
rotate90DegreesToLeft
	
	^North new.! !

!testRun: #MarsRoverTests #test21MarsRoverAtAPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test20MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/14/2023 22:57:24'!
PASSED!

!testRun: #MarsRoverTests #test21MarsRoverAtAPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/14/2023 22:57:24'!
PASSED!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 23:05:53'!
test22MarsRoverAtAPositionWithlCommandRotatesRightToEastWhenPointingNorth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: north.
	aMarsRover receiveCommands: 'r'.
	
	self assert: (aMarsRover isAt: 0@0 facing: east).! !

!testRun: #MarsRoverTests #test22MarsRoverAtAPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/14/2023 23:05:55'!
ERROR!
!MarsRover methodsFor: 'assertions' stamp: 'NB 5/14/2023 23:06:27'!
validCommands

	^'fblr'.! !
!MarsRover methodsFor: 'assertions' stamp: 'NB 5/14/2023 23:09:02' prior: 50678279!
assertCommandIsValid: aCommand

	^(self validCommands includes: aCommand) ifFalse: [self error: self class invalidCommandDescription]! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test20MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test21MarsRoverAtAPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/14/2023 23:09:04'!
PASSED!

!testRun: #MarsRoverTests #test22MarsRoverAtAPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/14/2023 23:09:04'!
FAILURE!

!testRun: #MarsRoverTests #test22MarsRoverAtAPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/14/2023 23:09:04'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 23:11:46' prior: 50678744!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		
		self assertCommandIsValid: aCommand.
		
		
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - facing point.
			].
		aCommand = $f  ifTrue:[
						xyPosition := xyPosition + facing point.
			].
		aCommand = $l ifTrue: [
			facing:= facing rotate90DegreesToLeft.
		] . 
		aCommand = $r ifTrue: [
			facing:= East new.
		]  
		
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test20MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test21MarsRoverAtAPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/14/2023 23:11:47'!
PASSED!

!testRun: #MarsRoverTests #test22MarsRoverAtAPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/14/2023 23:11:47'!
PASSED!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 23:12:11'!
test23MarsRoverAtAPositionWithlCommandRotatesRightToSouthWhenPointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: east.
	aMarsRover receiveCommands: 'r'.
	
	self assert: (aMarsRover isAt: 0@0 facing: south).! !

!testRun: #MarsRoverTests #test23MarsRoverAtAPositionWithlCommandRotatesRightToSouthWhenPointingEast stamp: 'NB 5/14/2023 23:12:11'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 23:13:11' prior: 50679205!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		
		self assertCommandIsValid: aCommand.
		
		
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - facing point.
			].
		aCommand = $f  ifTrue:[
						xyPosition := xyPosition + facing point.
			].
		aCommand = $l ifTrue: [
			facing:= facing rotate90DegreesToLeft.
		] . 
		aCommand = $r ifTrue: [
			(facing isKindOf: North) ifTrue: [facing:= East new] ifFalse: [facing:= South new.]
		]  
		
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test20MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test21MarsRoverAtAPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test22MarsRoverAtAPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/14/2023 23:13:12'!
PASSED!

!testRun: #MarsRoverTests #test23MarsRoverAtAPositionWithlCommandRotatesRightToSouthWhenPointingEast stamp: 'NB 5/14/2023 23:13:12'!
PASSED!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 23:13:38'!
test24MarsRoverAtAPositionWithlCommandRotatesRightToWestWhenPointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: east.
	aMarsRover receiveCommands: 'r'.
	
	self assert: (aMarsRover isAt: 0@0 facing: south).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 23:13:46' prior: 50679441!
test24MarsRoverAtAPositionWithlCommandRotatesRightToWestWhenPointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: south.
	aMarsRover receiveCommands: 'r'.
	
	self assert: (aMarsRover isAt: 0@0 facing: west).! !

!testRun: #MarsRoverTests #test24MarsRoverAtAPositionWithlCommandRotatesRightToWestWhenPointingSouth stamp: 'NB 5/14/2023 23:13:47'!
FAILURE!
!CardinalPoint methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 23:14:04'!
rotate90DegreesToRight

	self subclassResponsibility ! !
!North methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 23:14:33' overrides: 50679466!
rotate90DegreesToRight

	^East new! !
!West methodsFor: 'category-name' stamp: 'NB 5/14/2023 23:15:02' overrides: 50679466!
rotate90DegreesToRight

	^South new.! !

!methodRemoval: West #rotate90DegreesToRight stamp: 'NB 5/14/2023 23:15:46'!
rotate90DegreesToRight

	^South new.!
!East methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 23:16:04' overrides: 50679466!
rotate90DegreesToRight

	^South new.! !
!South methodsFor: 'as yet unclassified' stamp: 'NB 5/14/2023 23:16:17' overrides: 50679466!
rotate90DegreesToRight

	^West new! !
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 23:16:36' prior: 50679327!
receiveCommands: aPackageOfCommands 

	
	aPackageOfCommands do: [:aCommand | 
		
		self assertCommandIsValid: aCommand.
		
		
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - facing point.
			].
		aCommand = $f  ifTrue:[
						xyPosition := xyPosition + facing point.
			].
		aCommand = $l ifTrue: [
			facing:= facing rotate90DegreesToLeft.
		] . 
		aCommand = $r ifTrue: [
			facing:= facing rotate90DegreesToRight .
		]  
		
	]. ! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 23:16:37'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 23:16:37'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 23:16:37'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 23:16:37'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 23:16:37'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 23:16:37'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 23:16:37'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 23:16:37'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 23:16:37'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 23:16:37'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 23:16:37'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 23:16:37'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 23:16:37'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 23:16:37'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 23:16:37'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 23:16:37'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 23:16:38'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 23:16:38'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/14/2023 23:16:38'!
PASSED!

!testRun: #MarsRoverTests #test20MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/14/2023 23:16:38'!
PASSED!

!testRun: #MarsRoverTests #test21MarsRoverAtAPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/14/2023 23:16:38'!
PASSED!

!testRun: #MarsRoverTests #test22MarsRoverAtAPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/14/2023 23:16:38'!
PASSED!

!testRun: #MarsRoverTests #test23MarsRoverAtAPositionWithlCommandRotatesRightToSouthWhenPointingEast stamp: 'NB 5/14/2023 23:16:38'!
PASSED!

!testRun: #MarsRoverTests #test24MarsRoverAtAPositionWithlCommandRotatesRightToWestWhenPointingSouth stamp: 'NB 5/14/2023 23:16:38'!
PASSED!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 23:17:03'!
test25MarsRoverAtAPositionWithlCommandRotatesRightToNorthWhenPointingWest
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: west.
	aMarsRover receiveCommands: 'r'.
	
	self assert: (aMarsRover isAt: 0@0 facing: north).! !

!testRun: #MarsRoverTests #test25MarsRoverAtAPositionWithlCommandRotatesRightToNorthWhenPointingWest stamp: 'NB 5/14/2023 23:17:03'!
ERROR!
!West methodsFor: 'private' stamp: 'NB 5/14/2023 23:17:21' overrides: 50679466!
rotate90DegreesToRight
	self shouldBeImplemented.! !
!West methodsFor: 'private' stamp: 'NB 5/14/2023 23:17:33' prior: 50679624 overrides: 50679466!
rotate90DegreesToRight
	
	^North new.! !

!testRun: #MarsRoverTests #test25MarsRoverAtAPositionWithlCommandRotatesRightToNorthWhenPointingWest stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test20MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test21MarsRoverAtAPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test22MarsRoverAtAPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test23MarsRoverAtAPositionWithlCommandRotatesRightToSouthWhenPointingEast stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test24MarsRoverAtAPositionWithlCommandRotatesRightToWestWhenPointingSouth stamp: 'NB 5/14/2023 23:17:34'!
PASSED!

!testRun: #MarsRoverTests #test25MarsRoverAtAPositionWithlCommandRotatesRightToNorthWhenPointingWest stamp: 'NB 5/14/2023 23:17:34'!
PASSED!
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 23:18:50' prior: 50679492!
receiveCommands: aSequenceOfCommands 

	
	aSequenceOfCommands do: [:aCommand | 
		
		self assertCommandIsValid: aCommand.
		
		
		aCommand = $b  ifTrue:[
				xyPosition := xyPosition - facing point.
			].
		aCommand = $f  ifTrue:[
						xyPosition := xyPosition + facing point.
			].
		aCommand = $l ifTrue: [
			facing:= facing rotate90DegreesToLeft.
		] . 
		aCommand = $r ifTrue: [
			facing:= facing rotate90DegreesToRight .
		]  
		
	]. ! !
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 23:19:59'!
processCommand: aCommand

	aCommand = $b  ifTrue:[
				xyPosition := xyPosition - facing point.
			].
		aCommand = $f  ifTrue:[
						xyPosition := xyPosition + facing point.
			].
		aCommand = $l ifTrue: [
			facing:= facing rotate90DegreesToLeft.
		] . 
		aCommand = $r ifTrue: [
			facing:= facing rotate90DegreesToRight .
		]! !
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 23:19:59' prior: 50679742!
receiveCommands: aSequenceOfCommands 

	
	aSequenceOfCommands do: [:aCommand | 
		
		self assertCommandIsValid: aCommand.
		
		
		self processCommand: aCommand  
		
	]. ! !
!MarsRover methodsFor: 'commands' stamp: 'NB 5/14/2023 23:20:24' prior: 50679771!
receiveCommands: aSequenceOfCommands 

	
	aSequenceOfCommands do: [:aCommand | 
			
		self assertCommandIsValid: aCommand.
		self processCommand: aCommand  
	]. ! !
!MarsRover methodsFor: 'moving - private' stamp: 'NB 5/14/2023 23:21:14' prior: 50679758!
processCommand: aCommand

	aCommand = $b  ifTrue:[
		xyPosition := xyPosition - facing point.
	].
	aCommand = $f  ifTrue:[
		xyPosition := xyPosition + facing point.
	].
	aCommand = $l ifTrue: [
		facing:= facing rotate90DegreesToLeft.
	]. 
	aCommand = $r ifTrue: [
		facing:= facing rotate90DegreesToRight .
	]! !
!MarsRover methodsFor: 'moving - private' stamp: 'NB 5/14/2023 23:21:31' prior: 50679787!
processCommand: aCommand

	aCommand = $f  ifTrue:[
		xyPosition := xyPosition + facing point.
	].
	aCommand = $b  ifTrue:[
		xyPosition := xyPosition - facing point.
	].
	aCommand = $l ifTrue: [
		facing:= facing rotate90DegreesToLeft.
	]. 
	aCommand = $r ifTrue: [
		facing:= facing rotate90DegreesToRight .
	]! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test20MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test21MarsRoverAtAPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test22MarsRoverAtAPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test23MarsRoverAtAPositionWithlCommandRotatesRightToSouthWhenPointingEast stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test24MarsRoverAtAPositionWithlCommandRotatesRightToWestWhenPointingSouth stamp: 'NB 5/14/2023 23:21:33'!
PASSED!

!testRun: #MarsRoverTests #test25MarsRoverAtAPositionWithlCommandRotatesRightToNorthWhenPointingWest stamp: 'NB 5/14/2023 23:21:33'!
PASSED!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 23:23:13' prior: 50677816!
test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: north.
	
	
	self   should: [aMarsRover receiveCommands: 'fxfff'] 
		raise: Error 
		withExceptionDo: [:error | self assert: (aMarsRover isAt: 2@0 facing: north)]
		description: MarsRover invalidCommandDescription .! !

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 23:23:14'!
FAILURE!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/14/2023 23:23:21' prior: 50679918!
test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 1@0 facing: north.
	
	
	self   should: [aMarsRover receiveCommands: 'fxfff'] 
		raise: Error 
		withExceptionDo: [:error | self assert: (aMarsRover isAt: 1@1 facing: north)]
		description: MarsRover invalidCommandDescription .! !

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test20MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test21MarsRoverAtAPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test22MarsRoverAtAPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test23MarsRoverAtAPositionWithlCommandRotatesRightToSouthWhenPointingEast stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test24MarsRoverAtAPositionWithlCommandRotatesRightToWestWhenPointingSouth stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

!testRun: #MarsRoverTests #test25MarsRoverAtAPositionWithlCommandRotatesRightToNorthWhenPointingWest stamp: 'NB 5/14/2023 23:23:23'!
PASSED!

----SNAPSHOT----(14 May 2023 23:23:40) CuisUniversity-5706.image priorSource: 11039703!

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test20MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test21MarsRoverAtAPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test22MarsRoverAtAPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test23MarsRoverAtAPositionWithlCommandRotatesRightToSouthWhenPointingEast stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test24MarsRoverAtAPositionWithlCommandRotatesRightToWestWhenPointingSouth stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test25MarsRoverAtAPositionWithlCommandRotatesRightToNorthWhenPointingWest stamp: 'NB 5/14/2023 23:24:17'!
PASSED!

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test20MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test21MarsRoverAtAPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test22MarsRoverAtAPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test23MarsRoverAtAPositionWithlCommandRotatesRightToSouthWhenPointingEast stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test24MarsRoverAtAPositionWithlCommandRotatesRightToWestWhenPointingSouth stamp: 'NB 5/14/2023 23:33:17'!
PASSED!

!testRun: #MarsRoverTests #test25MarsRoverAtAPositionWithlCommandRotatesRightToNorthWhenPointingWest stamp: 'NB 5/14/2023 23:33:17'!
PASSED!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:05:50'!
marsRoverAt00FacingNorth

	^ MarsRover startAt: 0@0 facing: north! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:05:50' prior: 50678576!
test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	aMarsRover receiveCommands: 'l'.
	
	self assert: (aMarsRover isAt: 0@0 facing: west).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:05:50' prior: 50677697!
test01MarsRoverStartAtaPositionAndFacingAcardinalPoint
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	
	self assert: (aMarsRover isAt: 0@0 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:05:50' prior: 50679084!
test22MarsRoverAtAPositionWithlCommandRotatesRightToEastWhenPointingNorth
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	aMarsRover receiveCommands: 'r'.
	
	self assert: (aMarsRover isAt: 0@0 facing: east).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:05:50' prior: 50677726!
test03MarsRoverAtAPositionWithFCommandMoveFowardOnce
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 0@1 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:05:50' prior: 50677736!
test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 0@-1 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:05:50' prior: 50677706!
test02MarsRoverWithEmptyCommandsMoveStayTheSame
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	aMarsRover receiveCommands: ''.
	
	self assert: (aMarsRover isAt: 0@0 facing: north).! !

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/15/2023 00:06:16'!
PASSED!

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test20MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test21MarsRoverAtAPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test22MarsRoverAtAPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test23MarsRoverAtAPositionWithlCommandRotatesRightToSouthWhenPointingEast stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test24MarsRoverAtAPositionWithlCommandRotatesRightToWestWhenPointingSouth stamp: 'NB 5/15/2023 00:06:19'!
PASSED!

!testRun: #MarsRoverTests #test25MarsRoverAtAPositionWithlCommandRotatesRightToNorthWhenPointingWest stamp: 'NB 5/15/2023 00:06:19'!
PASSED!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:06:57'!
marsRoverAt10FacingNorth

	^ MarsRover startAt: 1@0 facing: north! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:06:57' prior: 50679937!
test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	
	
	self   should: [aMarsRover receiveCommands: 'fxfff'] 
		raise: Error 
		withExceptionDo: [:error | self assert: (aMarsRover isAt: 1@1 facing: north)]
		description: MarsRover invalidCommandDescription .! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:06:57' prior: 50677806!
test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'fbbffb'.
	
	self assert: (aMarsRover isAt: 1@0 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:06:57' prior: 50677796!
test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'fff'.
	
	self assert: (aMarsRover isAt: 1@3 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:06:57' prior: 50677786!
test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'ff'.
	
	self assert: (aMarsRover isAt: 1@2 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:06:57' prior: 50677746!
test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 1@1 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:06:57' prior: 50677766!
test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'bb'.
	
	self assert: (aMarsRover isAt: 1@-2 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:06:57' prior: 50677776!
test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'bbb'.
	
	self assert: (aMarsRover isAt: 1@-3 facing: north).! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:06:57' prior: 50677756!
test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 1@-1 facing: north).! !

!testRun: #MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test20MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test21MarsRoverAtAPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test22MarsRoverAtAPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test23MarsRoverAtAPositionWithlCommandRotatesRightToSouthWhenPointingEast stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test24MarsRoverAtAPositionWithlCommandRotatesRightToWestWhenPointingSouth stamp: 'NB 5/15/2023 00:07:02'!
PASSED!

!testRun: #MarsRoverTests #test25MarsRoverAtAPositionWithlCommandRotatesRightToNorthWhenPointingWest stamp: 'NB 5/15/2023 00:07:02'!
PASSED!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:09:10'!
test01MarsRoverStartsAtAPositionAndFacingACardinalPoint
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	
	self assert: (aMarsRover isAt: 0@0 facing: north).! !

!methodRemoval: MarsRoverTests #test01MarsRoverStartAtaPositionAndFacingAcardinalPoint stamp: 'NB 5/15/2023 00:09:10'!
test01MarsRoverStartAtaPositionAndFacingAcardinalPoint
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	
	self assert: (aMarsRover isAt: 0@0 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:09:58'!
test02MarsRoverWithEmptyCommandsDoesNotMove
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	aMarsRover receiveCommands: ''.
	
	self assert: (aMarsRover isAt: 0@0 facing: north).! !

!methodRemoval: MarsRoverTests #test02MarsRoverWithEmptyCommandsMoveStayTheSame stamp: 'NB 5/15/2023 00:09:58'!
test02MarsRoverWithEmptyCommandsMoveStayTheSame
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	aMarsRover receiveCommands: ''.
	
	self assert: (aMarsRover isAt: 0@0 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:10:17'!
test03MarsRoverAtAPositionWithFCommandMovesForwardOnce
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 0@1 facing: north).! !

!methodRemoval: MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMoveFowardOnce stamp: 'NB 5/15/2023 00:10:17'!
test03MarsRoverAtAPositionWithFCommandMoveFowardOnce
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 0@1 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:10:30'!
test04MarsRoverAtAPositionWithBCommandMovesBackwardOnce
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 0@-1 facing: north).! !

!methodRemoval: MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/15/2023 00:10:30'!
test04MarsRoverAtAPositionWithBCommandMoveBackwardOnce
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 0@-1 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:10:43'!
test05MarsRoverAtAnyPositionWithFCommandMovesForwardOnce
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 1@1 facing: north).! !

!methodRemoval: MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce stamp: 'NB 5/15/2023 00:10:43'!
test05MarsRoverAtAnyPositionWithFCommandMoveFowardOnce
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 1@1 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:10:54'!
test06MarsRoverAtAnyPositionWithBCommandMovesBackwardOnce
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 1@-1 facing: north).! !

!methodRemoval: MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce stamp: 'NB 5/15/2023 00:10:54'!
test06MarsRoverAtAnyPositionWithBCommandMoveBackwardOnce
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 1@-1 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:11:13'!
test07MarsRoverAtAnyPositionWithTwoBCommandsMovesBackwardTwice
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'bb'.
	
	self assert: (aMarsRover isAt: 1@-2 facing: north).! !

!methodRemoval: MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice stamp: 'NB 5/15/2023 00:11:13'!
test07MarsRoverAtAnyPositionWithTwoBCommandMoveBackwardTwice
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'bb'.
	
	self assert: (aMarsRover isAt: 1@-2 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:11:27'!
test08MarsRoverAtAnyPositionWithManyBCommandsMovesBackwardManyTimes
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'bbb'.
	
	self assert: (aMarsRover isAt: 1@-3 facing: north).! !

!methodRemoval: MarsRoverTests #test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes stamp: 'NB 5/15/2023 00:11:27'!
test09MarsRoverAtAnyPositionWithManyBCommandMoveBackwardManyTimes
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'bbb'.
	
	self assert: (aMarsRover isAt: 1@-3 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:11:44'!
test09MarsRoverAtAnyPositionWithTwoFCommandsMovesForwardTwice
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'ff'.
	
	self assert: (aMarsRover isAt: 1@2 facing: north).! !

!methodRemoval: MarsRoverTests #test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice stamp: 'NB 5/15/2023 00:11:44'!
test10MarsRoverAtAnyPositionWithTwoFCommandMoveFowardTwice
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'ff'.
	
	self assert: (aMarsRover isAt: 1@2 facing: north).!

----SNAPSHOT----(15 May 2023 00:11:48) CuisUniversity-5706.image priorSource: 11149109!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:12:06'!
test10MarsRoverAtAnyPositionWithManyFCommandsMovesForwardManyTimes
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'fff'.
	
	self assert: (aMarsRover isAt: 1@3 facing: north).! !

!methodRemoval: MarsRoverTests #test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes stamp: 'NB 5/15/2023 00:12:06'!
test11MarsRoverAtAnyPositionWithManyFCommandMoveFowardManyTimes
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'fff'.
	
	self assert: (aMarsRover isAt: 1@3 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:12:19'!
test11MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'fbbffb'.
	
	self assert: (aMarsRover isAt: 1@0 facing: north).! !

!methodRemoval: MarsRoverTests #test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/15/2023 00:12:19'!
test12MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'fbbffb'.
	
	self assert: (aMarsRover isAt: 1@0 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:13:51'!
test13MarsRoverAtAPositionWithFCommandMovesForwardOncePointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: south.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 0@-1 facing: south).! !

!methodRemoval: MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth stamp: 'NB 5/15/2023 00:13:51'!
test13MarsRoverAtAPositionWithFCommandMoveFowardOncePointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: south.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 0@-1 facing: south).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:14:15'!
test03MarsRoverAtAPositionWithFCommandMovesForwardOncePointingNorth
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 0@1 facing: north).! !

!methodRemoval: MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMovesForwardOnce stamp: 'NB 5/15/2023 00:14:15'!
test03MarsRoverAtAPositionWithFCommandMovesForwardOnce
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 0@1 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:14:26'!
test04MarsRoverAtAPositionWithBCommandMovesBackwardOncePointingNorth
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 0@-1 facing: north).! !

!methodRemoval: MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMovesBackwardOnce stamp: 'NB 5/15/2023 00:14:26'!
test04MarsRoverAtAPositionWithBCommandMovesBackwardOnce
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 0@-1 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:14:35'!
test05MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingNorth
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 1@1 facing: north).! !

!methodRemoval: MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMovesForwardOnce stamp: 'NB 5/15/2023 00:14:35'!
test05MarsRoverAtAnyPositionWithFCommandMovesForwardOnce
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 1@1 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:14:45'!
test06MarsRoverAtAnyPositionWithBCommandMovesBackwardOncePointingNorth
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 1@-1 facing: north).! !

!methodRemoval: MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMovesBackwardOnce stamp: 'NB 5/15/2023 00:14:45'!
test06MarsRoverAtAnyPositionWithBCommandMovesBackwardOnce
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 1@-1 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:14:52'!
test07MarsRoverAtAnyPositionWithTwoBCommandsMovesBackwardTwicePointingNorth
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'bb'.
	
	self assert: (aMarsRover isAt: 1@-2 facing: north).! !

!methodRemoval: MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandsMovesBackwardTwice stamp: 'NB 5/15/2023 00:14:52'!
test07MarsRoverAtAnyPositionWithTwoBCommandsMovesBackwardTwice
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'bb'.
	
	self assert: (aMarsRover isAt: 1@-2 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:15:03'!
test08MarsRoverAtAnyPositionWithManyBCommandsMovesBackwardManyTimesPointingNorth
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'bbb'.
	
	self assert: (aMarsRover isAt: 1@-3 facing: north).! !

!methodRemoval: MarsRoverTests #test08MarsRoverAtAnyPositionWithManyBCommandsMovesBackwardManyTimes stamp: 'NB 5/15/2023 00:15:03'!
test08MarsRoverAtAnyPositionWithManyBCommandsMovesBackwardManyTimes
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'bbb'.
	
	self assert: (aMarsRover isAt: 1@-3 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:15:12'!
test09MarsRoverAtAnyPositionWithTwoFCommandsMovesForwardTwicePointingNorth
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'ff'.
	
	self assert: (aMarsRover isAt: 1@2 facing: north).! !

!methodRemoval: MarsRoverTests #test09MarsRoverAtAnyPositionWithTwoFCommandsMovesForwardTwice stamp: 'NB 5/15/2023 00:15:12'!
test09MarsRoverAtAnyPositionWithTwoFCommandsMovesForwardTwice
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'ff'.
	
	self assert: (aMarsRover isAt: 1@2 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:15:20'!
test10MarsRoverAtAnyPositionWithManyFCommandsMovesForwardManyTimesPointingNorth
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'fff'.
	
	self assert: (aMarsRover isAt: 1@3 facing: north).! !

!methodRemoval: MarsRoverTests #test10MarsRoverAtAnyPositionWithManyFCommandsMovesForwardManyTimes stamp: 'NB 5/15/2023 00:15:20'!
test10MarsRoverAtAnyPositionWithManyFCommandsMovesForwardManyTimes
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'fff'.
	
	self assert: (aMarsRover isAt: 1@3 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:15:27'!
test11MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimesPointingNorth
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'fbbffb'.
	
	self assert: (aMarsRover isAt: 1@0 facing: north).! !

!methodRemoval: MarsRoverTests #test11MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes stamp: 'NB 5/15/2023 00:15:27'!
test11MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimes
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt10FacingNorth.
	aMarsRover receiveCommands: 'fbbffb'.
	
	self assert: (aMarsRover isAt: 1@0 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:16:03'!
test14MarsRoverAtAPositionWithFCommandMovesBackwardsOncePointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: south.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 0@1 facing: south).! !

!methodRemoval: MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth stamp: 'NB 5/15/2023 00:16:03'!
test14MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: south.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 0@1 facing: south).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:16:17'!
test15MarsRoverAtAPositionWithFCommandMovesForwardOncePointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: east.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 1@0 facing: east).! !

!methodRemoval: MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast stamp: 'NB 5/15/2023 00:16:17'!
test15MarsRoverAtAPositionWithFCommandMoveFowardOncePointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: east.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 1@0 facing: east).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:16:27'!
test16MarsRoverAtAPositionWithFCommandMovesBackwardsOncePointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: east.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: -1@0 facing: east).! !

!methodRemoval: MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast stamp: 'NB 5/15/2023 00:16:27'!
test16MarsRoverAtAPositionWithFCommandMoveBackwardsOncePointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: east.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: -1@0 facing: east).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:16:40'!
test17MarsRoverAtAPositionWithFCommandMovesForwardOncePointingWest
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: west.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: -1@0 facing: west).! !

!methodRemoval: MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest stamp: 'NB 5/15/2023 00:16:40'!
test17MarsRoverAtAPositionWithFCommandMoveFowardOncePointingWest
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: west.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: -1@0 facing: west).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:18:44'!
test13MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: south.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 0@-1 facing: south).! !

!methodRemoval: MarsRoverTests #test13MarsRoverAtAPositionWithFCommandMovesForwardOncePointingSouth stamp: 'NB 5/15/2023 00:18:44'!
test13MarsRoverAtAPositionWithFCommandMovesForwardOncePointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: south.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 0@-1 facing: south).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:18:52'!
test14MarsRoverAtAnyPositionWithFCommandMovesBackwardsOncePointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: south.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 0@1 facing: south).! !

!methodRemoval: MarsRoverTests #test14MarsRoverAtAPositionWithFCommandMovesBackwardsOncePointingSouth stamp: 'NB 5/15/2023 00:18:52'!
test14MarsRoverAtAPositionWithFCommandMovesBackwardsOncePointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: south.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: 0@1 facing: south).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:18:58'!
test15MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: east.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 1@0 facing: east).! !

!methodRemoval: MarsRoverTests #test15MarsRoverAtAPositionWithFCommandMovesForwardOncePointingEast stamp: 'NB 5/15/2023 00:18:58'!
test15MarsRoverAtAPositionWithFCommandMovesForwardOncePointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: east.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: 1@0 facing: east).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:19:04'!
test16MarsRoverAtAnyPositionWithFCommandMovesBackwardsOncePointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: east.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: -1@0 facing: east).! !

!methodRemoval: MarsRoverTests #test16MarsRoverAtAPositionWithFCommandMovesBackwardsOncePointingEast stamp: 'NB 5/15/2023 00:19:04'!
test16MarsRoverAtAPositionWithFCommandMovesBackwardsOncePointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: east.
	aMarsRover receiveCommands: 'b'.
	
	self assert: (aMarsRover isAt: -1@0 facing: east).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:19:14'!
test17MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingWest
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: west.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: -1@0 facing: west).! !

!methodRemoval: MarsRoverTests #test17MarsRoverAtAPositionWithFCommandMovesForwardOncePointingWest stamp: 'NB 5/15/2023 00:19:14'!
test17MarsRoverAtAPositionWithFCommandMovesForwardOncePointingWest
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: west.
	aMarsRover receiveCommands: 'f'.
	
	self assert: (aMarsRover isAt: -1@0 facing: west).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:19:22'!
test18MarsRoverAtAnyPositionWithlCommandRotatesLeftToWestWhenPointingNorth
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	aMarsRover receiveCommands: 'l'.
	
	self assert: (aMarsRover isAt: 0@0 facing: west).! !

!methodRemoval: MarsRoverTests #test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/15/2023 00:19:22'!
test18MarsRoverAtAPositionWithlCommandRotatesLeftToWestWhenPointingNorth
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	aMarsRover receiveCommands: 'l'.
	
	self assert: (aMarsRover isAt: 0@0 facing: west).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:19:28'!
test19MarsRoverAtAnyPositionWithlCommandRotatesLeftToSouthWhenPointingWest
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: west.
	aMarsRover receiveCommands: 'l'.
	
	self assert: (aMarsRover isAt: 0@0 facing: south).! !

!methodRemoval: MarsRoverTests #test19MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/15/2023 00:19:28'!
test19MarsRoverAtAPositionWithlCommandRotatesLeftToSouthWhenPointingWest
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: west.
	aMarsRover receiveCommands: 'l'.
	
	self assert: (aMarsRover isAt: 0@0 facing: south).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:19:35'!
test20MarsRoverAtAnyPositionWithlCommandRotatesLeftToEastWhenPointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: south.
	aMarsRover receiveCommands: 'l'.
	
	self assert: (aMarsRover isAt: 0@0 facing: east).! !

!methodRemoval: MarsRoverTests #test20MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/15/2023 00:19:35'!
test20MarsRoverAtAPositionWithlCommandRotatesLeftToEastWhenPointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: south.
	aMarsRover receiveCommands: 'l'.
	
	self assert: (aMarsRover isAt: 0@0 facing: east).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:19:42'!
test21MarsRoverAtAnyPositionWithlCommandRotatesLeftToNorthWhenPointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: east.
	aMarsRover receiveCommands: 'l'.
	
	self assert: (aMarsRover isAt: 0@0 facing: north).! !

!methodRemoval: MarsRoverTests #test21MarsRoverAtAPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/15/2023 00:19:42'!
test21MarsRoverAtAPositionWithlCommandRotatesLeftToNorthWhenPointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: east.
	aMarsRover receiveCommands: 'l'.
	
	self assert: (aMarsRover isAt: 0@0 facing: north).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:19:49'!
test22MarsRoverAtAnyPositionWithlCommandRotatesRightToEastWhenPointingNorth
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	aMarsRover receiveCommands: 'r'.
	
	self assert: (aMarsRover isAt: 0@0 facing: east).! !

!methodRemoval: MarsRoverTests #test22MarsRoverAtAPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/15/2023 00:19:49'!
test22MarsRoverAtAPositionWithlCommandRotatesRightToEastWhenPointingNorth
	|aMarsRover|
	
	aMarsRover:= self marsRoverAt00FacingNorth.
	aMarsRover receiveCommands: 'r'.
	
	self assert: (aMarsRover isAt: 0@0 facing: east).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:19:56'!
test23MarsRoverAtAnyPositionWithlCommandRotatesRightToSouthWhenPointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: east.
	aMarsRover receiveCommands: 'r'.
	
	self assert: (aMarsRover isAt: 0@0 facing: south).! !

!methodRemoval: MarsRoverTests #test23MarsRoverAtAPositionWithlCommandRotatesRightToSouthWhenPointingEast stamp: 'NB 5/15/2023 00:19:56'!
test23MarsRoverAtAPositionWithlCommandRotatesRightToSouthWhenPointingEast
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: east.
	aMarsRover receiveCommands: 'r'.
	
	self assert: (aMarsRover isAt: 0@0 facing: south).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:20:02'!
test24MarsRoverAtAnyPositionWithlCommandRotatesRightToWestWhenPointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: south.
	aMarsRover receiveCommands: 'r'.
	
	self assert: (aMarsRover isAt: 0@0 facing: west).! !

!methodRemoval: MarsRoverTests #test24MarsRoverAtAPositionWithlCommandRotatesRightToWestWhenPointingSouth stamp: 'NB 5/15/2023 00:20:02'!
test24MarsRoverAtAPositionWithlCommandRotatesRightToWestWhenPointingSouth
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: south.
	aMarsRover receiveCommands: 'r'.
	
	self assert: (aMarsRover isAt: 0@0 facing: west).!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:20:09'!
test25MarsRoverAtAnyPositionWithlCommandRotatesRightToNorthWhenPointingWest
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: west.
	aMarsRover receiveCommands: 'r'.
	
	self assert: (aMarsRover isAt: 0@0 facing: north).! !

!methodRemoval: MarsRoverTests #test25MarsRoverAtAPositionWithlCommandRotatesRightToNorthWhenPointingWest stamp: 'NB 5/15/2023 00:20:09'!
test25MarsRoverAtAPositionWithlCommandRotatesRightToNorthWhenPointingWest
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: west.
	aMarsRover receiveCommands: 'r'.
	
	self assert: (aMarsRover isAt: 0@0 facing: north).!

----SNAPSHOT----(15 May 2023 00:20:12) CuisUniversity-5706.image priorSource: 11172932!

!testRun: #MarsRoverTests #test01MarsRoverStartsAtAPositionAndFacingACardinalPoint stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsDoesNotMove stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMovesForwardOncePointingNorth stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMovesBackwardOncePointingNorth stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingNorth stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMovesBackwardOncePointingNorth stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandsMovesBackwardTwicePointingNorth stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test08MarsRoverAtAnyPositionWithManyBCommandsMovesBackwardManyTimesPointingNorth stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithTwoFCommandsMovesForwardTwicePointingNorth stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithManyFCommandsMovesForwardManyTimesPointingNorth stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimesPointingNorth stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingSouth stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAnyPositionWithFCommandMovesBackwardsOncePointingSouth stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingEast stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAnyPositionWithFCommandMovesBackwardsOncePointingEast stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingWest stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAnyPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAnyPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test20MarsRoverAtAnyPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test21MarsRoverAtAnyPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test22MarsRoverAtAnyPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test23MarsRoverAtAnyPositionWithlCommandRotatesRightToSouthWhenPointingEast stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test24MarsRoverAtAnyPositionWithlCommandRotatesRightToWestWhenPointingSouth stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!testRun: #MarsRoverTests #test25MarsRoverAtAnyPositionWithlCommandRotatesRightToNorthWhenPointingWest stamp: 'NB 5/15/2023 00:20:15'!
PASSED!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'NB 5/15/2023 00:23:24'!
Object subclass: #MarsRover
	instanceVariableNames: 'xyPosition facing commands'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initilizacion' stamp: 'NB 5/15/2023 00:23:23' prior: 50675461!
initializeAt: aXYPoint facing: aCardinalPoint 
	xyPosition:=aXYPoint.
	facing:=aCardinalPoint.
	commands:= Dictionary new.
	commands at: $f put: [xyPosition := xyPosition + facing point.].
	commands at: $b put: [xyPosition := xyPosition - facing point].
	commands at: $l put: [facing:= facing rotate90DegreesToLeft].
	commands at: $r put: [facing:= facing rotate90DegreesToRight].! !
!MarsRover methodsFor: 'assertions' stamp: 'NB 5/15/2023 00:24:15' prior: 50679102!
assertCommandIsValid: aCommand

	^(commands includesKey: aCommand) ifFalse: [self error: self class invalidCommandDescription]! !
!MarsRover methodsFor: 'moving - private' stamp: 'NB 5/15/2023 00:24:50' prior: 50679800!
processCommand: aCommand

	(commands at: aCommand) value! !

!testRun: #MarsRoverTests #test01MarsRoverStartsAtAPositionAndFacingACardinalPoint stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsDoesNotMove stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMovesForwardOncePointingNorth stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMovesBackwardOncePointingNorth stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingNorth stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMovesBackwardOncePointingNorth stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandsMovesBackwardTwicePointingNorth stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test08MarsRoverAtAnyPositionWithManyBCommandsMovesBackwardManyTimesPointingNorth stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithTwoFCommandsMovesForwardTwicePointingNorth stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithManyFCommandsMovesForwardManyTimesPointingNorth stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimesPointingNorth stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingSouth stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAnyPositionWithFCommandMovesBackwardsOncePointingSouth stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingEast stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAnyPositionWithFCommandMovesBackwardsOncePointingEast stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingWest stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAnyPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAnyPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test20MarsRoverAtAnyPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test21MarsRoverAtAnyPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test22MarsRoverAtAnyPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test23MarsRoverAtAnyPositionWithlCommandRotatesRightToSouthWhenPointingEast stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test24MarsRoverAtAnyPositionWithlCommandRotatesRightToWestWhenPointingSouth stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!testRun: #MarsRoverTests #test25MarsRoverAtAnyPositionWithlCommandRotatesRightToNorthWhenPointingWest stamp: 'NB 5/15/2023 00:24:51'!
PASSED!

!methodRemoval: MarsRover #validCommands stamp: 'NB 5/15/2023 00:25:43'!
validCommands

	^'fblr'.!
!MarsRover methodsFor: 'initilizacion' stamp: 'NB 5/15/2023 00:26:21' prior: 50681531!
initializeAt: aXYPoint facing: aCardinalPoint 
	
	xyPosition:=aXYPoint.
	facing:=aCardinalPoint.
	
	commands:= Dictionary new.
	commands at: $f put: [xyPosition := xyPosition + facing point.].
	commands at: $b put: [xyPosition := xyPosition - facing point].
	commands at: $l put: [facing:= facing rotate90DegreesToLeft].
	commands at: $r put: [facing:= facing rotate90DegreesToRight].! !
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:27:50'!
test26
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: west.
	aMarsRover receiveCommands: 'rffblf'.
	
	self assert: (aMarsRover isAt: 1@1 facing: west).! !

!testRun: #MarsRoverTests #test26 stamp: 'NB 5/15/2023 00:27:51'!
FAILURE!
!MarsRoverTests methodsFor: 'test' stamp: 'NB 5/15/2023 00:28:15' prior: 50681686!
test26
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: west.
	aMarsRover receiveCommands: 'rffblf'.
	
	self assert: (aMarsRover isAt: -1@1 facing: west).! !

!testRun: #MarsRoverTests #test26 stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test01MarsRoverStartsAtAPositionAndFacingACardinalPoint stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsDoesNotMove stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMovesForwardOncePointingNorth stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMovesBackwardOncePointingNorth stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingNorth stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMovesBackwardOncePointingNorth stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandsMovesBackwardTwicePointingNorth stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test08MarsRoverAtAnyPositionWithManyBCommandsMovesBackwardManyTimesPointingNorth stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithTwoFCommandsMovesForwardTwicePointingNorth stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithManyFCommandsMovesForwardManyTimesPointingNorth stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimesPointingNorth stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingSouth stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAnyPositionWithFCommandMovesBackwardsOncePointingSouth stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingEast stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAnyPositionWithFCommandMovesBackwardsOncePointingEast stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingWest stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAnyPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAnyPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test20MarsRoverAtAnyPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test21MarsRoverAtAnyPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test22MarsRoverAtAnyPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test23MarsRoverAtAnyPositionWithlCommandRotatesRightToSouthWhenPointingEast stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test24MarsRoverAtAnyPositionWithlCommandRotatesRightToWestWhenPointingSouth stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test25MarsRoverAtAnyPositionWithlCommandRotatesRightToNorthWhenPointingWest stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test26 stamp: 'NB 5/15/2023 00:28:17'!
PASSED!

!testRun: #MarsRoverTests #test26 stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test01MarsRoverStartsAtAPositionAndFacingACardinalPoint stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsDoesNotMove stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMovesForwardOncePointingNorth stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMovesBackwardOncePointingNorth stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingNorth stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMovesBackwardOncePointingNorth stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandsMovesBackwardTwicePointingNorth stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test08MarsRoverAtAnyPositionWithManyBCommandsMovesBackwardManyTimesPointingNorth stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithTwoFCommandsMovesForwardTwicePointingNorth stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithManyFCommandsMovesForwardManyTimesPointingNorth stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimesPointingNorth stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingSouth stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAnyPositionWithFCommandMovesBackwardsOncePointingSouth stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingEast stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAnyPositionWithFCommandMovesBackwardsOncePointingEast stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingWest stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAnyPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAnyPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test20MarsRoverAtAnyPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test21MarsRoverAtAnyPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test22MarsRoverAtAnyPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test23MarsRoverAtAnyPositionWithlCommandRotatesRightToSouthWhenPointingEast stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test24MarsRoverAtAnyPositionWithlCommandRotatesRightToWestWhenPointingSouth stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test25MarsRoverAtAnyPositionWithlCommandRotatesRightToNorthWhenPointingWest stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!testRun: #MarsRoverTests #test26 stamp: 'NB 5/15/2023 00:28:27'!
PASSED!

!methodRemoval: MarsRoverTests #test26 stamp: 'NB 5/15/2023 00:28:32'!
test26
	|aMarsRover|
	
	aMarsRover:= MarsRover startAt: 0@0 facing: west.
	aMarsRover receiveCommands: 'rffblf'.
	
	self assert: (aMarsRover isAt: -1@1 facing: west).!

!testRun: #MarsRoverTests #test01MarsRoverStartsAtAPositionAndFacingACardinalPoint stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsDoesNotMove stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMovesForwardOncePointingNorth stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMovesBackwardOncePointingNorth stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingNorth stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMovesBackwardOncePointingNorth stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandsMovesBackwardTwicePointingNorth stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test08MarsRoverAtAnyPositionWithManyBCommandsMovesBackwardManyTimesPointingNorth stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithTwoFCommandsMovesForwardTwicePointingNorth stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithManyFCommandsMovesForwardManyTimesPointingNorth stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimesPointingNorth stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingSouth stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAnyPositionWithFCommandMovesBackwardsOncePointingSouth stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingEast stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAnyPositionWithFCommandMovesBackwardsOncePointingEast stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingWest stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAnyPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAnyPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test20MarsRoverAtAnyPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test21MarsRoverAtAnyPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test22MarsRoverAtAnyPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test23MarsRoverAtAnyPositionWithlCommandRotatesRightToSouthWhenPointingEast stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test24MarsRoverAtAnyPositionWithlCommandRotatesRightToWestWhenPointingSouth stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

!testRun: #MarsRoverTests #test25MarsRoverAtAnyPositionWithlCommandRotatesRightToNorthWhenPointingWest stamp: 'NB 5/15/2023 00:28:39'!
PASSED!

----SNAPSHOT----(15 May 2023 00:29:20) CuisUniversity-5706.image priorSource: 11192314!

----SNAPSHOT----(15 May 2023 00:29:22) CuisUniversity-5706.image priorSource: 11212810!

----SNAPSHOT----(15 May 2023 00:30:21) CuisUniversity-5706.image priorSource: 11212899!

!testRun: #MarsRoverTests #test01MarsRoverStartsAtAPositionAndFacingACardinalPoint stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverWithEmptyCommandsDoesNotMove stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverAtAPositionWithFCommandMovesForwardOncePointingNorth stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverAtAPositionWithBCommandMovesBackwardOncePointingNorth stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingNorth stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverAtAnyPositionWithBCommandMovesBackwardOncePointingNorth stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverAtAnyPositionWithTwoBCommandsMovesBackwardTwicePointingNorth stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test08MarsRoverAtAnyPositionWithManyBCommandsMovesBackwardManyTimesPointingNorth stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverAtAnyPositionWithTwoFCommandsMovesForwardTwicePointingNorth stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverAtAnyPositionWithManyFCommandsMovesForwardManyTimesPointingNorth stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverAtAnyPositionWithFBCommandsMovesFrontAndBackManyTimesPointingNorth stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverReceivesInvalidCommandRaisesErrorAndStopsProcessingRemainingCommands stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingSouth stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test14MarsRoverAtAnyPositionWithFCommandMovesBackwardsOncePointingSouth stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test15MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingEast stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test16MarsRoverAtAnyPositionWithFCommandMovesBackwardsOncePointingEast stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test17MarsRoverAtAnyPositionWithFCommandMovesForwardOncePointingWest stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test18MarsRoverAtAnyPositionWithlCommandRotatesLeftToWestWhenPointingNorth stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test19MarsRoverAtAnyPositionWithlCommandRotatesLeftToSouthWhenPointingWest stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test20MarsRoverAtAnyPositionWithlCommandRotatesLeftToEastWhenPointingSouth stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test21MarsRoverAtAnyPositionWithlCommandRotatesLeftToNorthWhenPointingEast stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test22MarsRoverAtAnyPositionWithlCommandRotatesRightToEastWhenPointingNorth stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test23MarsRoverAtAnyPositionWithlCommandRotatesRightToSouthWhenPointingEast stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test24MarsRoverAtAnyPositionWithlCommandRotatesRightToWestWhenPointingSouth stamp: 'NB 5/15/2023 00:30:23'!
PASSED!

!testRun: #MarsRoverTests #test25MarsRoverAtAnyPositionWithlCommandRotatesRightToNorthWhenPointingWest stamp: 'NB 5/15/2023 00:30:23'!
PASSED!