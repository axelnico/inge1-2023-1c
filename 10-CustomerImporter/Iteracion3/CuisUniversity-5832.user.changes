

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (27 June 2023 22:42:29) as /Users/nico/Documents/inge1/cuis-images/macos64 9/CuisUniversity-5832.image!


----End fileIn of /Users/nico/Documents/inge1/inge1-2023-1c/10-CustomerImporter/Iteracion2/CustomerImporter.st----!
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 22:54:54'!
assertNoCustomerWasImported

	^ self assert: 0 equals: (session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 22:54:54' prior: 50624419!
test04CannotImportAnInputWithWrongCustomerRecordLength
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'C,Pepe') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertNoCustomerWasImported.
		self assert: CustomerImporter cannotImportStreamWithWrongCustomerRecordLength equals: anError messageText ].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 22:54:54' prior: 50624403!
test03CannotImportAnInputWithWrongRecordIdentification
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'X,Pepe,Sanchez,D,22333444') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertNoCustomerWasImported.
		self assert: CustomerImporter cannotImportStreamWithInvalidRecorIdentification equals: anError messageText ].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 22:54:54' prior: 50624390!
test02CannotImportAnEmptyInput
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: '
') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertNoCustomerWasImported.
		self assert: CustomerImporter cannotImportEmptyStream equals: anError messageText ].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 22:56:04'!
test01CanImportCorrectlyAValidInputWithTwoCustomers

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!methodRemoval: ImportTest #test01ImportValidInputWithTwoCustomers stamp: 'NB 6/27/2023 22:56:04'!
test01ImportValidInputWithTwoCustomers

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 22:58:10' prior: 50624984!
test03CannotImportAnInputWithWrongRecordIdentification
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'CCC,Pepe,Sanchez,D,22333444') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertNoCustomerWasImported.
		self assert: CustomerImporter cannotImportStreamWithInvalidRecorIdentification equals: anError messageText ].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 22:59:13'!
test03CannotImportAnInputThatHasWrongRecordIdentificationStartingWithC
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'CCC,Pepe,Sanchez,D,22333444') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertNoCustomerWasImported.
		self assert: CustomerImporter cannotImportStreamWithInvalidRecorIdentification equals: anError messageText ].
! !

!methodRemoval: ImportTest #test03CannotImportAnInputWithWrongRecordIdentification stamp: 'NB 6/27/2023 22:59:13'!
test03CannotImportAnInputWithWrongRecordIdentification
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'CCC,Pepe,Sanchez,D,22333444') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertNoCustomerWasImported.
		self assert: CustomerImporter cannotImportStreamWithInvalidRecorIdentification equals: anError messageText ].
!
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:00:17'!
test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'C,Pepe') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertNoCustomerWasImported.
		self assert: CustomerImporter cannotImportStreamWithWrongCustomerRecordLength equals: anError messageText ].
! !

!methodRemoval: ImportTest #test04CannotImportAnInputWithWrongCustomerRecordLength stamp: 'NB 6/27/2023 23:00:17'!
test04CannotImportAnInputWithWrongCustomerRecordLength
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'C,Pepe') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertNoCustomerWasImported.
		self assert: CustomerImporter cannotImportStreamWithWrongCustomerRecordLength equals: anError messageText ].
!
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:03:07'!
test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assert: 1 equals: (session selectAllOfType: Customer) size.
		self assert: 0 equals: (session selectAllOfType: Address ) size.
		self assert: CustomerImporter cannotImportAnInputWithWrongAddressRecordLength equals: anError messageText ].
! !

!methodRemoval: ImportTest #test05CannotImportAnInputWithWrongAddressRecordLength stamp: 'NB 6/27/2023 23:03:07'!
test05CannotImportAnInputWithWrongAddressRecordLength
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assert: 1 equals: (session selectAllOfType: Customer) size.
		self assert: 0 equals: (session selectAllOfType: Address ) size.
		self assert: CustomerImporter cannotImportAnInputWithWrongAddressRecordLength equals: anError messageText ].
!
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:04:17'!
assertOnlyOneCustomerWasImportedWithoutAddresses

	self assert: 1 equals: (session selectAllOfType: Customer) size.
		self assert: 0 equals: (session selectAllOfType: Address ) size! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:04:17' prior: 50625107!
test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertOnlyOneCustomerWasImportedWithoutAddresses.
		self assert: CustomerImporter cannotImportAnInputWithWrongAddressRecordLength equals: anError messageText ].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:05:41'!
test06CannotImportAnInputThatHasWrongRecordIdentificationStartingWithA
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'CCC,Pepe,Sanchez,D,22333444') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertNoCustomerWasImported.
		self assert: CustomerImporter cannotImportStreamWithInvalidRecorIdentification equals: anError messageText ].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:06:18' prior: 50625169!
test06CannotImportAnInputThatHasWrongRecordIdentificationStartingWithA
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D,22333444
AAA,San Martin,3322,Olivos,1636,BsAs') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertNoCustomerWasImported.
		self assert: CustomerImporter cannotImportStreamWithInvalidRecorIdentification equals: anError messageText ].
! !

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongRecordIdentificationStartingWithA stamp: 'NB 6/27/2023 23:06:20'!
FAILURE!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/27/2023 23:06:24'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/27/2023 23:06:27'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongRecordIdentificationStartingWithC stamp: 'NB 6/27/2023 23:06:29'!
FAILURE!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongRecordIdentificationStartingWithC stamp: 'NB 6/27/2023 23:06:29'!
FAILURE!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/27/2023 23:06:35'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/27/2023 23:06:42'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongRecordIdentificationStartingWithA stamp: 'NB 6/27/2023 23:06:44'!
FAILURE!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongRecordIdentificationStartingWithA stamp: 'NB 6/27/2023 23:06:45'!
FAILURE!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongRecordIdentificationStartingWithC stamp: 'NB 6/27/2023 23:06:50'!
FAILURE!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongRecordIdentificationStartingWithC stamp: 'NB 6/27/2023 23:06:50'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'NB 6/27/2023 23:07:32' prior: 50624806!
isCustomer

	^ record first = 'C'! !

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongRecordIdentificationStartingWithC stamp: 'NB 6/27/2023 23:07:44'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongRecordIdentificationStartingWithA stamp: 'NB 6/27/2023 23:07:47'!
FAILURE!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongRecordIdentificationStartingWithA stamp: 'NB 6/27/2023 23:07:47'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'NB 6/27/2023 23:08:12' prior: 50624802!
isAddress

	^ record first = 'A'! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/27/2023 23:08:14'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/27/2023 23:08:15'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongRecordIdentificationStartingWithC stamp: 'NB 6/27/2023 23:08:15'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/27/2023 23:08:15'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/27/2023 23:08:15'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongRecordIdentificationStartingWithA stamp: 'NB 6/27/2023 23:08:16'!
FAILURE!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongRecordIdentificationStartingWithA stamp: 'NB 6/27/2023 23:08:16'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:08:33' prior: 50625185!
test06CannotImportAnInputThatHasWrongRecordIdentificationStartingWithA
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D,22333444
AAA,San Martin,3322,Olivos,1636,BsAs') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertOnlyOneCustomerWasImportedWithoutAddresses.
		self assert: CustomerImporter cannotImportStreamWithInvalidRecorIdentification equals: anError messageText ].
! !

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongRecordIdentificationStartingWithA stamp: 'NB 6/27/2023 23:08:34'!
PASSED!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/27/2023 23:08:34'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/27/2023 23:08:35'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongRecordIdentificationStartingWithC stamp: 'NB 6/27/2023 23:08:35'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/27/2023 23:08:35'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/27/2023 23:08:35'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongRecordIdentificationStartingWithA stamp: 'NB 6/27/2023 23:08:36'!
PASSED!

----SNAPSHOT----(27 June 2023 23:08:39) CuisUniversity-5832.image priorSource: 9366758!
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:09:10'!
test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'CCC,Pepe,Sanchez,D,22333444') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertNoCustomerWasImported.
		self assert: CustomerImporter cannotImportStreamWithInvalidRecorIdentification equals: anError messageText ].
! !

!methodRemoval: ImportTest #test03CannotImportAnInputThatHasWrongRecordIdentificationStartingWithC stamp: 'NB 6/27/2023 23:09:10'!
test03CannotImportAnInputThatHasWrongRecordIdentificationStartingWithC
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'CCC,Pepe,Sanchez,D,22333444') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertNoCustomerWasImported.
		self assert: CustomerImporter cannotImportStreamWithInvalidRecorIdentification equals: anError messageText ].
!
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:09:21'!
test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D,22333444
AAA,San Martin,3322,Olivos,1636,BsAs') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertOnlyOneCustomerWasImportedWithoutAddresses.
		self assert: CustomerImporter cannotImportStreamWithInvalidRecorIdentification equals: anError messageText ].
! !

!methodRemoval: ImportTest #test06CannotImportAnInputThatHasWrongRecordIdentificationStartingWithA stamp: 'NB 6/27/2023 23:09:21'!
test06CannotImportAnInputThatHasWrongRecordIdentificationStartingWithA
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D,22333444
AAA,San Martin,3322,Olivos,1636,BsAs') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertOnlyOneCustomerWasImportedWithoutAddresses.
		self assert: CustomerImporter cannotImportStreamWithInvalidRecorIdentification equals: anError messageText ].
!
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:10:39'!
test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'C,Pepe') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertNoCustomerWasImported.
		self assert: CustomerImporter cannotImportStreamWithWrongCustomerRecordLength equals: anError messageText ].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:11:14' prior: 50625411!
test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D,22333444,aaa') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertNoCustomerWasImported.
		self assert: CustomerImporter cannotImportStreamWithWrongCustomerRecordLength equals: anError messageText ].
! !

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/27/2023 23:11:25'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'NB 6/27/2023 23:12:27' prior: 50624778!
importCustomer

			(record size = 4) ifFalse: [self error: self class cannotImportStreamWithWrongCustomerRecordLength].
			
			customer := Customer 
				firstName: record second 
				lastName: record third 
				identificationType: record fourth 
				identificationNumber: record fifth.
			session persist: customer.! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/27/2023 23:12:28'!
ERROR!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/27/2023 23:12:28'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/27/2023 23:12:28'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/27/2023 23:12:28'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/27/2023 23:12:28'!
FAILURE!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/27/2023 23:12:28'!
FAILURE!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/27/2023 23:12:29'!
PASSED!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/27/2023 23:12:31'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'NB 6/27/2023 23:12:48' prior: 50625446!
importCustomer

			(record size = 5) ifFalse: [self error: self class cannotImportStreamWithWrongCustomerRecordLength].
			
			customer := Customer 
				firstName: record second 
				lastName: record third 
				identificationType: record fourth 
				identificationNumber: record fifth.
			session persist: customer.! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/27/2023 23:12:50'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/27/2023 23:12:51'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/27/2023 23:12:51'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/27/2023 23:12:51'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/27/2023 23:12:51'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/27/2023 23:12:51'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/27/2023 23:12:51'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:17:27'!
test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertOnlyOneCustomerWasImportedWithoutAddresses.
		self assert: CustomerImporter cannotImportAnInputWithWrongAddressRecordLength equals: anError messageText ].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:17:54' prior: 50625531!
test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs,aaa') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertOnlyOneCustomerWasImportedWithoutAddresses.
		self assert: CustomerImporter cannotImportAnInputWithWrongAddressRecordLength equals: anError messageText ].
! !

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/27/2023 23:18:10'!
FAILURE!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/27/2023 23:18:10'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'NB 6/27/2023 23:18:26' prior: 50624764!
importAddress
	
	| newAddress |
			(record size = 6) ifFalse: [self error: self class cannotImportAnInputWithWrongAddressRecordLength ].
			
			newAddress := Address 
				streetName: record second 
				streetNumber: record third asNumber 
				town: record fourth 
				zipCode: record fifth asNumber	 
				province: record sixth. 
			customer addAddress: newAddress.! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/27/2023 23:18:28'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/27/2023 23:18:28'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/27/2023 23:18:28'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/27/2023 23:18:28'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/27/2023 23:18:29'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/27/2023 23:18:29'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/27/2023 23:18:29'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/27/2023 23:18:29'!
PASSED!

----SNAPSHOT----(27 June 2023 23:18:34) CuisUniversity-5832.image priorSource: 9398072!
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:21:01'!
test09CannotImportAnInputWithAnAddressRecordWithoutACustomer
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs,aaa') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertOnlyOneCustomerWasImportedWithoutAddresses.
		self assert: CustomerImporter cannotImportAnInputWithWrongAddressRecordLength equals: anError messageText ].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:21:35' prior: 50625622!
test09CannotImportAnInputWithAnAddressRecordWithoutACustomer
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs,aaa') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assert: CustomerImporter cannotImportAnInputWithWrongAddressRecordLength equals: anError messageText ].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:21:48' prior: 50625639!
test09CannotImportAnInputWithAnAddressRecordWithoutACustomer
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assert: CustomerImporter cannotImportAnInputWithWrongAddressRecordLength equals: anError messageText ].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:22:27' prior: 50625653!
test09CannotImportAnInputWithAnAddressRecordWithoutACustomer
	
	
	self should: 
	[CustomerImporter valueFrom: (ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs') into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assert: CustomerImporter cannotImportAnAddressRecordWithoutACustomer equals: anError messageText ].
! !

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/27/2023 23:22:29'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'NB 6/27/2023 23:24:41' prior: 50625573!
importAddress
	
	| newAddress |
			(record size = 6) ifFalse: [self error: self class cannotImportAnInputWithWrongAddressRecordLength ].
			
			customer ifNil: [self error: self class].
			
			newAddress := Address 
				streetName: record second 
				streetNumber: record third asNumber 
				town: record fourth 
				zipCode: record fifth asNumber	 
				province: record sixth. 
			customer addAddress: newAddress.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'NB 6/27/2023 23:24:56' prior: 50625685!
importAddress
	
	| newAddress |
			(record size = 6) ifFalse: [self error: self class cannotImportAnInputWithWrongAddressRecordLength ].
			
			customer ifNil: [self error: self class cannotImportAnAddressRecordWithoutACustomer].
			
			newAddress := Address 
				streetName: record second 
				streetNumber: record third asNumber 
				town: record fourth 
				zipCode: record fifth asNumber	 
				province: record sixth. 
			customer addAddress: newAddress.! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/27/2023 23:24:57'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/27/2023 23:24:58'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/27/2023 23:24:58'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/27/2023 23:24:58'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/27/2023 23:24:58'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/27/2023 23:24:59'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/27/2023 23:24:59'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/27/2023 23:24:59'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/27/2023 23:24:59'!
ERROR!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/27/2023 23:24:59'!
ERROR!
!CustomerImporter class methodsFor: 'error description' stamp: 'NB 6/27/2023 23:25:05'!
cannotImportAnAddressRecordWithoutACustomer
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error description' stamp: 'NB 6/27/2023 23:25:19' prior: 50625758!
cannotImportAnAddressRecordWithoutACustomer
	
	^'Cannot import an address without a customer'.! !

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/27/2023 23:25:20'!
PASSED!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/27/2023 23:25:25'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/27/2023 23:25:25'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/27/2023 23:25:26'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/27/2023 23:25:26'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/27/2023 23:25:26'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/27/2023 23:25:26'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/27/2023 23:25:26'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/27/2023 23:25:27'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/27/2023 23:25:27'!
PASSED!

----SNAPSHOT----(27 June 2023 23:25:37) CuisUniversity-5832.image priorSource: 9406986!

----SNAPSHOT----(27 June 2023 23:26:14) CuisUniversity-5832.image priorSource: 9413077!
!CustomerImporter methodsFor: 'evaluating' stamp: 'NB 6/27/2023 23:27:35'!
assertCustomerRecordSizeIsValid

	^ (record size = 5) ifFalse: [self error: self class cannotImportStreamWithWrongCustomerRecordLength]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'NB 6/27/2023 23:27:35' prior: 50625491!
importCustomer

			self assertCustomerRecordSizeIsValid.
			
			customer := Customer 
				firstName: record second 
				lastName: record third 
				identificationType: record fourth 
				identificationNumber: record fifth.
			session persist: customer.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'NB 6/27/2023 23:30:29'!
assertAddressRecordSizeIsValid

	^ (record size = 6) ifFalse: [self error: self class cannotImportAnInputWithWrongAddressRecordLength ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'NB 6/27/2023 23:30:29' prior: 50625701!
importAddress
	
	| newAddress |
			self assertAddressRecordSizeIsValid.
			
			customer ifNil: [self error: self class cannotImportAnAddressRecordWithoutACustomer].
			
			newAddress := Address 
				streetName: record second 
				streetNumber: record third asNumber 
				town: record fourth 
				zipCode: record fifth asNumber	 
				province: record sixth. 
			customer addAddress: newAddress.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'NB 6/27/2023 23:31:01'!
assertCustomerWasImported

	^ customer ifNil: [self error: self class cannotImportAnAddressRecordWithoutACustomer]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'NB 6/27/2023 23:31:01' prior: 50625842!
importAddress
	
	| newAddress |
			self assertAddressRecordSizeIsValid.
			
			self assertCustomerWasImported.
			
			newAddress := Address 
				streetName: record second 
				streetNumber: record third asNumber 
				town: record fourth 
				zipCode: record fifth asNumber	 
				province: record sixth. 
			customer addAddress: newAddress.! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'NB 6/27/2023 23:33:15' prior: 50624791!
importRecord

	record isEmpty ifTrue: [self error: self class cannotImportEmptyStream].
	
	(self isCustomer) ifTrue: [ ^self importCustomer].
	(self isAddress) ifTrue: [ ^self importAddress].
	
	self error: self class cannotImportStreamWithInvalidRecorIdentification. ! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'NB 6/27/2023 23:34:27'!
assertRecordIsNotEmpty

	^ record isEmpty ifTrue: [self error: self class cannotImportEmptyStream]! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'NB 6/27/2023 23:34:27' prior: 50625878!
importRecord

	self assertRecordIsNotEmpty.
	
	(self isCustomer) ifTrue: [ ^self importCustomer].
	(self isAddress) ifTrue: [ ^self importAddress].
	
	self error: self class cannotImportStreamWithInvalidRecorIdentification. ! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:42:59'!
emptyInput


	^ (ReadStream on: '
') into: session.
! !
!ImportTest methodsFor: 'test data' stamp: 'NB 6/27/2023 23:43:36' prior: 50625907!
emptyInput


	^ReadStream on: '
'
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:43:49' prior: 50624999!
test02CannotImportAnEmptyInput
	
	
	self should: 
	[CustomerImporter valueFrom: self emptyInput into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertNoCustomerWasImported.
		self assert: CustomerImporter cannotImportEmptyStream equals: anError messageText ].
! !

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/27/2023 23:43:50'!
PASSED!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/27/2023 23:43:51'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/27/2023 23:43:51'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/27/2023 23:43:51'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/27/2023 23:43:51'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/27/2023 23:43:52'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/27/2023 23:43:52'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/27/2023 23:43:52'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/27/2023 23:43:52'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/27/2023 23:43:52'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:45:22'!
invalidInputWithWrongCustomerRecordIdentification

	^ ReadStream on: 'CCC,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:45:22' prior: 50625343!
test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC
	
	
	self should: 
	[CustomerImporter valueFrom: (self invalidInputWithWrongCustomerRecordIdentification) into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertNoCustomerWasImported.
		self assert: CustomerImporter cannotImportStreamWithInvalidRecorIdentification equals: anError messageText ].
! !

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/27/2023 23:45:28'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:46:09'!
invalidInputWithACustomerRecordWithLessThanFiveFields

	^ ReadStream on: 'C,Pepe'! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:46:09' prior: 50625078!
test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields
	
	
	self should: 
	[CustomerImporter valueFrom: (self invalidInputWithACustomerRecordWithLessThanFiveFields) into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertNoCustomerWasImported.
		self assert: CustomerImporter cannotImportStreamWithWrongCustomerRecordLength equals: anError messageText ].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:46:43'!
invalidInputWithanAddressRecordWithLessThanSixFields

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin'! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:46:43' prior: 50625153!
test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields
	
	
	self should: 
	[CustomerImporter valueFrom: (self invalidInputWithanAddressRecordWithLessThanSixFields) into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertOnlyOneCustomerWasImportedWithoutAddresses.
		self assert: CustomerImporter cannotImportAnInputWithWrongAddressRecordLength equals: anError messageText ].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:47:12'!
invalidInputWithWrongAddressRecordIdentification

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444
AAA,San Martin,3322,Olivos,1636,BsAs'! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:47:12' prior: 50625375!
test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA
	
	
	self should: 
	[CustomerImporter valueFrom: (self invalidInputWithWrongAddressRecordIdentification) into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertOnlyOneCustomerWasImportedWithoutAddresses.
		self assert: CustomerImporter cannotImportStreamWithInvalidRecorIdentification equals: anError messageText ].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:47:54'!
invalidInputWithACustomerRecordWithMoreThanFiveFields

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444,aaa'! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:47:54' prior: 50625426!
test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields
	
	
	self should: 
	[CustomerImporter valueFrom: (self invalidInputWithACustomerRecordWithMoreThanFiveFields) into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertNoCustomerWasImported.
		self assert: CustomerImporter cannotImportStreamWithWrongCustomerRecordLength equals: anError messageText ].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:48:04'!
invalidInputWithAnAddressRecordWithLessThanSixFields

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'NB 6/27/2023 23:48:04' prior: 50626021!
test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields
	
	
	self should: 
	[CustomerImporter valueFrom: (self invalidInputWithAnAddressRecordWithLessThanSixFields) into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertOnlyOneCustomerWasImportedWithoutAddresses.
		self assert: CustomerImporter cannotImportAnInputWithWrongAddressRecordLength equals: anError messageText ].
! !

!methodRemoval: ImportTest #invalidInputWithanAddressRecordWithLessThanSixFields stamp: 'NB 6/27/2023 23:48:04'!
invalidInputWithanAddressRecordWithLessThanSixFields

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin'!
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:49:13'!
invalidInputWithAnAddressRecordWithMoreThanSixFields

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs,aaa'! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:49:13' prior: 50625547!
test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields
	
	
	self should: 
	[CustomerImporter valueFrom: (self invalidInputWithAnAddressRecordWithMoreThanSixFields) into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertOnlyOneCustomerWasImportedWithoutAddresses.
		self assert: CustomerImporter cannotImportAnInputWithWrongAddressRecordLength equals: anError messageText ].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:49:41'!
invalidInputWithOnlyAnAddressRecord

	^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:49:41' prior: 50625667!
test09CannotImportAnInputWithAnAddressRecordWithoutACustomer
	
	
	self should: 
	[CustomerImporter valueFrom: (self invalidInputWithOnlyAnAddressRecord) into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assert: CustomerImporter cannotImportAnAddressRecordWithoutACustomer equals: anError messageText ].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/27/2023 23:59:21'!
shouldRaiseErrorWhenImporting: aReadStream withErrorMessageText: anErrorMessageText assertingThat: anAssertionBlock
	
	
	self should: 
		[CustomerImporter valueFrom: aReadStream into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assert: anErrorMessageText equals: anError messageText. 
		anAssertionBlock value].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/28/2023 00:00:30' prior: 50625916!
test02CannotImportAnEmptyInput
	
	
	self shouldRaiseErrorWhenImporting: self emptyInput  withErrorMessageText: CustomerImporter cannotImportEmptyStream  assertingThat: [self assertNoCustomerWasImported.].
	! !

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/28/2023 00:00:31'!
PASSED!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/28/2023 00:00:32'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/28/2023 00:00:32'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/28/2023 00:00:32'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/28/2023 00:00:32'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/28/2023 00:00:33'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/28/2023 00:00:33'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/28/2023 00:00:33'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/28/2023 00:00:33'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/28/2023 00:00:33'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'NB 6/28/2023 00:01:28' prior: 50625973!
test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC
	
	
	self shouldRaiseErrorWhenImporting: self invalidInputWithWrongCustomerRecordIdentification
		 withErrorMessageText: CustomerImporter cannotImportStreamWithInvalidRecorIdentification 
		assertingThat: [self assertNoCustomerWasImported.].
	
	
! !

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/28/2023 00:01:30'!
PASSED!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/28/2023 00:01:30'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/28/2023 00:01:31'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/28/2023 00:01:31'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/28/2023 00:01:31'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/28/2023 00:01:31'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/28/2023 00:01:31'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/28/2023 00:01:32'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/28/2023 00:01:32'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/28/2023 00:01:32'!
PASSED!

----SNAPSHOT----(28 June 2023 00:01:35) CuisUniversity-5832.image priorSource: 9413166!
!ImportTest methodsFor: 'tests' stamp: 'NB 6/28/2023 00:02:09' prior: 50625999!
test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields
	
	
	self shouldRaiseErrorWhenImporting: self invalidInputWithACustomerRecordWithLessThanFiveFields
		 withErrorMessageText: CustomerImporter cannotImportStreamWithWrongCustomerRecordLength
		assertingThat: [self assertNoCustomerWasImported.].
		
	
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/28/2023 00:02:53' prior: 50626088!
test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields
	
	
	self shouldRaiseErrorWhenImporting: self invalidInputWithAnAddressRecordWithLessThanSixFields
		 withErrorMessageText: CustomerImporter cannotImportAnInputWithWrongAddressRecordLength
		assertingThat: [self assertOnlyOneCustomerWasImportedWithoutAddresses].
		
	
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/28/2023 00:03:26' prior: 50626044!
test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA
	
	
	self shouldRaiseErrorWhenImporting: self invalidInputWithWrongAddressRecordIdentification
		 withErrorMessageText: CustomerImporter cannotImportStreamWithInvalidRecorIdentification
		assertingThat: [self assertOnlyOneCustomerWasImportedWithoutAddresses.].
		
	
	self should: 
	[CustomerImporter valueFrom: (self invalidInputWithWrongAddressRecordIdentification) into: session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assertOnlyOneCustomerWasImportedWithoutAddresses.
		self assert: CustomerImporter cannotImportStreamWithInvalidRecorIdentification equals: anError messageText ].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/28/2023 00:03:30' prior: 50626298!
test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA
	
	
	self shouldRaiseErrorWhenImporting: self invalidInputWithWrongAddressRecordIdentification
		 withErrorMessageText: CustomerImporter cannotImportStreamWithInvalidRecorIdentification
		assertingThat: [self assertOnlyOneCustomerWasImportedWithoutAddresses.].
		
	
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/28/2023 00:04:00' prior: 50626066!
test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields
	
	
	self shouldRaiseErrorWhenImporting: self invalidInputWithACustomerRecordWithMoreThanFiveFields
		 withErrorMessageText: CustomerImporter cannotImportStreamWithWrongCustomerRecordLength
		assertingThat: [self assertNoCustomerWasImported.].
		

! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/28/2023 00:04:34' prior: 50626118!
test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields
	
	
	self shouldRaiseErrorWhenImporting: self invalidInputWithAnAddressRecordWithMoreThanSixFields
		 withErrorMessageText: CustomerImporter cannotImportAnInputWithWrongAddressRecordLength
		assertingThat: [self assertOnlyOneCustomerWasImportedWithoutAddresses.].
		
	
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/28/2023 00:05:27' prior: 50626140!
test09CannotImportAnInputWithAnAddressRecordWithoutACustomer
	
	
	self shouldRaiseErrorWhenImporting: self invalidInputWithOnlyAnAddressRecord
		 withErrorMessageText: CustomerImporter cannotImportAnAddressRecordWithoutACustomer
		assertingThat: [].
! !
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/28/2023 00:06:16'!
assertNoAddressWasImported

	^ self assert: 0 equals: (session selectAllOfType: Address) size! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/28/2023 00:06:29' prior: 50626364!
test09CannotImportAnInputWithAnAddressRecordWithoutACustomer
	
	
	self shouldRaiseErrorWhenImporting: self invalidInputWithOnlyAnAddressRecord
		 withErrorMessageText: CustomerImporter cannotImportAnAddressRecordWithoutACustomer
		assertingThat: [self assertNoAddressWasImported].
! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/28/2023 00:06:33'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/28/2023 00:06:34'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/28/2023 00:06:34'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/28/2023 00:06:34'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/28/2023 00:06:34'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/28/2023 00:06:35'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/28/2023 00:06:35'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/28/2023 00:06:35'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/28/2023 00:06:35'!
PASSED!

----SNAPSHOT----(28 June 2023 00:06:39) CuisUniversity-5832.image priorSource: 9427758!

----SNAPSHOT----(28 June 2023 00:06:41) CuisUniversity-5832.image priorSource: 9432883!
!CustomerImporter class methodsFor: 'error description' stamp: 'NB 6/28/2023 00:09:30'!
cannotImportStreamWithInvalidRecordIdentification
	^'cannot import stream with invalid record identification'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'NB 6/28/2023 00:09:30' prior: 50626215!
test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC
	
	
	self shouldRaiseErrorWhenImporting: self invalidInputWithWrongCustomerRecordIdentification
		 withErrorMessageText: CustomerImporter cannotImportStreamWithInvalidRecordIdentification 
		assertingThat: [self assertNoCustomerWasImported.].
	
	
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'NB 6/28/2023 00:09:30' prior: 50626323!
test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA
	
	
	self shouldRaiseErrorWhenImporting: self invalidInputWithWrongAddressRecordIdentification
		 withErrorMessageText: CustomerImporter cannotImportStreamWithInvalidRecordIdentification
		assertingThat: [self assertOnlyOneCustomerWasImportedWithoutAddresses.].
		
	
! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'NB 6/28/2023 00:09:30' prior: 50625897!
importRecord

	self assertRecordIsNotEmpty.
	
	(self isCustomer) ifTrue: [ ^self importCustomer].
	(self isAddress) ifTrue: [ ^self importAddress].
	
	self error: self class cannotImportStreamWithInvalidRecordIdentification. ! !

!methodRemoval: CustomerImporter class #cannotImportStreamWithInvalidRecorIdentification stamp: 'NB 6/28/2023 00:09:30'!
cannotImportStreamWithInvalidRecorIdentification
	^'cannot import stream with invalid record identification'.!

!methodRemoval: Customer #firstName: stamp: 'NB 6/28/2023 00:09:57'!
firstName: aName

	firstName := aName!

!methodRemoval: Customer #identificationNumber: stamp: 'NB 6/28/2023 00:10:02'!
identificationNumber: anIdentificationNumber

	identificationNumber := anIdentificationNumber!

!methodRemoval: Customer #identificationType: stamp: 'NB 6/28/2023 00:10:06'!
identificationType: anIdentificationType

	identificationType := anIdentificationType!

!methodRemoval: Customer #lastName: stamp: 'NB 6/28/2023 00:10:11'!
lastName: aLastName

	lastName := aLastName
!

!methodRemoval: Address #province: stamp: 'NB 6/28/2023 00:10:34'!
province: aProvince

	province := aProvince
	!

!methodRemoval: Address #streetName: stamp: 'NB 6/28/2023 00:10:35'!
streetName: aStreetName

	streetName := aStreetName !

!methodRemoval: Address #streetNumber: stamp: 'NB 6/28/2023 00:10:37'!
streetNumber: aStreetNumber

	streetNumber := aStreetNumber !

!methodRemoval: Address #town: stamp: 'NB 6/28/2023 00:10:38'!
town: aTown

	town := aTown!

!methodRemoval: Address #zipCode: stamp: 'NB 6/28/2023 00:10:40'!
zipCode: aZipCode

	zipCode := aZipCode!

----SNAPSHOT----(28 June 2023 00:11:23) CuisUniversity-5832.image priorSource: 9432972!

----SNAPSHOT----(28 June 2023 00:11:26) CuisUniversity-5832.image priorSource: 9435905!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/28/2023 00:11:29'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/28/2023 00:11:30'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/28/2023 00:11:30'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/28/2023 00:11:30'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/28/2023 00:11:30'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/28/2023 00:11:30'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/28/2023 00:11:31'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/28/2023 00:11:31'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/28/2023 00:11:31'!
PASSED!

----SNAPSHOT----(28 June 2023 00:11:41) CuisUniversity-5832.image priorSource: 9435994!

----STARTUP---- (29 June 2023 20:16:41) as /Users/nico/Documents/inge1/cuis-images/macos64 9/CuisUniversity-5832.image!


!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'NB 6/29/2023 20:17:36'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session customerSystem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'NB 6/29/2023 20:17:44'!
Object subclass: #PersistentCustomerSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'NB 6/29/2023 20:17:34' prior: 50624525 overrides: 16961394!
setUp

	customerSystem:= PersistentCustomerSystem new.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.
! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:17:46'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:17:46'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:17:46'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:17:46'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:17:47'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:17:47'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:17:47'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:17:48'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:17:48'!
PASSED!
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/29/2023 20:18:15' prior: 50624490!
assertImportedRightNumberOfCustomers

	^ self assert: 2 equals: (self session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/29/2023 20:18:29' prior: 50626375!
assertNoAddressWasImported

	^ self assert: 0 equals: (self session selectAllOfType: Address) size! !
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/29/2023 20:18:34' prior: 50624964!
assertNoCustomerWasImported

	^ self assert: 0 equals: (self session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/29/2023 20:18:41' prior: 50625144!
assertOnlyOneCustomerWasImportedWithoutAddresses

	self assert: 1 equals: (self session selectAllOfType: Customer) size.
		self assert: 0 equals: (self session selectAllOfType: Address ) size! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:18:43'!
ERROR!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:18:43'!
ERROR!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:18:43'!
ERROR!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:18:43'!
ERROR!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:18:43'!
ERROR!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:18:43'!
ERROR!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:18:43'!
ERROR!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:18:43'!
ERROR!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:18:43'!
ERROR!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:18:46'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'NB 6/29/2023 20:18:53'!
session
	self shouldBeImplemented.
	^session! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/29/2023 20:18:57' prior: 50626699!
session
	^session! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:18:59'!
PASSED!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:19:02'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:19:02'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:19:02'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:19:02'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:19:03'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:19:03'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:19:03'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:19:03'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:19:03'!
PASSED!
!ImportTest methodsFor: 'customer' stamp: 'NB 6/29/2023 20:19:10' prior: 50624536!
customerWithIdentificationType: anIdType number: anIdNumber

	^ (self session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/29/2023 20:19:15' prior: 50626153!
shouldRaiseErrorWhenImporting: aReadStream withErrorMessageText: anErrorMessageText assertingThat: anAssertionBlock
	
	
	self should: 
		[CustomerImporter valueFrom: aReadStream into: self session.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assert: anErrorMessageText equals: anError messageText. 
		anAssertionBlock value].
! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:19:16'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:19:16'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:19:16'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:19:17'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:19:17'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:19:17'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:19:17'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:19:18'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:19:18'!
PASSED!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'NB 6/29/2023 20:19:26' prior: 50624532 overrides: 16961402!
tearDown

	self session commit.
	self session close.
	! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/29/2023 20:19:31' prior: 50625011!
test01CanImportCorrectlyAValidInputWithTwoCustomers

	CustomerImporter valueFrom: self validImportData into: self session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'NB 6/29/2023 20:19:36' prior: 50626588 overrides: 16961394!
setUp

	customerSystem:= PersistentCustomerSystem new.
	session := DataBaseSession for: (Array with: Address with: Customer).
	self session beginTransaction.
! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:19:47'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:19:47'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:19:47'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:19:47'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:19:48'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:19:48'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:19:48'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:19:48'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:19:48'!
PASSED!

----SNAPSHOT----(29 June 2023 20:19:52) CuisUniversity-5832.image priorSource: 9437226!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'NB 6/29/2023 20:21:33'!
Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!PersistentCustomerSystem methodsFor: 'no messages' stamp: 'NB 6/29/2023 20:21:31'!
start

	session := DataBaseSession for: (Array with: Address with: Customer).
	self session beginTransaction.! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'NB 6/29/2023 20:22:16' prior: 50626824 overrides: 16961394!
setUp

	customerSystem:= PersistentCustomerSystem new.
	self session start.
! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'NB 6/29/2023 20:22:26' prior: 50626886 overrides: 16961394!
setUp

	customerSystem:= PersistentCustomerSystem new.
	self session beginTransaction.
! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'NB 6/29/2023 20:23:10' prior: 50626892 overrides: 16961394!
setUp

	customerSystem:= PersistentCustomerSystem new.
	customerSystem start.
	self session beginTransaction.
! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'NB 6/29/2023 20:23:37' prior: 50626899 overrides: 16961394!
setUp

	customerSystem:= PersistentCustomerSystem new.
	customerSystem start.
	self session beginTransaction.
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/29/2023 20:23:50' prior: 50626703!
session
	^customerSystem session.! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'NB 6/29/2023 20:23:59' prior: 50626906 overrides: 16961394!
setUp

	customerSystem:= PersistentCustomerSystem new.
	customerSystem start.
! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:24:06'!
session
	self shouldBeImplemented.
	^session! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:24:10' prior: 50626924!
session
	
	^session! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:24:11'!
PASSED!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:24:14'!
PASSED!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:24:15'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:24:15'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:24:15'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:24:15'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:24:16'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:24:16'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:24:16'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:24:16'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:24:16'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:24:17'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:24:17'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:24:17'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:24:17'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:24:18'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:24:18'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:24:18'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:24:18'!
PASSED!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:24:24'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:24:24'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:24:24'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:24:24'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:24:25'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:24:25'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:24:25'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:24:25'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:24:25'!
PASSED!

----SNAPSHOT----(29 June 2023 20:24:29) CuisUniversity-5832.image priorSource: 9446936!
!ImportTest methodsFor: 'customer' stamp: 'NB 6/29/2023 20:27:42'!
numberOfCustomers
	^(self session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'customer' stamp: 'NB 6/29/2023 20:27:44' prior: 50627046!
numberOfCustomers

	^(self session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/29/2023 20:28:08' prior: 50626632!
assertImportedRightNumberOfCustomers

	^ self assert: 2 equals: self numberOfCustomers! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:28:10'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:28:10'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:28:10'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:28:11'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:28:11'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:28:11'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:28:11'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:28:12'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:28:12'!
PASSED!

----SNAPSHOT----(29 June 2023 20:28:15) CuisUniversity-5832.image priorSource: 9452559!
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/29/2023 20:28:56' prior: 50626645!
assertNoCustomerWasImported

	^ self assert: 0 equals: self numberOfCustomers ! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:28:59'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:28:59'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:28:59'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:28:59'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:29:00'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:29:00'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:29:00'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:29:00'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:29:00'!
PASSED!
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/29/2023 20:29:15' prior: 50626651!
assertOnlyOneCustomerWasImportedWithoutAddresses

	self assert: 1 equals: self numberOfCustomers.
		self assert: 0 equals: (self session selectAllOfType: Address ) size! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:29:16'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:29:17'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:29:17'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:29:17'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:29:17'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:29:18'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:29:18'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:29:18'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:29:18'!
PASSED!
!ImportTest methodsFor: 'address' stamp: 'NB 6/29/2023 20:29:46' prior: 50627051!
numberOfCustomers

	^(self session selectAllOfType: Address) size! !
!ImportTest methodsFor: 'address' stamp: 'NB 6/29/2023 20:29:57'!
numberOfAdresses

	^(self session selectAllOfType: Address) size! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:29:57' prior: 50627141!
assertOnlyOneCustomerWasImportedWithoutAddresses

	self assert: 1 equals: self numberOfAdresses.
		self assert: 0 equals: (self session selectAllOfType: Address ) size! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:29:57' prior: 50627056!
assertImportedRightNumberOfCustomers

	^ self assert: 2 equals: self numberOfAdresses! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:29:57' prior: 50627100!
assertNoCustomerWasImported

	^ self assert: 0 equals: self numberOfAdresses ! !

!methodRemoval: ImportTest #numberOfCustomers stamp: 'NB 6/29/2023 20:29:57'!
numberOfCustomers

	^(self session selectAllOfType: Address) size!
!ImportTest methodsFor: 'customer' stamp: 'NB 6/29/2023 20:30:31'!
numberOfCustomers

	^(self session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/29/2023 20:30:41' prior: 50627205!
assertImportedRightNumberOfCustomers

	^ self assert: 2 equals: self numberOfCustomers ! !
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/29/2023 20:30:53' prior: 50626639!
assertNoAddressWasImported

	^ self assert: 0 equals: self numberOfAdresses ! !
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/29/2023 20:31:00' prior: 50627211!
assertNoCustomerWasImported

	^ self assert: 0 equals: self numberOfCustomers ! !
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/29/2023 20:31:14' prior: 50627196!
assertOnlyOneCustomerWasImportedWithoutAddresses

	self assert: 1 equals: self numberOfCustomers .
		self assert: 0 equals: self numberOfAdresses ! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:31:17'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:31:18'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:31:18'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:31:18'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:31:18'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:31:19'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:31:19'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:31:19'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:31:19'!
PASSED!

----SNAPSHOT----(29 June 2023 20:31:24) CuisUniversity-5832.image priorSource: 9454288!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:31:52'!
numberOfAdresses

	^(self session selectAllOfType: Address) size! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:32:08'!
numberOfCustomers

	^(self session selectAllOfType: Customer) size! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:32:23'!
customerWithIdentificationType: anIdType number: anIdNumber

	^ (self session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:32:27'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:32:28'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:32:28'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:32:28'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:32:28'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:32:29'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:32:29'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:32:29'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:32:29'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'NB 6/29/2023 20:32:40' prior: 50626913!
session
	^customerSystem.! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:32:41'!
ERROR!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:32:41'!
ERROR!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:32:41'!
ERROR!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:32:41'!
ERROR!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:32:41'!
ERROR!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:32:41'!
ERROR!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:32:41'!
ERROR!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:32:41'!
ERROR!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:32:41'!
ERROR!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:32:51'!
ERROR!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:32:51'!
ERROR!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:32:51'!
ERROR!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:32:51'!
ERROR!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:32:51'!
ERROR!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:32:51'!
ERROR!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:32:51'!
ERROR!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:32:51'!
ERROR!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:32:51'!
ERROR!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:32:53'!
ERROR!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:33:41'!
commit

	self session commit.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:33:49'!
close

	self session close.! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:33:52'!
ERROR!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:33:52'!
ERROR!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:33:52'!
ERROR!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:33:52'!
ERROR!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:33:52'!
ERROR!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:33:52'!
ERROR!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:33:52'!
ERROR!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:33:52'!
ERROR!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:33:52'!
ERROR!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:33:54'!
ERROR!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:35:01'!
stop

	self session commit.
	self session close.! !

!methodRemoval: PersistentCustomerSystem #close stamp: 'NB 6/29/2023 20:35:08'!
close

	self session close.!

!methodRemoval: PersistentCustomerSystem #commit stamp: 'NB 6/29/2023 20:35:12'!
commit

	self session commit.!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'NB 6/29/2023 20:35:29' prior: 50626807 overrides: 16961402!
tearDown

	self session stop.
	! !
!CustomerImporter methodsFor: 'customer' stamp: 'NB 6/29/2023 20:36:03' prior: 50625823!
importCustomer

			self assertCustomerRecordSizeIsValid.
			
			customer := Customer 
				firstName: record second 
				lastName: record third 
				identificationType: record fourth 
				identificationNumber: record fifth.
			session add: customer.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:36:20'!
add: aCustomer
	
	session persist: aCustomer.! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:36:21'!
ERROR!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:36:21'!
ERROR!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:36:21'!
ERROR!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:36:21'!
ERROR!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:36:21'!
ERROR!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:36:22'!
ERROR!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:36:22'!
ERROR!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:36:22'!
ERROR!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:36:22'!
ERROR!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:36:24'!
ERROR!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:37:08'!
ERROR!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:37:08'!
ERROR!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:37:08'!
ERROR!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:37:08'!
ERROR!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:37:08'!
ERROR!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:37:08'!
ERROR!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:37:09'!
ERROR!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:37:09'!
ERROR!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:37:09'!
ERROR!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:37:11'!
ERROR!
!ImportTest methodsFor: 'customer' stamp: 'NB 6/29/2023 20:37:36' prior: 50627221!
numberOfCustomers

	^self session numberOfCustomers ! !
!ImportTest methodsFor: 'customer' stamp: 'NB 6/29/2023 20:37:52' prior: 50626746!
customerWithIdentificationType: anIdType number: anIdNumber

	^ self session customerWithIdentificationType: anIdType number: anIdNumber.! !
!ImportTest methodsFor: 'address' stamp: 'NB 6/29/2023 20:38:02' prior: 50627190!
numberOfAdresses

	^self session numberOfAdresses ! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:38:04'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:38:04'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:38:04'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:38:04'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:38:05'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:38:05'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:38:05'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:38:05'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:38:05'!
PASSED!

----SNAPSHOT----(29 June 2023 20:38:10) CuisUniversity-5832.image priorSource: 9460364!

!methodRemoval: ImportTest #session stamp: 'NB 6/29/2023 20:38:29'!
session
	^customerSystem.!
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/29/2023 20:38:29' prior: 50626756!
shouldRaiseErrorWhenImporting: aReadStream withErrorMessageText: anErrorMessageText assertingThat: anAssertionBlock
	
	
	self should: 
		[CustomerImporter valueFrom: aReadStream into: customerSystem.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError| 
		self assert: anErrorMessageText equals: anError messageText. 
		anAssertionBlock value].
! !
!ImportTest methodsFor: 'tests' stamp: 'NB 6/29/2023 20:38:29' prior: 50626812!
test01CanImportCorrectlyAValidInputWithTwoCustomers

	CustomerImporter valueFrom: self validImportData into: customerSystem.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'customer' stamp: 'NB 6/29/2023 20:38:29' prior: 50627584!
numberOfCustomers

	^customerSystem numberOfCustomers ! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'NB 6/29/2023 20:38:29' prior: 50627486 overrides: 16961402!
tearDown

	customerSystem stop.
	! !
!ImportTest methodsFor: 'customer' stamp: 'NB 6/29/2023 20:38:29' prior: 50627589!
customerWithIdentificationType: anIdType number: anIdNumber

	^ customerSystem customerWithIdentificationType: anIdType number: anIdNumber.! !
!ImportTest methodsFor: 'address' stamp: 'NB 6/29/2023 20:38:29' prior: 50627596!
numberOfAdresses

	^customerSystem numberOfAdresses ! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:38:32'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:38:32'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:38:32'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:38:32'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:38:33'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:38:33'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:38:33'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:38:33'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:38:34'!
PASSED!

!methodRemoval: ImportTest #numberOfAdresses stamp: 'NB 6/29/2023 20:38:46'!
numberOfAdresses

	^customerSystem numberOfAdresses !
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/29/2023 20:38:46' prior: 50627244!
assertOnlyOneCustomerWasImportedWithoutAddresses

	self assert: 1 equals: self numberOfCustomers .
		self assert: 0 equals: (customerSystem numberOfAdresses ) ! !
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/29/2023 20:38:46' prior: 50627232!
assertNoAddressWasImported

	^ self assert: 0 equals: (customerSystem numberOfAdresses ) ! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:38:48'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:38:48'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:38:48'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:38:49'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:38:49'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:38:49'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:38:49'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:38:50'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:38:50'!
PASSED!

!methodRemoval: ImportTest #numberOfCustomers stamp: 'NB 6/29/2023 20:38:59'!
numberOfCustomers

	^customerSystem numberOfCustomers !
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/29/2023 20:38:59' prior: 50627730!
assertOnlyOneCustomerWasImportedWithoutAddresses

	self assert: 1 equals: (customerSystem numberOfCustomers ) .
		self assert: 0 equals: (customerSystem numberOfAdresses ) ! !
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/29/2023 20:38:59' prior: 50627226!
assertImportedRightNumberOfCustomers

	^ self assert: 2 equals: (customerSystem numberOfCustomers ) ! !
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/29/2023 20:38:59' prior: 50627238!
assertNoCustomerWasImported

	^ self assert: 0 equals: (customerSystem numberOfCustomers ) ! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:39:01'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:39:01'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:39:02'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:39:02'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:39:02'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:39:02'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:39:02'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:39:03'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:39:03'!
PASSED!

!methodRemoval: ImportTest #customerWithIdentificationType:number: stamp: 'NB 6/29/2023 20:39:12'!
customerWithIdentificationType: anIdType number: anIdNumber

	^ customerSystem customerWithIdentificationType: anIdType number: anIdNumber.!
!ImportTest methodsFor: 'assertions' stamp: 'NB 6/29/2023 20:39:12' prior: 50624471!
assertCustomerWithIdentificationType: anIdType number: anIdNumber hasFirstName: aFirstName lastName: aLastName

	| importedCustomer |

	importedCustomer :=  customerSystem customerWithIdentificationType: anIdType number: anIdNumber.

	self assert: aFirstName equals: importedCustomer firstName.
	self assert: aLastName equals: importedCustomer lastName.
	self assert: anIdType equals: importedCustomer identificationType.
	self assert: anIdNumber equals: importedCustomer identificationNumber.

	^importedCustomer

	! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:39:14'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:39:14'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:39:14'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:39:14'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:39:15'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:39:15'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:39:15'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:39:16'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:39:16'!
PASSED!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'NB 6/29/2023 20:39:46'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'customerSystem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:39:51'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:39:51'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:39:51'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:39:51'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:39:52'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:39:52'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:39:52'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:39:52'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:39:52'!
PASSED!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'NB 6/29/2023 20:40:14'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'customerSystem readStream customer line record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:40:14' prior: 50624749!
initializeFrom: aReadStream into: aSession
	customerSystem := aSession.
	readStream := aReadStream.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:40:14' prior: 50627490!
importCustomer

			self assertCustomerRecordSizeIsValid.
			
			customer := Customer 
				firstName: record second 
				lastName: record third 
				identificationType: record fourth 
				identificationNumber: record fifth.
			customerSystem add: customer.! !
!CustomerImporter methodsFor: 'initialization' stamp: 'NB 6/29/2023 20:40:25' prior: 50627956!
initializeFrom: aReadStream into: aCustomerSystem
	customerSystem := aCustomerSystem.
	readStream := aReadStream.! !
!CustomerImporter class methodsFor: 'instance creation' stamp: 'NB 6/29/2023 20:40:36' prior: 50624826!
from: aReadStream into: aCustomerSystem
	
	^self new initializeFrom: aReadStream into: aCustomerSystem! !
!CustomerImporter class methodsFor: 'importing' stamp: 'NB 6/29/2023 20:40:47' prior: 50624832!
valueFrom: aReadStream into: aCustomerSystem
aReadStream isEmpty ifTrue: [self error: self cannotImportEmptyStream].
	^(self from: aReadStream into: aCustomerSystem) value! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:40:50'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:40:50'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:40:50'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:40:50'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:40:51'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:40:51'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:40:51'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:40:51'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:40:52'!
PASSED!

!classDefinition: #CustomerSystem category: 'CustomerImporter' stamp: 'NB 6/29/2023 20:41:05'!
Object subclass: #CustomerSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'NB 6/29/2023 20:41:05'!
CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!methodRemoval: PersistentCustomerSystem #session stamp: 'NB 6/29/2023 20:41:44'!
session
	
	^session!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:41:44' prior: 50627296!
numberOfCustomers

	^(session selectAllOfType: Customer) size! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:41:44' prior: 50627291!
numberOfAdresses

	^(session selectAllOfType: Address) size! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:41:44' prior: 50627302!
customerWithIdentificationType: anIdType number: anIdNumber

	^ (session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:41:44' prior: 50627474!
stop

	session commit.
	session close.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:41:44' prior: 50626879!
start

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:41:51'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:41:52'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:41:52'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:41:52'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:41:52'!
PASSED!

----SNAPSHOT----(29 June 2023 20:41:56) CuisUniversity-5832.image priorSource: 9471532!
!CustomerSystem methodsFor: 'no messages' stamp: 'NB 6/29/2023 20:42:32'!
add: aCustomer
	
	self subclassResponsibility ! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:42:54'!
customerWithIdentificationType: anIdType number: anIdNumber

	self subclassResponsibility ! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:43:08'!
numberOfAdresses

	self subclassResponsibility ! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:43:26'!
numberOfCustomers

	self subclassResponsibility ! !
!CustomerSystem methodsFor: 'nil' stamp: 'NB 6/29/2023 20:43:47'!
start

	self subclassResponsibility .! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:43:58'!
stop

	self subclassResponsibility .! !

CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'customers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'NB 6/29/2023 20:44:16'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'customers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!TransientCustomerSystem methodsFor: 'no messages' stamp: 'NB 6/29/2023 20:44:49' overrides: 50628146!
start

	customers:= OrderedCollection new.! !
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:45:41' overrides: 50628131!
customerWithIdentificationType: anIdType number: anIdNumber

	^customers detect: [:aCustomer | aCustomer identificationType = anIdType and: [aCustomer identificationNumber = anIdNumber]].! !

CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'customers addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'NB 6/29/2023 20:45:53'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'customers addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:46:01' prior: 50628168 overrides: 50628146!
start

	customers:= OrderedCollection new.
	addresses := OrderedCollection new.! !
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:46:28' overrides: 50628137!
numberOfAdresses

	^addresses size.! !
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:46:43' overrides: 50628142!
numberOfCustomers

	^customers size! !
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:47:20' overrides: 50628126!
add: aCustomer
	
	customers add: aCustomer .
	addresses addAll: aCustomer addresses .! !
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:47:37' overrides: 50628150!
stop
! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:47:44'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:47:44'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:47:44'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:47:44'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:47:44'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:47:45'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:47:45'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:47:45'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:47:45'!
PASSED!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'NB 6/29/2023 20:47:59' prior: 50626918 overrides: 16961394!
setUp

	customerSystem:= TransientCustomerSystem new.
	customerSystem start.
! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:48:00'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:48:00'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:48:00'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:48:00'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:48:00'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:48:00'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:48:00'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:48:00'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:48:00'!
PASSED!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:48:10'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:48:10'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:48:10'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:48:10'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:48:10'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:48:10'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:48:10'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:48:10'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:48:10'!
PASSED!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:48:12'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:48:12'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:48:12'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:48:12'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:48:12'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:48:12'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:48:12'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:48:12'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:48:12'!
PASSED!

----SNAPSHOT----(29 June 2023 20:48:20) CuisUniversity-5832.image priorSource: 9487106!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 20:48:23'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 20:48:23'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 20:48:23'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 20:48:23'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 20:48:23'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 20:48:23'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 20:48:23'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 20:48:23'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 20:48:23'!
PASSED!

!classDefinition: #Environment category: 'CustomerImporter' stamp: 'NB 6/29/2023 20:49:14'!
Object subclass: #Environment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'NB 6/29/2023 20:49:08' prior: 50628262 overrides: 16961394!
setUp

	customerSystem:= Environment current createCustomerSystem.
	customerSystem start.
! !
!Environment class methodsFor: 'instance creation' stamp: 'NB 6/29/2023 20:49:47'!
current
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCurrent! !
!Environment class methodsFor: 'instance creation' stamp: 'NB 6/29/2023 20:50:30' prior: 50628427!
current
	
	^(self subclasses detect: [:anEnvironmentSubclass | anEnvironmentSubclass isCurrent]) new! !

----SNAPSHOT----(29 June 2023 20:50:51) CuisUniversity-5832.image priorSource: 9495157!

Environment subclass: #DevelopmentEnvironment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #DevelopmentEnvironment category: 'CustomerImporter' stamp: 'NB 6/29/2023 20:51:04'!
Environment subclass: #DevelopmentEnvironment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Environment subclass: #IntegrationEnvironment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #IntegrationEnvironment category: 'CustomerImporter' stamp: 'NB 6/29/2023 20:51:13'!
Environment subclass: #IntegrationEnvironment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!DevelopmentEnvironment class methodsFor: 'nil' stamp: 'NB 6/29/2023 20:51:26'!
isCurrent

	! !
!DevelopmentEnvironment class methodsFor: 'as yet unclassified' stamp: 'NB 6/29/2023 20:52:19' prior: 50628469!
isCurrent

	^(Smalltalk getSystemAttribute: 'ENV') = 'DEV'.! !
!IntegrationEnvironment class methodsFor: 'no messages' stamp: 'NB 6/29/2023 20:52:34'!
isCurrent

	^(Smalltalk getSystemAttribute: 'ENV') = 'INTEGRATION'.! !
!Environment class methodsFor: 'instance creation' stamp: 'NB 6/29/2023 20:52:59'!
isCurrent

	self subclassResponsibility .! !

----SNAPSHOT----(29 June 2023 20:53:28) CuisUniversity-5832.image priorSource: 9497287!

----SNAPSHOT----(29 June 2023 20:54:55) CuisUniversity-5832.image priorSource: 9498764!

----STARTUP---- (29 June 2023 20:55:19) as /Users/nico/Documents/inge1/cuis-images/macos64 9/CuisUniversity-5832.image!


(Smalltalk getSystemAttribute: 'ENV')!

----STARTUP---- (29 June 2023 20:58:12) as /Users/nico/Documents/inge1/cuis-images/macos64 9/CuisUniversity-5832.image!


Smalltalk getSystemAttribute: 'ENV'!

----SNAPSHOT----(29 June 2023 21:00:38) CuisUniversity-5832.image priorSource: 9498853!
!DevelopmentEnvironment class methodsFor: 'testing' stamp: 'NB 6/29/2023 21:00:47' prior: 50628473 overrides: 50628483!
isCurrent

	^true.! !
!IntegrationEnvironment class methodsFor: 'testing' stamp: 'NB 6/29/2023 21:00:55' prior: 50628478 overrides: 50628483!
isCurrent

	^false.! !
!DevelopmentEnvironment methodsFor: 'customerSystem' stamp: 'NB 6/29/2023 21:01:26'!
createCustomerSystem
	self shouldBeImplemented.! !
!DevelopmentEnvironment methodsFor: 'customerSystem' stamp: 'NB 6/29/2023 21:01:35' prior: 50628511!
createCustomerSystem
	
	^TransientCustomerSystem new.! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 21:01:36'!
PASSED!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 21:01:38'!
PASSED!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 21:01:38'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 21:01:38'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 21:01:38'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 21:01:38'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 21:01:38'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 21:01:38'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 21:01:38'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 21:01:38'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 21:01:38'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 21:01:38'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 21:01:38'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 21:01:38'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 21:01:38'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 21:01:38'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 21:01:38'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 21:01:38'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 21:01:38'!
PASSED!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 21:01:43'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 21:01:43'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 21:01:43'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 21:01:43'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 21:01:43'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 21:01:43'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 21:01:43'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 21:01:43'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 21:01:43'!
PASSED!

----SNAPSHOT----(29 June 2023 21:01:46) CuisUniversity-5832.image priorSource: 9499102!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 6/29/2023 21:01:51'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 6/29/2023 21:01:51'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 6/29/2023 21:01:51'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 6/29/2023 21:01:51'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 6/29/2023 21:01:51'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 6/29/2023 21:01:51'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 6/29/2023 21:01:51'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 6/29/2023 21:01:51'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 6/29/2023 21:01:51'!
PASSED!

----SNAPSHOT----(29 June 2023 21:01:58) CuisUniversity-5832.image priorSource: 9503377!
!Environment methodsFor: 'no messages' stamp: 'NB 6/29/2023 21:03:27'!
createCustomerSystem
	
	self subclassResponsibility .! !
!IntegrationEnvironment methodsFor: 'nil' stamp: 'NB 6/29/2023 21:04:04' overrides: 50628673!
createCustomerSystem
	
	^PersistentCustomerSystem new.! !

----SNAPSHOT----(29 June 2023 21:04:28) CuisUniversity-5832.image priorSource: 9504609!

----SNAPSHOT----(29 June 2023 21:08:36) CuisUniversity-5832.image priorSource: 9505017!

----SNAPSHOT----(29 June 2023 21:08:41) CuisUniversity-5832.image priorSource: 9505106!

----SNAPSHOT----(29 June 2023 21:08:50) CuisUniversity-5832.image priorSource: 9505195!

----STARTUP---- (1 July 2023 14:48:04) as /Users/nico/Documents/inge1/cuis-images/macos64 9/CuisUniversity-5832.image!

!ImportTest methodsFor: 'assertions' stamp: 'NB 7/1/2023 14:49:30' prior: 50627793!
assertImportedRightNumberOfCustomers

	^ self assert: 2 equals: customerSystem numberOfCustomers ! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 7/1/2023 14:49:30'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 7/1/2023 14:49:30'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 7/1/2023 14:49:30'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 7/1/2023 14:49:30'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 7/1/2023 14:49:30'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 7/1/2023 14:49:30'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 7/1/2023 14:49:30'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 7/1/2023 14:49:30'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 7/1/2023 14:49:30'!
PASSED!
!Behavior method!
from: aReadStream into: aCustomerSystem
	#_coverageTracker883244_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker883244_
		coverAll:
			{45 to: 48}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883244_
		coverAll:
			{50 to: 52}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker883244_
		coverAll:
			{54 to: 68. 82 to: 86}
		evaluating: [
			receiver2
				initializeFrom:
					(#_coverageTracker883244_
						cover: (70 to: 80)
						declaredAt: (7 to: 17)
						by: aReadStream)
				into:
					(#_coverageTracker883244_
						cover: (88 to: 102)
						declaredAt: (25 to: 39)
						by: aCustomerSystem) ]
		thatSends: #initializeFrom:into:
		to: receiver2 ] value.! !
!Behavior method!
isCustomer
	#_coverageTracker883264_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker883264_
		cover: (16 to: 21)
		declaredAt: (16 to: 21)
		by: record.
	#_coverageTracker883264_
		coverAll:
			{23 to: 27}
		evaluating: [ receiver1 first ]
		thatSends: #first
		to: receiver1 ] value.
	#_coverageTracker883264_
		coverAll:
			{29 to: 29}
		evaluating: [
			receiver2 =
				(#_coverageTracker883264_
					coverAll:
						{31 to: 33}
					byLiteralOrPseudoVariable: 'C') ]
		thatSends: #=
		to: receiver2 ] value.! !
!Behavior method!
firstName: aFirstName lastName: aLastName identificationType: anIdentificationType identificationNumber: anIdentificationNumber
	#_coverageTracker883271_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker883271_
		coverAll:
			{134 to: 137}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883271_
		coverAll:
			{139 to: 141}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker883271_
		coverAll:
			{143 to: 162. 175 to: 183. 195 to: 213. 236 to: 256}
		evaluating: [
			receiver2
				initializeFirstName:
					(#_coverageTracker883271_
						cover: (164 to: 173)
						declaredAt: (12 to: 21)
						by: aFirstName)
				lastName:
					(#_coverageTracker883271_
						cover: (185 to: 193)
						declaredAt: (33 to: 41)
						by: aLastName)
				identificationType:
					(#_coverageTracker883271_
						cover: (215 to: 234)
						declaredAt: (63 to: 82)
						by: anIdentificationType)
				identificationNumber:
					(#_coverageTracker883271_
						cover: (258 to: 279)
						declaredAt: (106 to: 127)
						by: anIdentificationNumber) ]
		thatSends: #initializeFirstName:lastName:identificationType:identificationNumber:
		to: receiver2 ] value.! !
!Behavior method!
identificationNumber
	#_coverageTracker883289_ markAsExecuted.
	^ #_coverageTracker883289_
		cover: (25 to: 44)
		declaredAt: (25 to: 44)
		by: identificationNumber.! !
!Behavior method!
commit
	#_coverageTracker883291_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker883291_
		cover: (11 to: 16)
		declaredAt: (11 to: 16)
		by: tables.
	#_coverageTracker883291_
		coverAll:
			{18 to: 20. 31 to: 39}
		evaluating: [
			receiver1
				at:
					(#_coverageTracker883291_
						coverAll:
							{22 to: 29}
						by: Customer)
				ifAbsent: [
					#_coverageTracker883291_
						coverAll:
							{42 to: 44}
						byLiteralOrPseudoVariable: #() ]]
		thatSends: #at:ifAbsent:
		to: receiver1 ] value.
	#_coverageTracker883291_
		coverAll:
			{48 to: 50}
		evaluating: [
			receiver3 do: [ :aCustomer |
				[ | receiver2 |
				receiver2 _ #_coverageTracker883291_
					coverAll:
						{67 to: 70}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker883291_
					coverAll:
						{72 to: 90}
					evaluating: [
						receiver2 persistAddressesOf:
							(#_coverageTracker883291_
								cover: (92 to: 100)
								declaredAt: (55 to: 63)
								by: aCustomer) ]
					thatSends: #persistAddressesOf:
					to: receiver2 ] value ]]
		thatSends: #do:
		to: receiver3 ] value.! !
!Behavior method!
assertRecordIsNotEmpty
	#_coverageTracker883312_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 _ [ | receiver1 |
	receiver1 _ #_coverageTracker883312_
		cover: (28 to: 33)
		declaredAt: (28 to: 33)
		by: record.
	#_coverageTracker883312_
		coverAll:
			{35 to: 41}
		evaluating: [ receiver1 isEmpty ]
		thatSends: #isEmpty
		to: receiver1 ] value.
	#_coverageTracker883312_
		coverAll:
			{43 to: 49}
		evaluating: [
			receiver5 ifTrue: [
				[ | receiver4 |
				receiver4 _ #_coverageTracker883312_
					coverAll:
						{52 to: 55}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker883312_
					coverAll:
						{57 to: 62}
					evaluating: [
						receiver4 error:
							[ | receiver3 |
							receiver3 _ [ | receiver2 |
							receiver2 _ #_coverageTracker883312_
								coverAll:
									{64 to: 67}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker883312_
								coverAll:
									{69 to: 73}
								evaluating: [ receiver2 class ]
								thatSends: #class
								to: receiver2 ] value.
							#_coverageTracker883312_
								coverAll:
									{75 to: 97}
								evaluating: [ receiver3 cannotImportEmptyStream ]
								thatSends: #cannotImportEmptyStream
								to: receiver3 ] value ]
					thatSends: #error:
					to: receiver4 ] value ]]
		thatSends: #ifTrue:
		to: receiver5 ] value.! !
!Behavior method!
numberOfAdresses
	#_coverageTracker883316_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker883316_
		cover: (21 to: 29)
		declaredAt: (21 to: 29)
		by: addresses.
	#_coverageTracker883316_
		coverAll:
			{31 to: 34}
		evaluating: [ receiver1 size ]
		thatSends: #size
		to: receiver1 ] value.! !
!Behavior method!
initializeStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince
	#_coverageTracker883334_ markAsExecuted.
	#_coverageTracker883334_
		cover: (117 to: 126)
		declaredAt: (117 to: 126)
		by:
			(streetName _ #_coverageTracker883334_
				cover: (131 to: 141)
				declaredAt: (23 to: 33)
				by: aStreetName).
	#_coverageTracker883334_
		cover: (145 to: 156)
		declaredAt: (145 to: 156)
		by:
			(streetNumber _ #_coverageTracker883334_
				cover: (161 to: 173)
				declaredAt: (49 to: 61)
				by: aStreetNumber).
	#_coverageTracker883334_
		cover: (177 to: 180)
		declaredAt: (177 to: 180)
		by:
			(town _ #_coverageTracker883334_
				cover: (185 to: 189)
				declaredAt: (69 to: 73)
				by: aTown).
	#_coverageTracker883334_
		cover: (193 to: 199)
		declaredAt: (193 to: 199)
		by:
			(zipCode _ #_coverageTracker883334_
				cover: (204 to: 211)
				declaredAt: (84 to: 91)
				by: aZipCode).
	#_coverageTracker883334_
		cover: (215 to: 222)
		declaredAt: (215 to: 222)
		by:
			(province _ #_coverageTracker883334_
				cover: (227 to: 235)
				declaredAt: (103 to: 111)
				by: aProvince).! !
!Behavior method!
createCustomerSystem
	#_coverageTracker883341_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker883341_
		coverAll:
			{26 to: 49}
		by: PersistentCustomerSystem.
	#_coverageTracker883341_
		coverAll:
			{51 to: 53}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.! !
!Behavior method!
lastName
	#_coverageTracker883353_ markAsExecuted.
	^ #_coverageTracker883353_
		cover: (13 to: 20)
		declaredAt: (13 to: 20)
		by: lastName.! !
!Behavior method!
hasLinesLeft
	#_coverageTracker883368_ markAsExecuted.
	#_coverageTracker883368_
		cover: (16 to: 19)
		declaredAt: (16 to: 19)
		by:
			(line _ [ | receiver1 |
			receiver1 _ #_coverageTracker883368_
				cover: (24 to: 33)
				declaredAt: (24 to: 33)
				by: readStream.
			#_coverageTracker883368_
				coverAll:
					{35 to: 42}
				evaluating: [ receiver1 nextLine ]
				thatSends: #nextLine
				to: receiver1 ] value).
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker883368_
		cover: (47 to: 50)
		declaredAt: (16 to: 19)
		by: line.
	#_coverageTracker883368_
		coverAll:
			{52 to: 57}
		evaluating: [ receiver2 notNil ]
		thatSends: #notNil
		to: receiver2 ] value.! !
!Behavior method!
value
	#_coverageTracker883373_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ [
	[ | receiver1 |
	receiver1 _ #_coverageTracker883373_
		coverAll:
			{13 to: 16}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883373_
		coverAll:
			{18 to: 29}
		evaluating: [ receiver1 hasLinesLeft ]
		thatSends: #hasLinesLeft
		to: receiver1 ] value ].
	#_coverageTracker883373_
		coverAll:
			{33 to: 42}
		evaluating: [
			receiver4 whileTrue: [
				[ | receiver2 |
				receiver2 _ #_coverageTracker883373_
					coverAll:
						{48 to: 51}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker883373_
					coverAll:
						{53 to: 64}
					evaluating: [ receiver2 createRecord ]
					thatSends: #createRecord
					to: receiver2 ] value.
				[ | receiver3 |
				receiver3 _ #_coverageTracker883373_
					coverAll:
						{69 to: 72}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker883373_
					coverAll:
						{74 to: 85}
					evaluating: [ receiver3 importRecord ]
					thatSends: #importRecord
					to: receiver3 ] value ]]
		thatSends: #whileTrue:
		to: receiver4 ] value.! !
!Behavior method!
valueFrom: aReadStream into: aCustomerSystem
	#_coverageTracker883377_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ [ | receiver1 |
	receiver1 _ #_coverageTracker883377_
		cover: (46 to: 56)
		declaredAt: (12 to: 22)
		by: aReadStream.
	#_coverageTracker883377_
		coverAll:
			{58 to: 64}
		evaluating: [ receiver1 isEmpty ]
		thatSends: #isEmpty
		to: receiver1 ] value.
	#_coverageTracker883377_
		coverAll:
			{66 to: 72}
		evaluating: [
			receiver4 ifTrue: [
				[ | receiver3 |
				receiver3 _ #_coverageTracker883377_
					coverAll:
						{75 to: 78}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker883377_
					coverAll:
						{80 to: 85}
					evaluating: [
						receiver3 error:
							[ | receiver2 |
							receiver2 _ #_coverageTracker883377_
								coverAll:
									{87 to: 90}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker883377_
								coverAll:
									{92 to: 114}
								evaluating: [ receiver2 cannotImportEmptyStream ]
								thatSends: #cannotImportEmptyStream
								to: receiver2 ] value ]
					thatSends: #error:
					to: receiver3 ] value ]]
		thatSends: #ifTrue:
		to: receiver4 ] value.
	^ [ | receiver6 |
	receiver6 _ [ | receiver5 |
	receiver5 _ #_coverageTracker883377_
		coverAll:
			{121 to: 124}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883377_
		coverAll:
			{126 to: 130. 144 to: 148}
		evaluating: [
			receiver5
				from:
					(#_coverageTracker883377_
						cover: (132 to: 142)
						declaredAt: (12 to: 22)
						by: aReadStream)
				into:
					(#_coverageTracker883377_
						cover: (150 to: 164)
						declaredAt: (30 to: 44)
						by: aCustomerSystem) ]
		thatSends: #from:into:
		to: receiver5 ] value.
	#_coverageTracker883377_
		coverAll:
			{167 to: 171}
		evaluating: [ receiver6 value ]
		thatSends: #value
		to: receiver6 ] value.! !
!Behavior method!
importCustomer
	#_coverageTracker883398_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker883398_
		coverAll:
			{20 to: 23}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883398_
		coverAll:
			{25 to: 55}
		evaluating: [ receiver1 assertCustomerRecordSizeIsValid ]
		thatSends: #assertCustomerRecordSizeIsValid
		to: receiver1 ] value.
	#_coverageTracker883398_
		cover: (65 to: 72)
		declaredAt: (65 to: 72)
		by:
			(customer _ [ | receiver6 |
			receiver6 _ #_coverageTracker883398_
				coverAll:
					{77 to: 84}
				by: Customer.
			#_coverageTracker883398_
				coverAll:
					{91 to: 100. 121 to: 129. 149 to: 167. 188 to: 208}
				evaluating: [
					receiver6
						firstName:
							[ | receiver2 |
							receiver2 _ #_coverageTracker883398_
								cover: (102 to: 107)
								declaredAt: (102 to: 107)
								by: record.
							#_coverageTracker883398_
								coverAll:
									{109 to: 114}
								evaluating: [ receiver2 second ]
								thatSends: #second
								to: receiver2 ] value
						lastName:
							[ | receiver3 |
							receiver3 _ #_coverageTracker883398_
								cover: (131 to: 136)
								declaredAt: (102 to: 107)
								by: record.
							#_coverageTracker883398_
								coverAll:
									{138 to: 142}
								evaluating: [ receiver3 third ]
								thatSends: #third
								to: receiver3 ] value
						identificationType:
							[ | receiver4 |
							receiver4 _ #_coverageTracker883398_
								cover: (169 to: 174)
								declaredAt: (102 to: 107)
								by: record.
							#_coverageTracker883398_
								coverAll:
									{176 to: 181}
								evaluating: [ receiver4 fourth ]
								thatSends: #fourth
								to: receiver4 ] value
						identificationNumber:
							[ | receiver5 |
							receiver5 _ #_coverageTracker883398_
								cover: (210 to: 215)
								declaredAt: (102 to: 107)
								by: record.
							#_coverageTracker883398_
								coverAll:
									{217 to: 221}
								evaluating: [ receiver5 fifth ]
								thatSends: #fifth
								to: receiver5 ] value ]
				thatSends: #firstName:lastName:identificationType:identificationNumber:
				to: receiver6 ] value).
	[ | receiver7 |
	receiver7 _ #_coverageTracker883398_
		cover: (227 to: 240)
		declaredAt: (227 to: 240)
		by: customerSystem.
	#_coverageTracker883398_
		coverAll:
			{242 to: 245}
		evaluating: [
			receiver7 add:
				(#_coverageTracker883398_
					cover: (247 to: 254)
					declaredAt: (65 to: 72)
					by: customer) ]
		thatSends: #add:
		to: receiver7 ] value.! !
!Behavior method!
importAddress
	| newAddress |
	#_coverageTracker883429_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker883429_
		coverAll:
			{36 to: 39}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883429_
		coverAll:
			{41 to: 70}
		evaluating: [ receiver1 assertAddressRecordSizeIsValid ]
		thatSends: #assertAddressRecordSizeIsValid
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ #_coverageTracker883429_
		coverAll:
			{80 to: 83}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883429_
		coverAll:
			{85 to: 109}
		evaluating: [ receiver2 assertCustomerWasImported ]
		thatSends: #assertCustomerWasImported
		to: receiver2 ] value.
	#_coverageTracker883429_
		cover: (119 to: 128)
		declaredAt: (20 to: 29)
		by:
			(newAddress _ [ | receiver10 |
			receiver10 _ #_coverageTracker883429_
				coverAll:
					{133 to: 139}
				by: Address.
			#_coverageTracker883429_
				coverAll:
					{146 to: 156. 177 to: 189. 218 to: 222. 243 to: 250. 280 to: 288}
				evaluating: [
					receiver10
						streetName:
							[ | receiver3 |
							receiver3 _ #_coverageTracker883429_
								cover: (158 to: 163)
								declaredAt: (158 to: 163)
								by: record.
							#_coverageTracker883429_
								coverAll:
									{165 to: 170}
								evaluating: [ receiver3 second ]
								thatSends: #second
								to: receiver3 ] value
						streetNumber:
							[ | receiver5 |
							receiver5 _ [ | receiver4 |
							receiver4 _ #_coverageTracker883429_
								cover: (191 to: 196)
								declaredAt: (158 to: 163)
								by: record.
							#_coverageTracker883429_
								coverAll:
									{198 to: 202}
								evaluating: [ receiver4 third ]
								thatSends: #third
								to: receiver4 ] value.
							#_coverageTracker883429_
								coverAll:
									{204 to: 211}
								evaluating: [ receiver5 asNumber ]
								thatSends: #asNumber
								to: receiver5 ] value
						town:
							[ | receiver6 |
							receiver6 _ #_coverageTracker883429_
								cover: (224 to: 229)
								declaredAt: (158 to: 163)
								by: record.
							#_coverageTracker883429_
								coverAll:
									{231 to: 236}
								evaluating: [ receiver6 fourth ]
								thatSends: #fourth
								to: receiver6 ] value
						zipCode:
							[ | receiver8 |
							receiver8 _ [ | receiver7 |
							receiver7 _ #_coverageTracker883429_
								cover: (252 to: 257)
								declaredAt: (158 to: 163)
								by: record.
							#_coverageTracker883429_
								coverAll:
									{259 to: 263}
								evaluating: [ receiver7 fifth ]
								thatSends: #fifth
								to: receiver7 ] value.
							#_coverageTracker883429_
								coverAll:
									{265 to: 272}
								evaluating: [ receiver8 asNumber ]
								thatSends: #asNumber
								to: receiver8 ] value
						province:
							[ | receiver9 |
							receiver9 _ #_coverageTracker883429_
								cover: (290 to: 295)
								declaredAt: (158 to: 163)
								by: record.
							#_coverageTracker883429_
								coverAll:
									{297 to: 301}
								evaluating: [ receiver9 sixth ]
								thatSends: #sixth
								to: receiver9 ] value ]
				thatSends: #streetName:streetNumber:town:zipCode:province:
				to: receiver10 ] value).
	[ | receiver11 |
	receiver11 _ #_coverageTracker883429_
		cover: (308 to: 315)
		declaredAt: (308 to: 315)
		by: customer.
	#_coverageTracker883429_
		coverAll:
			{317 to: 327}
		evaluating: [
			receiver11 addAddress:
				(#_coverageTracker883429_
					cover: (329 to: 338)
					declaredAt: (20 to: 29)
					by: newAddress) ]
		thatSends: #addAddress:
		to: receiver11 ] value.! !
!Behavior method!
town
	#_coverageTracker883452_ markAsExecuted.
	^ #_coverageTracker883452_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: town.! !
!Behavior method!
cannotImportStreamWithInvalidRecordIdentification
	#_coverageTracker883454_ markAsExecuted.
	^ #_coverageTracker883454_
		coverAll:
			{53 to: 109}
		byLiteralOrPseudoVariable: 'cannot import stream with invalid record identification'.! !
!Behavior method!
assertCustomerRecordSizeIsValid
	#_coverageTracker883456_ markAsExecuted.
	^ [ | receiver6 |
	receiver6 _ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker883456_
		cover: (38 to: 43)
		declaredAt: (38 to: 43)
		by: record.
	#_coverageTracker883456_
		coverAll:
			{45 to: 48}
		evaluating: [ receiver1 size ]
		thatSends: #size
		to: receiver1 ] value.
	#_coverageTracker883456_
		coverAll:
			{50 to: 50}
		evaluating: [
			receiver2 =
				(#_coverageTracker883456_
					coverAll:
						{52 to: 52}
					byLiteralOrPseudoVariable: 5) ]
		thatSends: #=
		to: receiver2 ] value.
	#_coverageTracker883456_
		coverAll:
			{55 to: 62}
		evaluating: [
			receiver6 ifFalse: [
				[ | receiver5 |
				receiver5 _ #_coverageTracker883456_
					coverAll:
						{65 to: 68}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker883456_
					coverAll:
						{70 to: 75}
					evaluating: [
						receiver5 error:
							[ | receiver4 |
							receiver4 _ [ | receiver3 |
							receiver3 _ #_coverageTracker883456_
								coverAll:
									{77 to: 80}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker883456_
								coverAll:
									{82 to: 86}
								evaluating: [ receiver3 class ]
								thatSends: #class
								to: receiver3 ] value.
							#_coverageTracker883456_
								coverAll:
									{88 to: 134}
								evaluating: [ receiver4 cannotImportStreamWithWrongCustomerRecordLength ]
								thatSends: #cannotImportStreamWithWrongCustomerRecordLength
								to: receiver4 ] value ]
					thatSends: #error:
					to: receiver5 ] value ]]
		thatSends: #ifFalse:
		to: receiver6 ] value.! !
!Behavior method!
stop
	#_coverageTracker883463_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker883463_
		cover: (8 to: 14)
		declaredAt: (8 to: 14)
		by: session.
	#_coverageTracker883463_
		coverAll:
			{16 to: 21}
		evaluating: [ receiver1 commit ]
		thatSends: #commit
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ #_coverageTracker883463_
		cover: (25 to: 31)
		declaredAt: (8 to: 14)
		by: session.
	#_coverageTracker883463_
		coverAll:
			{33 to: 37}
		evaluating: [ receiver2 close ]
		thatSends: #close
		to: receiver2 ] value.! !
!Behavior method!
start
	#_coverageTracker883465_ markAsExecuted.
	#_coverageTracker883465_
		cover: (9 to: 15)
		declaredAt: (9 to: 15)
		by:
			(session _ [ | receiver2 |
			receiver2 _ #_coverageTracker883465_
				coverAll:
					{20 to: 34}
				by: DataBaseSession.
			#_coverageTracker883465_
				coverAll:
					{36 to: 39}
				evaluating: [
					receiver2 for:
						[ | receiver1 |
						receiver1 _ #_coverageTracker883465_
							coverAll:
								{42 to: 46}
							by: Array.
						#_coverageTracker883465_
							coverAll:
								{48 to: 52. 62 to: 66}
							evaluating: [
								receiver1
									with:
										(#_coverageTracker883465_
											coverAll:
												{54 to: 60}
											by: Address)
									with:
										(#_coverageTracker883465_
											coverAll:
												{68 to: 75}
											by: Customer) ]
							thatSends: #with:with:
							to: receiver1 ] value ]
				thatSends: #for:
				to: receiver2 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker883465_
		cover: (80 to: 86)
		declaredAt: (9 to: 15)
		by: session.
	#_coverageTracker883465_
		coverAll:
			{88 to: 103}
		evaluating: [ receiver3 beginTransaction ]
		thatSends: #beginTransaction
		to: receiver3 ] value.! !
!Behavior method!
addresses
	#_coverageTracker883478_ markAsExecuted.
	^ #_coverageTracker883478_
		cover: (15 to: 23)
		declaredAt: (15 to: 23)
		by: addresses.! !
!Behavior method!
assertCustomerWasImported
	#_coverageTracker883481_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 _ #_coverageTracker883481_
		cover: (31 to: 38)
		declaredAt: (31 to: 38)
		by: customer.
	#_coverageTracker883481_
		coverAll:
			{40 to: 45}
		evaluating: [
			receiver4 ifNil: [
				[ | receiver3 |
				receiver3 _ #_coverageTracker883481_
					coverAll:
						{48 to: 51}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker883481_
					coverAll:
						{53 to: 58}
					evaluating: [
						receiver3 error:
							[ | receiver2 |
							receiver2 _ [ | receiver1 |
							receiver1 _ #_coverageTracker883481_
								coverAll:
									{60 to: 63}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker883481_
								coverAll:
									{65 to: 69}
								evaluating: [ receiver1 class ]
								thatSends: #class
								to: receiver1 ] value.
							#_coverageTracker883481_
								coverAll:
									{71 to: 113}
								evaluating: [ receiver2 cannotImportAnAddressRecordWithoutACustomer ]
								thatSends: #cannotImportAnAddressRecordWithoutACustomer
								to: receiver2 ] value ]
					thatSends: #error:
					to: receiver3 ] value ]]
		thatSends: #ifNil:
		to: receiver4 ] value.! !
!Behavior method!
stop
	#_coverageTracker883485_ markAsExecuted.! !
!Behavior method!
objectsOfType: aType
	#_coverageTracker883487_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker883487_
		cover: (26 to: 31)
		declaredAt: (26 to: 31)
		by: tables.
	#_coverageTracker883487_
		coverAll:
			{33 to: 35. 43 to: 51}
		evaluating: [
			receiver1
				at:
					(#_coverageTracker883487_
						cover: (37 to: 41)
						declaredAt: (16 to: 20)
						by: aType)
				ifAbsent: [
					#_coverageTracker883487_
						coverAll:
							{55 to: 57}
						byLiteralOrPseudoVariable: #() ]]
		thatSends: #at:ifAbsent:
		to: receiver1 ] value.! !
!Behavior method!
selectAllOfType: aType
	#_coverageTracker883492_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker883492_
		coverAll:
			{26 to: 29}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883492_
		coverAll:
			{31 to: 35}
		evaluating: [ receiver1 delay ]
		thatSends: #delay
		to: receiver1 ] value.
	^ [ | receiver3 |
	receiver3 _ [ | receiver2 |
	receiver2 _ #_coverageTracker883492_
		coverAll:
			{41 to: 44}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883492_
		coverAll:
			{46 to: 59}
		evaluating: [
			receiver2 objectsOfType:
				(#_coverageTracker883492_
					cover: (61 to: 65)
					declaredAt: (18 to: 22)
					by: aType) ]
		thatSends: #objectsOfType:
		to: receiver2 ] value.
	#_coverageTracker883492_
		coverAll:
			{68 to: 71}
		evaluating: [ receiver3 copy ]
		thatSends: #copy
		to: receiver3 ] value.! !
!Behavior method!
newIdFor: anObject
	#_coverageTracker883496_ markAsExecuted.
	#_coverageTracker883496_
		cover: (28 to: 29)
		declaredAt: (22 to: 23)
		by:
			(id _ [ | receiver1 |
			receiver1 _ #_coverageTracker883496_
				cover: (22 to: 23)
				declaredAt: (22 to: 23)
				by: id.
			#_coverageTracker883496_
				coverAll:
					{31 to: 31}
				evaluating: [
					receiver1 +
						(#_coverageTracker883496_
							coverAll:
								{33 to: 33}
							byLiteralOrPseudoVariable: 1) ]
				thatSends: #+
				to: receiver1 ] value).
	^ #_coverageTracker883496_
		cover: (38 to: 39)
		declaredAt: (22 to: 23)
		by: id.! !
!Behavior method!
importRecord
	#_coverageTracker883501_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker883501_
		coverAll:
			{16 to: 19}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883501_
		coverAll:
			{21 to: 42}
		evaluating: [ receiver1 assertRecordIsNotEmpty ]
		thatSends: #assertRecordIsNotEmpty
		to: receiver1 ] value.
	[ | receiver4 |
	receiver4 _ [ | receiver2 |
	receiver2 _ #_coverageTracker883501_
		coverAll:
			{49 to: 52}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883501_
		coverAll:
			{54 to: 63}
		evaluating: [ receiver2 isCustomer ]
		thatSends: #isCustomer
		to: receiver2 ] value.
	#_coverageTracker883501_
		coverAll:
			{66 to: 72}
		evaluating: [ receiver4 ifTrue: [ ^ [ | receiver3 |
				receiver3 _ #_coverageTracker883501_
					coverAll:
						{77 to: 80}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker883501_
					coverAll:
						{82 to: 95}
					evaluating: [ receiver3 importCustomer ]
					thatSends: #importCustomer
					to: receiver3 ] value ]]
		thatSends: #ifTrue:
		to: receiver4 ] value.
	[ | receiver7 |
	receiver7 _ [ | receiver5 |
	receiver5 _ #_coverageTracker883501_
		coverAll:
			{101 to: 104}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883501_
		coverAll:
			{106 to: 114}
		evaluating: [ receiver5 isAddress ]
		thatSends: #isAddress
		to: receiver5 ] value.
	#_coverageTracker883501_
		coverAll:
			{117 to: 123}
		evaluating: [ receiver7 ifTrue: [ ^ [ | receiver6 |
				receiver6 _ #_coverageTracker883501_
					coverAll:
						{128 to: 131}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker883501_
					coverAll:
						{133 to: 145}
					evaluating: [ receiver6 importAddress ]
					thatSends: #importAddress
					to: receiver6 ] value ]]
		thatSends: #ifTrue:
		to: receiver7 ] value.
	[ | receiver10 |
	receiver10 _ #_coverageTracker883501_
		coverAll:
			{152 to: 155}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883501_
		coverAll:
			{157 to: 162}
		evaluating: [
			receiver10 error:
				[ | receiver9 |
				receiver9 _ [ | receiver8 |
				receiver8 _ #_coverageTracker883501_
					coverAll:
						{164 to: 167}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker883501_
					coverAll:
						{169 to: 173}
					evaluating: [ receiver8 class ]
					thatSends: #class
					to: receiver8 ] value.
				#_coverageTracker883501_
					coverAll:
						{175 to: 223}
					evaluating: [ receiver9 cannotImportStreamWithInvalidRecordIdentification ]
					thatSends: #cannotImportStreamWithInvalidRecordIdentification
					to: receiver9 ] value ]
		thatSends: #error:
		to: receiver10 ] value.! !
!Behavior method!
for: aConfiguration
	#_coverageTracker883516_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker883516_
		coverAll:
			{24 to: 27}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883516_
		coverAll:
			{29 to: 31}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker883516_
		coverAll:
			{33 to: 46}
		evaluating: [
			receiver2 initializeFor:
				(#_coverageTracker883516_
					cover: (48 to: 61)
					declaredAt: (6 to: 19)
					by: aConfiguration) ]
		thatSends: #initializeFor:
		to: receiver2 ] value.! !
!Behavior method!
cannotImportStreamWithWrongCustomerRecordLength
	#_coverageTracker883519_ markAsExecuted.
	^ #_coverageTracker883519_
		coverAll:
			{51 to: 106}
		byLiteralOrPseudoVariable: 'cannot import stream with wrong customer record length'.! !
!Behavior method!
cannotImportAnAddressRecordWithoutACustomer
	#_coverageTracker883521_ markAsExecuted.
	^ #_coverageTracker883521_
		coverAll:
			{49 to: 93}
		byLiteralOrPseudoVariable: 'Cannot import an address without a customer'.! !
!Behavior method!
customerWithIdentificationType: anIdType number: anIdNumber
	#_coverageTracker883525_ markAsExecuted.
	^ [ | receiver6 |
	receiver6 _ #_coverageTracker883525_
		cover: (64 to: 72)
		declaredAt: (64 to: 72)
		by: customers.
	#_coverageTracker883525_
		coverAll:
			{74 to: 80}
		evaluating: [
			receiver6 detect: [ :aCustomer |
				[ | receiver5 |
				receiver5 _ [ | receiver2 |
				receiver2 _ [ | receiver1 |
				receiver1 _ #_coverageTracker883525_
					cover: (96 to: 104)
					declaredAt: (84 to: 92)
					by: aCustomer.
				#_coverageTracker883525_
					coverAll:
						{106 to: 123}
					evaluating: [ receiver1 identificationType ]
					thatSends: #identificationType
					to: receiver1 ] value.
				#_coverageTracker883525_
					coverAll:
						{125 to: 125}
					evaluating: [
						receiver2 =
							(#_coverageTracker883525_
								cover: (127 to: 134)
								declaredAt: (33 to: 40)
								by: anIdType) ]
					thatSends: #=
					to: receiver2 ] value.
				#_coverageTracker883525_
					coverAll:
						{136 to: 139}
					evaluating: [
						receiver5 and: [
							[ | receiver4 |
							receiver4 _ [ | receiver3 |
							receiver3 _ #_coverageTracker883525_
								cover: (142 to: 150)
								declaredAt: (84 to: 92)
								by: aCustomer.
							#_coverageTracker883525_
								coverAll:
									{152 to: 171}
								evaluating: [ receiver3 identificationNumber ]
								thatSends: #identificationNumber
								to: receiver3 ] value.
							#_coverageTracker883525_
								coverAll:
									{173 to: 173}
								evaluating: [
									receiver4 =
										(#_coverageTracker883525_
											cover: (175 to: 184)
											declaredAt: (50 to: 59)
											by: anIdNumber) ]
								thatSends: #=
								to: receiver4 ] value ]]
					thatSends: #and:
					to: receiver5 ] value ]]
		thatSends: #detect:
		to: receiver6 ] value.! !
!Behavior method!
persist: anObject
	| table |
	#_coverageTracker883548_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker883548_
		coverAll:
			{33 to: 36}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883548_
		coverAll:
			{38 to: 42}
		evaluating: [ receiver1 delay ]
		thatSends: #delay
		to: receiver1 ] value.
	#_coverageTracker883548_
		cover: (46 to: 50)
		declaredAt: (23 to: 27)
		by:
			(table _ [ | receiver4 |
			receiver4 _ #_coverageTracker883548_
				cover: (55 to: 60)
				declaredAt: (55 to: 60)
				by: tables.
			#_coverageTracker883548_
				coverAll:
					{62 to: 64. 81 to: 92}
				evaluating: [
					receiver4
						at:
							[ | receiver2 |
							receiver2 _ #_coverageTracker883548_
								cover: (66 to: 73)
								declaredAt: (10 to: 17)
								by: anObject.
							#_coverageTracker883548_
								coverAll:
									{75 to: 79}
								evaluating: [ receiver2 class ]
								thatSends: #class
								to: receiver2 ] value
						ifAbsentPut: [
							[ | receiver3 |
							receiver3 _ #_coverageTracker883548_
								coverAll:
									{96 to: 98}
								by: Set.
							#_coverageTracker883548_
								coverAll:
									{100 to: 102}
								evaluating: [ receiver3 new ]
								thatSends: #new
								to: receiver3 ] value ]]
				thatSends: #at:ifAbsentPut:
				to: receiver4 ] value).
	[ | receiver5 |
	receiver5 _ #_coverageTracker883548_
		coverAll:
			{109 to: 112}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883548_
		coverAll:
			{114 to: 124}
		evaluating: [
			receiver5 defineIdOf:
				(#_coverageTracker883548_
					cover: (126 to: 133)
					declaredAt: (10 to: 17)
					by: anObject) ]
		thatSends: #defineIdOf:
		to: receiver5 ] value.
	[ | receiver6 |
	receiver6 _ #_coverageTracker883548_
		cover: (137 to: 141)
		declaredAt: (23 to: 27)
		by: table.
	#_coverageTracker883548_
		coverAll:
			{143 to: 146}
		evaluating: [
			receiver6 add:
				(#_coverageTracker883548_
					cover: (148 to: 155)
					declaredAt: (10 to: 17)
					by: anObject) ]
		thatSends: #add:
		to: receiver6 ] value.
	[ | receiver9 |
	receiver9 _ [ | receiver7 |
	receiver7 _ #_coverageTracker883548_
		cover: (161 to: 168)
		declaredAt: (10 to: 17)
		by: anObject.
	#_coverageTracker883548_
		coverAll:
			{170 to: 178}
		evaluating: [
			receiver7 isKindOf:
				(#_coverageTracker883548_
					coverAll:
						{180 to: 187}
					by: Customer) ]
		thatSends: #isKindOf:
		to: receiver7 ] value.
	#_coverageTracker883548_
		coverAll:
			{190 to: 196}
		evaluating: [
			receiver9 ifTrue: [
				[ | receiver8 |
				receiver8 _ #_coverageTracker883548_
					coverAll:
						{200 to: 203}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker883548_
					coverAll:
						{205 to: 223}
					evaluating: [
						receiver8 persistAddressesOf:
							(#_coverageTracker883548_
								cover: (225 to: 232)
								declaredAt: (10 to: 17)
								by: anObject) ]
					thatSends: #persistAddressesOf:
					to: receiver8 ] value ]]
		thatSends: #ifTrue:
		to: receiver9 ] value.! !
!Behavior method!
isCurrent
	#_coverageTracker883564_ markAsExecuted.
	^ #_coverageTracker883564_
		coverAll:
			{14 to: 18}
		byLiteralOrPseudoVariable: false.! !
!Behavior method!
delay
	#_coverageTracker883566_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker883566_
		coverAll:
			{10 to: 14}
		by: Delay.
	#_coverageTracker883566_
		coverAll:
			{16 to: 31}
		evaluating: [
			receiver1 forMilliseconds:
				(#_coverageTracker883566_
					coverAll:
						{33 to: 35}
					byLiteralOrPseudoVariable: 100) ]
		thatSends: #forMilliseconds:
		to: receiver1 ] value.
	#_coverageTracker883566_
		coverAll:
			{38 to: 41}
		evaluating: [ receiver2 wait ]
		thatSends: #wait
		to: receiver2 ] value.! !
!Behavior method!
defineIdOf: anObject
	#_coverageTracker883581_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker883581_
		cover: (24 to: 31)
		declaredAt: (13 to: 20)
		by: anObject.
	#_coverageTracker883581_
		coverAll:
			{33 to: 45. 52 to: 55}
		evaluating: [
			receiver2
				instVarNamed:
					(#_coverageTracker883581_
						coverAll:
							{47 to: 50}
						byLiteralOrPseudoVariable: 'id')
				put:
					[ | receiver1 |
					receiver1 _ #_coverageTracker883581_
						coverAll:
							{58 to: 61}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker883581_
						coverAll:
							{63 to: 71}
						evaluating: [
							receiver1 newIdFor:
								(#_coverageTracker883581_
									cover: (73 to: 80)
									declaredAt: (13 to: 20)
									by: anObject) ]
						thatSends: #newIdFor:
						to: receiver1 ] value ]
		thatSends: #instVarNamed:put:
		to: receiver2 ] value.! !
!Behavior method!
firstName
	#_coverageTracker883586_ markAsExecuted.
	^ #_coverageTracker883586_
		cover: (14 to: 22)
		declaredAt: (14 to: 22)
		by: firstName.! !
!Behavior method!
initializeFirstName: aFirstName lastName: aLastName identificationType: anIdentificationType identificationNumber: anIdentificationNumber
	#_coverageTracker883588_ markAsExecuted.
	#_coverageTracker883588_
		cover: (141 to: 149)
		declaredAt: (141 to: 149)
		by:
			(firstName _ #_coverageTracker883588_
				cover: (154 to: 163)
				declaredAt: (22 to: 31)
				by: aFirstName).
	#_coverageTracker883588_
		cover: (167 to: 174)
		declaredAt: (167 to: 174)
		by:
			(lastName _ #_coverageTracker883588_
				cover: (179 to: 187)
				declaredAt: (43 to: 51)
				by: aLastName).
	#_coverageTracker883588_
		cover: (191 to: 208)
		declaredAt: (191 to: 208)
		by:
			(identificationType _ #_coverageTracker883588_
				cover: (213 to: 232)
				declaredAt: (73 to: 92)
				by: anIdentificationType).
	#_coverageTracker883588_
		cover: (236 to: 255)
		declaredAt: (236 to: 255)
		by:
			(identificationNumber _ #_coverageTracker883588_
				cover: (260 to: 281)
				declaredAt: (116 to: 137)
				by: anIdentificationNumber).! !
!Behavior method!
close
	#_coverageTracker883595_ markAsExecuted.! !
!Behavior method!
select: aCondition ofType: aType
	#_coverageTracker883597_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker883597_
		coverAll:
			{36 to: 39}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883597_
		coverAll:
			{41 to: 45}
		evaluating: [ receiver1 delay ]
		thatSends: #delay
		to: receiver1 ] value.
	^ [ | receiver3 |
	receiver3 _ [ | receiver2 |
	receiver2 _ #_coverageTracker883597_
		coverAll:
			{51 to: 54}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883597_
		coverAll:
			{56 to: 69}
		evaluating: [
			receiver2 objectsOfType:
				(#_coverageTracker883597_
					cover: (71 to: 75)
					declaredAt: (28 to: 32)
					by: aType) ]
		thatSends: #objectsOfType:
		to: receiver2 ] value.
	#_coverageTracker883597_
		coverAll:
			{78 to: 84}
		evaluating: [
			receiver3 select:
				(#_coverageTracker883597_
					cover: (86 to: 95)
					declaredAt: (9 to: 18)
					by: aCondition) ]
		thatSends: #select:
		to: receiver3 ] value.! !
!Behavior method!
numberOfCustomers
	#_coverageTracker883601_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker883601_
		cover: (22 to: 30)
		declaredAt: (22 to: 30)
		by: customers.
	#_coverageTracker883601_
		coverAll:
			{32 to: 35}
		evaluating: [ receiver1 size ]
		thatSends: #size
		to: receiver1 ] value.! !
!Behavior method!
isAddress
	#_coverageTracker883615_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker883615_
		cover: (15 to: 20)
		declaredAt: (15 to: 20)
		by: record.
	#_coverageTracker883615_
		coverAll:
			{22 to: 26}
		evaluating: [ receiver1 first ]
		thatSends: #first
		to: receiver1 ] value.
	#_coverageTracker883615_
		coverAll:
			{28 to: 28}
		evaluating: [
			receiver2 =
				(#_coverageTracker883615_
					coverAll:
						{30 to: 32}
					byLiteralOrPseudoVariable: 'A') ]
		thatSends: #=
		to: receiver2 ] value.! !
!Behavior method!
identificationType
	#_coverageTracker883617_ markAsExecuted.
	^ #_coverageTracker883617_
		cover: (23 to: 40)
		declaredAt: (23 to: 40)
		by: identificationType.! !
!Behavior method!
addAddress: anAddress
	#_coverageTracker883619_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker883619_
		cover: (25 to: 33)
		declaredAt: (25 to: 33)
		by: addresses.
	#_coverageTracker883619_
		coverAll:
			{35 to: 38}
		evaluating: [
			receiver1 add:
				(#_coverageTracker883619_
					cover: (40 to: 48)
					declaredAt: (13 to: 21)
					by: anAddress) ]
		thatSends: #add:
		to: receiver1 ] value.! !
!Behavior method!
initializeFrom: aReadStream into: aCustomerSystem
	#_coverageTracker883624_ markAsExecuted.
	#_coverageTracker883624_
		cover: (52 to: 65)
		declaredAt: (52 to: 65)
		by:
			(customerSystem _ #_coverageTracker883624_
				cover: (70 to: 84)
				declaredAt: (35 to: 49)
				by: aCustomerSystem).
	#_coverageTracker883624_
		cover: (88 to: 97)
		declaredAt: (88 to: 97)
		by:
			(readStream _ #_coverageTracker883624_
				cover: (102 to: 112)
				declaredAt: (17 to: 27)
				by: aReadStream).! !
!Behavior method!
isAt: aStreetName
	#_coverageTracker883626_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker883626_
		cover: (22 to: 31)
		declaredAt: (22 to: 31)
		by: streetName.
	#_coverageTracker883626_
		coverAll:
			{33 to: 33}
		evaluating: [
			receiver1 =
				(#_coverageTracker883626_
					cover: (35 to: 45)
					declaredAt: (7 to: 17)
					by: aStreetName) ]
		thatSends: #=
		to: receiver1 ] value.! !
!Behavior method!
isCurrent
	#_coverageTracker883631_ markAsExecuted.
	^ #_coverageTracker883631_
		coverAll:
			{14 to: 17}
		byLiteralOrPseudoVariable: true.! !
!Behavior method!
persistAddressesOf: anObjectWithAddresses
	#_coverageTracker883633_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker883633_
		cover: (45 to: 65)
		declaredAt: (21 to: 41)
		by: anObjectWithAddresses.
	#_coverageTracker883633_
		coverAll:
			{67 to: 75}
		evaluating: [ receiver1 addresses ]
		thatSends: #addresses
		to: receiver1 ] value.
	#_coverageTracker883633_
		coverAll:
			{77 to: 79}
		evaluating: [
			receiver3 do: [ :anAddress |
				[ | receiver2 |
				receiver2 _ #_coverageTracker883633_
					coverAll:
						{96 to: 99}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker883633_
					coverAll:
						{101 to: 108}
					evaluating: [
						receiver2 persist:
							(#_coverageTracker883633_
								cover: (110 to: 118)
								declaredAt: (84 to: 92)
								by: anAddress) ]
					thatSends: #persist:
					to: receiver2 ] value ]]
		thatSends: #do:
		to: receiver3 ] value.! !
!Behavior method!
streetNumber
	#_coverageTracker883647_ markAsExecuted.
	^ #_coverageTracker883647_
		cover: (17 to: 28)
		declaredAt: (17 to: 28)
		by: streetNumber.! !
!Behavior method!
add: aCustomer
	#_coverageTracker883649_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker883649_
		cover: (19 to: 25)
		declaredAt: (19 to: 25)
		by: session.
	#_coverageTracker883649_
		coverAll:
			{27 to: 34}
		evaluating: [
			receiver1 persist:
				(#_coverageTracker883649_
					cover: (36 to: 44)
					declaredAt: (6 to: 14)
					by: aCustomer) ]
		thatSends: #persist:
		to: receiver1 ] value.! !
!Behavior method!
addressAt: aStreetName ifNone: aNoneBlock
	#_coverageTracker883651_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker883651_
		cover: (46 to: 54)
		declaredAt: (46 to: 54)
		by: addresses.
	#_coverageTracker883651_
		coverAll:
			{56 to: 62. 105 to: 111}
		evaluating: [
			receiver2
				detect: [ :address |
					[ | receiver1 |
					receiver1 _ #_coverageTracker883651_
						cover: (77 to: 83)
						declaredAt: (67 to: 73)
						by: address.
					#_coverageTracker883651_
						coverAll:
							{85 to: 89}
						evaluating: [
							receiver1 isAt:
								(#_coverageTracker883651_
									cover: (91 to: 101)
									declaredAt: (12 to: 22)
									by: aStreetName) ]
						thatSends: #isAt:
						to: receiver1 ] value ]
				ifNone:
					(#_coverageTracker883651_
						cover: (113 to: 122)
						declaredAt: (32 to: 41)
						by: aNoneBlock) ]
		thatSends: #detect:ifNone:
		to: receiver2 ] value.! !
!Behavior method!
current
	#_coverageTracker883658_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 _ [ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker883658_
		coverAll:
			{14 to: 17}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883658_
		coverAll:
			{19 to: 28}
		evaluating: [ receiver1 subclasses ]
		thatSends: #subclasses
		to: receiver1 ] value.
	#_coverageTracker883658_
		coverAll:
			{30 to: 36}
		evaluating: [
			receiver3 detect: [ :anEnvironmentSubclass |
				[ | receiver2 |
				receiver2 _ #_coverageTracker883658_
					cover: (64 to: 84)
					declaredAt: (40 to: 60)
					by: anEnvironmentSubclass.
				#_coverageTracker883658_
					coverAll:
						{86 to: 94}
					evaluating: [ receiver2 isCurrent ]
					thatSends: #isCurrent
					to: receiver2 ] value ]]
		thatSends: #detect:
		to: receiver3 ] value.
	#_coverageTracker883658_
		coverAll:
			{98 to: 100}
		evaluating: [ receiver4 new ]
		thatSends: #new
		to: receiver4 ] value.! !
!Behavior method!
numberOfAdresses
	#_coverageTracker883669_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker883669_
		cover: (22 to: 28)
		declaredAt: (22 to: 28)
		by: session.
	#_coverageTracker883669_
		coverAll:
			{30 to: 45}
		evaluating: [
			receiver1 selectAllOfType:
				(#_coverageTracker883669_
					coverAll:
						{47 to: 53}
					by: Address) ]
		thatSends: #selectAllOfType:
		to: receiver1 ] value.
	#_coverageTracker883669_
		coverAll:
			{56 to: 59}
		evaluating: [ receiver2 size ]
		thatSends: #size
		to: receiver2 ] value.! !
!Behavior method!
province
	#_coverageTracker883674_ markAsExecuted.
	^ #_coverageTracker883674_
		cover: (13 to: 20)
		declaredAt: (13 to: 20)
		by: province.! !
!Behavior method!
createCustomerSystem
	#_coverageTracker883676_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker883676_
		coverAll:
			{26 to: 48}
		by: TransientCustomerSystem.
	#_coverageTracker883676_
		coverAll:
			{50 to: 52}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.! !
!Behavior method!
customerWithIdentificationType: anIdType number: anIdNumber
	#_coverageTracker883678_ markAsExecuted.
	^ [ | receiver7 |
	receiver7 _ [ | receiver6 |
	receiver6 _ #_coverageTracker883678_
		cover: (66 to: 72)
		declaredAt: (66 to: 72)
		by: session.
	#_coverageTracker883678_
		coverAll:
			{76 to: 82. 195 to: 201}
		evaluating: [
			receiver6
				select: [ :aCustomer |
					[ | receiver5 |
					receiver5 _ [ | receiver2 |
					receiver2 _ [ | receiver1 |
					receiver1 _ #_coverageTracker883678_
						cover: (99 to: 107)
						declaredAt: (87 to: 95)
						by: aCustomer.
					#_coverageTracker883678_
						coverAll:
							{109 to: 126}
						evaluating: [ receiver1 identificationType ]
						thatSends: #identificationType
						to: receiver1 ] value.
					#_coverageTracker883678_
						coverAll:
							{128 to: 128}
						evaluating: [
							receiver2 =
								(#_coverageTracker883678_
									cover: (130 to: 137)
									declaredAt: (33 to: 40)
									by: anIdType) ]
						thatSends: #=
						to: receiver2 ] value.
					#_coverageTracker883678_
						coverAll:
							{139 to: 142}
						evaluating: [
							receiver5 and: [
								[ | receiver4 |
								receiver4 _ [ | receiver3 |
								receiver3 _ #_coverageTracker883678_
									cover: (146 to: 154)
									declaredAt: (87 to: 95)
									by: aCustomer.
								#_coverageTracker883678_
									coverAll:
										{156 to: 175}
									evaluating: [ receiver3 identificationNumber ]
									thatSends: #identificationNumber
									to: receiver3 ] value.
								#_coverageTracker883678_
									coverAll:
										{177 to: 177}
									evaluating: [
										receiver4 =
											(#_coverageTracker883678_
												cover: (179 to: 188)
												declaredAt: (50 to: 59)
												by: anIdNumber) ]
									thatSends: #=
									to: receiver4 ] value ]]
						thatSends: #and:
						to: receiver5 ] value ]
				ofType:
					(#_coverageTracker883678_
						coverAll:
							{203 to: 210}
						by: Customer) ]
		thatSends: #select:ofType:
		to: receiver6 ] value.
	#_coverageTracker883678_
		coverAll:
			{213 to: 218}
		evaluating: [ receiver7 anyOne ]
		thatSends: #anyOne
		to: receiver7 ] value.! !
!Behavior method!
numberOfCustomers
	#_coverageTracker883690_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker883690_
		cover: (23 to: 29)
		declaredAt: (23 to: 29)
		by: session.
	#_coverageTracker883690_
		coverAll:
			{31 to: 46}
		evaluating: [
			receiver1 selectAllOfType:
				(#_coverageTracker883690_
					coverAll:
						{48 to: 55}
					by: Customer) ]
		thatSends: #selectAllOfType:
		to: receiver1 ] value.
	#_coverageTracker883690_
		coverAll:
			{58 to: 61}
		evaluating: [ receiver2 size ]
		thatSends: #size
		to: receiver2 ] value.! !
!Behavior method!
cannotImportEmptyStream
	#_coverageTracker883703_ markAsExecuted.
	^ #_coverageTracker883703_
		coverAll:
			{27 to: 57}
		byLiteralOrPseudoVariable: 'cannot import an empty stream'.! !
!Behavior method!
start
	#_coverageTracker883714_ markAsExecuted.
	#_coverageTracker883714_
		cover: (9 to: 17)
		declaredAt: (9 to: 17)
		by:
			(customers _ [ | receiver1 |
			receiver1 _ #_coverageTracker883714_
				coverAll:
					{21 to: 37}
				by: OrderedCollection.
			#_coverageTracker883714_
				coverAll:
					{39 to: 41}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker883714_
		cover: (45 to: 53)
		declaredAt: (45 to: 53)
		by:
			(addresses _ [ | receiver2 |
			receiver2 _ #_coverageTracker883714_
				coverAll:
					{58 to: 74}
				by: OrderedCollection.
			#_coverageTracker883714_
				coverAll:
					{76 to: 78}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).! !
!Behavior method!
initializeFor: aConfiguration
	#_coverageTracker883728_ markAsExecuted.
	#_coverageTracker883728_
		cover: (33 to: 45)
		declaredAt: (33 to: 45)
		by:
			(configuration _ #_coverageTracker883728_
				cover: (50 to: 63)
				declaredAt: (16 to: 29)
				by: aConfiguration).
	#_coverageTracker883728_
		cover: (67 to: 72)
		declaredAt: (67 to: 72)
		by:
			(tables _ [ | receiver1 |
			receiver1 _ #_coverageTracker883728_
				coverAll:
					{77 to: 86}
				by: Dictionary.
			#_coverageTracker883728_
				coverAll:
					{88 to: 90}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker883728_
		cover: (94 to: 95)
		declaredAt: (94 to: 95)
		by:
			(id _ #_coverageTracker883728_
				coverAll:
					{100 to: 100}
				byLiteralOrPseudoVariable: 0).! !
!Behavior method!
beginTransaction
	#_coverageTracker883732_ markAsExecuted.! !
!Behavior method!
streetName
	#_coverageTracker883734_ markAsExecuted.
	^ #_coverageTracker883734_
		cover: (15 to: 24)
		declaredAt: (15 to: 24)
		by: streetName.! !
!Behavior method!
cannotImportAnInputWithWrongAddressRecordLength
	#_coverageTracker883737_ markAsExecuted.
	^ #_coverageTracker883737_
		coverAll:
			{51 to: 107}
		byLiteralOrPseudoVariable: 'cannot import an input with wrong address record length'.! !
!Behavior method!
streetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince
	#_coverageTracker883750_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker883750_
		coverAll:
			{106 to: 109}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker883750_
		coverAll:
			{111 to: 113}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker883750_
		coverAll:
			{115 to: 135. 149 to: 161. 177 to: 181. 189 to: 196. 207 to: 215}
		evaluating: [
			receiver2
				initializeStreetName:
					(#_coverageTracker883750_
						cover: (137 to: 147)
						declaredAt: (13 to: 23)
						by: aStreetName)
				streetNumber:
					(#_coverageTracker883750_
						cover: (163 to: 175)
						declaredAt: (39 to: 51)
						by: aStreetNumber)
				town:
					(#_coverageTracker883750_
						cover: (183 to: 187)
						declaredAt: (59 to: 63)
						by: aTown)
				zipCode:
					(#_coverageTracker883750_
						cover: (198 to: 205)
						declaredAt: (74 to: 81)
						by: aZipCode)
				province:
					(#_coverageTracker883750_
						cover: (217 to: 225)
						declaredAt: (93 to: 101)
						by: aProvince) ]
		thatSends: #initializeStreetName:streetNumber:town:zipCode:province:
		to: receiver2 ] value.! !
!Behavior method!
initialize
	#_coverageTracker883757_ markAsExecuted.
	#_coverageTracker883757_
		coverAll:
			{20 to: 29}
		evaluating: [ super initialize ]
		thatSends: #initialize
		to: super.
	#_coverageTracker883757_
		cover: (33 to: 41)
		declaredAt: (33 to: 41)
		by:
			(addresses _ [ | receiver1 |
			receiver1 _ #_coverageTracker883757_
				coverAll:
					{46 to: 62}
				by: OrderedCollection.
			#_coverageTracker883757_
				coverAll:
					{64 to: 66}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
assertAddressRecordSizeIsValid
	#_coverageTracker883770_ markAsExecuted.
	^ [ | receiver6 |
	receiver6 _ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker883770_
		cover: (37 to: 42)
		declaredAt: (37 to: 42)
		by: record.
	#_coverageTracker883770_
		coverAll:
			{44 to: 47}
		evaluating: [ receiver1 size ]
		thatSends: #size
		to: receiver1 ] value.
	#_coverageTracker883770_
		coverAll:
			{49 to: 49}
		evaluating: [
			receiver2 =
				(#_coverageTracker883770_
					coverAll:
						{51 to: 51}
					byLiteralOrPseudoVariable: 6) ]
		thatSends: #=
		to: receiver2 ] value.
	#_coverageTracker883770_
		coverAll:
			{54 to: 61}
		evaluating: [
			receiver6 ifFalse: [
				[ | receiver5 |
				receiver5 _ #_coverageTracker883770_
					coverAll:
						{64 to: 67}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker883770_
					coverAll:
						{69 to: 74}
					evaluating: [
						receiver5 error:
							[ | receiver4 |
							receiver4 _ [ | receiver3 |
							receiver3 _ #_coverageTracker883770_
								coverAll:
									{76 to: 79}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker883770_
								coverAll:
									{81 to: 85}
								evaluating: [ receiver3 class ]
								thatSends: #class
								to: receiver3 ] value.
							#_coverageTracker883770_
								coverAll:
									{87 to: 133}
								evaluating: [ receiver4 cannotImportAnInputWithWrongAddressRecordLength ]
								thatSends: #cannotImportAnInputWithWrongAddressRecordLength
								to: receiver4 ] value ]
					thatSends: #error:
					to: receiver5 ] value ]]
		thatSends: #ifFalse:
		to: receiver6 ] value.! !
!Behavior method!
add: aCustomer
	#_coverageTracker883788_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker883788_
		cover: (19 to: 27)
		declaredAt: (19 to: 27)
		by: customers.
	#_coverageTracker883788_
		coverAll:
			{29 to: 32}
		evaluating: [
			receiver1 add:
				(#_coverageTracker883788_
					cover: (34 to: 42)
					declaredAt: (6 to: 14)
					by: aCustomer) ]
		thatSends: #add:
		to: receiver1 ] value.
	[ | receiver3 |
	receiver3 _ #_coverageTracker883788_
		cover: (47 to: 55)
		declaredAt: (47 to: 55)
		by: addresses.
	#_coverageTracker883788_
		coverAll:
			{57 to: 63}
		evaluating: [
			receiver3 addAll:
				[ | receiver2 |
				receiver2 _ #_coverageTracker883788_
					cover: (65 to: 73)
					declaredAt: (6 to: 14)
					by: aCustomer.
				#_coverageTracker883788_
					coverAll:
						{75 to: 83}
					evaluating: [ receiver2 addresses ]
					thatSends: #addresses
					to: receiver2 ] value ]
		thatSends: #addAll:
		to: receiver3 ] value.! !
!Behavior method!
zipCode
	#_coverageTracker883803_ markAsExecuted.
	^ #_coverageTracker883803_
		cover: (12 to: 18)
		declaredAt: (12 to: 18)
		by: zipCode.! !
!Behavior method!
createRecord
	#_coverageTracker883814_ markAsExecuted.
	^ #_coverageTracker883814_
		cover: (17 to: 22)
		declaredAt: (17 to: 22)
		by:
			(record _ [ | receiver1 |
			receiver1 _ #_coverageTracker883814_
				cover: (27 to: 30)
				declaredAt: (27 to: 30)
				by: line.
			#_coverageTracker883814_
				coverAll:
					{32 to: 42}
				evaluating: [
					receiver1 findTokens:
						(#_coverageTracker883814_
							coverAll:
								{44 to: 45}
							byLiteralOrPseudoVariable: $,) ]
				thatSends: #findTokens:
				to: receiver1 ] value).! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 7/1/2023 15:02:47'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 7/1/2023 15:02:47'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 7/1/2023 15:02:47'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 7/1/2023 15:02:47'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 7/1/2023 15:02:47'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 7/1/2023 15:02:47'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 7/1/2023 15:02:47'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 7/1/2023 15:02:47'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 7/1/2023 15:02:47'!
PASSED!
!CustomerImporter methodsFor: 'address' stamp: 'NB 7/1/2023 15:03:45' prior: 50625864!
importAddress
	
	| newAddress |
			self assertAddressRecordSizeIsValid.
			
			self assertCustomerWasImported.
			
			newAddress := Address 
				streetName: record second 
				streetNumber: record third asNumber 
				town: record fourth 
				zipCode: record fifth asNumber	 
				province: record sixth. 
			customer addAddress: newAddress.
			customerSystem addAddress: newAddress.! !
!CustomerSystem methodsFor: 'adding' stamp: 'NB 7/1/2023 15:04:26'!
addAddress: anAddress
	
	self subclassResponsibility ! !
!PersistentCustomerSystem methodsFor: 'adding' stamp: 'NB 7/1/2023 15:05:04' overrides: 50630535!
addAddress: anAddress
	
	session persist: anAddress.! !

----STARTUP---- (1 July 2023 15:05:35) as /Users/nico/Documents/inge1/cuis-images/macos64 9/CuisUniversity-5832.image!

!TransientCustomerSystem methodsFor: 'adding' stamp: 'NB 7/1/2023 15:07:34' prior: 50628215 overrides: 50628126!
add: aCustomer
	
	customers add: aCustomer .! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 7/1/2023 15:07:38'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 7/1/2023 15:07:38'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 7/1/2023 15:07:38'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 7/1/2023 15:07:38'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 7/1/2023 15:07:38'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 7/1/2023 15:07:38'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 7/1/2023 15:07:38'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 7/1/2023 15:07:38'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 7/1/2023 15:07:38'!
PASSED!
!TransientCustomerSystem methodsFor: 'address' stamp: 'NB 7/1/2023 15:08:41' prior: 50628205 overrides: 50628137!
numberOfAdresses

	^customers inject: OrderedCollection new addingAll: customers addresses .! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 7/1/2023 15:08:47'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 7/1/2023 15:08:47'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 7/1/2023 15:08:47'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 7/1/2023 15:08:47'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 7/1/2023 15:08:47'!
ERROR!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 7/1/2023 15:08:47'!
ERROR!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 7/1/2023 15:08:48'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 7/1/2023 15:08:48'!
ERROR!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 7/1/2023 15:08:48'!
ERROR!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 7/1/2023 15:08:50'!
ERROR!
!TransientCustomerSystem methodsFor: 'address' stamp: 'NB 7/1/2023 15:09:37' prior: 50628740 overrides: 50628137!
numberOfAdresses

	^customers inject: OrderedCollection new addingAll: [:aCustomer | aCustomer addresses ]! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 7/1/2023 15:09:39'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 7/1/2023 15:09:39'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 7/1/2023 15:09:39'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 7/1/2023 15:09:39'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 7/1/2023 15:09:39'!
FAILURE!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 7/1/2023 15:09:39'!
FAILURE!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 7/1/2023 15:09:39'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 7/1/2023 15:09:39'!
FAILURE!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 7/1/2023 15:09:39'!
FAILURE!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 7/1/2023 15:09:41'!
FAILURE!
!TransientCustomerSystem methodsFor: 'address' stamp: 'NB 7/1/2023 15:10:00' prior: 50628786 overrides: 50628137!
numberOfAdresses

	^customers inject: OrderedCollection new addingAll: [:aCustomer | aCustomer addresses ] size! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 7/1/2023 15:10:02'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 7/1/2023 15:10:02'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 7/1/2023 15:10:02'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 7/1/2023 15:10:02'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 7/1/2023 15:10:02'!
ERROR!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 7/1/2023 15:10:02'!
ERROR!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 7/1/2023 15:10:02'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 7/1/2023 15:10:02'!
ERROR!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 7/1/2023 15:10:02'!
FAILURE!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 7/1/2023 15:10:04'!
ERROR!
!TransientCustomerSystem methodsFor: 'address' stamp: 'NB 7/1/2023 15:10:15' prior: 50628833 overrides: 50628137!
numberOfAdresses

	^(customers inject: OrderedCollection new addingAll: [:aCustomer | aCustomer addresses ]) size! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 7/1/2023 15:10:19'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 7/1/2023 15:10:19'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 7/1/2023 15:10:19'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 7/1/2023 15:10:19'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 7/1/2023 15:10:19'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 7/1/2023 15:10:19'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 7/1/2023 15:10:19'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 7/1/2023 15:10:19'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 7/1/2023 15:10:19'!
PASSED!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 7/1/2023 15:10:21'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 7/1/2023 15:10:21'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 7/1/2023 15:10:21'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 7/1/2023 15:10:21'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 7/1/2023 15:10:21'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 7/1/2023 15:10:21'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 7/1/2023 15:10:21'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 7/1/2023 15:10:21'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 7/1/2023 15:10:21'!
PASSED!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 7/1/2023 15:10:22'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 7/1/2023 15:10:23'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 7/1/2023 15:10:23'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 7/1/2023 15:10:23'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 7/1/2023 15:10:23'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 7/1/2023 15:10:23'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 7/1/2023 15:10:23'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 7/1/2023 15:10:23'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 7/1/2023 15:10:23'!
PASSED!

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 7/1/2023 15:10:26'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 7/1/2023 15:10:26'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 7/1/2023 15:10:26'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 7/1/2023 15:10:26'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 7/1/2023 15:10:26'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 7/1/2023 15:10:26'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 7/1/2023 15:10:26'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 7/1/2023 15:10:26'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 7/1/2023 15:10:26'!
PASSED!
!TransientCustomerSystem methodsFor: 'starting / stoping' stamp: 'NB 7/1/2023 15:10:47' prior: 50628198 overrides: 50628146!
start

	customers:= OrderedCollection new.! !

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'NB 7/1/2023 15:10:54'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'customers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'assertions' stamp: 'NB 7/1/2023 15:11:49' prior: 50627793!
assertImportedRightNumberOfCustomers

	^ self assert: 2 equals: customerSystem numberOfCustomers ! !
!ImportTest methodsFor: 'assertions' stamp: 'NB 7/1/2023 15:11:55' prior: 50627738!
assertNoAddressWasImported

	^ self assert: 0 equals: customerSystem numberOfAdresses ! !
!ImportTest methodsFor: 'assertions' stamp: 'NB 7/1/2023 15:12:00' prior: 50627799!
assertNoCustomerWasImported

	^ self assert: 0 equals: customerSystem numberOfCustomers ! !
!ImportTest methodsFor: 'assertions' stamp: 'NB 7/1/2023 15:12:09' prior: 50627784!
assertOnlyOneCustomerWasImportedWithoutAddresses

	self assert: 1 equals: customerSystem numberOfCustomers .
	self assert: 0 equals: customerSystem numberOfAdresses ! !

!testRun: #ImportTest #test01CanImportCorrectlyAValidInputWithTwoCustomers stamp: 'NB 7/1/2023 15:16:21'!
PASSED!

!testRun: #ImportTest #test02CannotImportAnEmptyInput stamp: 'NB 7/1/2023 15:16:22'!
PASSED!

!testRun: #ImportTest #test03CannotImportAnInputThatHasWrongCustomerRecordIdentificationStartingWithC stamp: 'NB 7/1/2023 15:16:22'!
PASSED!

!testRun: #ImportTest #test04CannotImportAnInputWithACustomerRecordWithLessThanFiveFields stamp: 'NB 7/1/2023 15:16:22'!
PASSED!

!testRun: #ImportTest #test05CannotImportAnInputWithAnAddressRecordWithLessThanSixFields stamp: 'NB 7/1/2023 15:16:22'!
PASSED!

!testRun: #ImportTest #test06CannotImportAnInputThatHasWrongAddressRecordIdentificationStartingWithA stamp: 'NB 7/1/2023 15:16:22'!
PASSED!

!testRun: #ImportTest #test07CannotImportAnInputWithACustomerRecordWithMoreThanFiveFields stamp: 'NB 7/1/2023 15:16:22'!
PASSED!

!testRun: #ImportTest #test08CannotImportAnInputWithAnAddressRecordWithMoreThanSixFields stamp: 'NB 7/1/2023 15:16:22'!
PASSED!

!testRun: #ImportTest #test09CannotImportAnInputWithAnAddressRecordWithoutACustomer stamp: 'NB 7/1/2023 15:16:22'!
PASSED!

----SNAPSHOT----(1 July 2023 15:16:25) CuisUniversity-5832.image priorSource: 9505284!