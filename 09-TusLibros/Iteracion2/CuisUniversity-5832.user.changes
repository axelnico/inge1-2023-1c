

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (8 June 2023 19:44:00) as /Users/nico/Documents/inge1/cuis-images/macos64 5/CuisUniversity-5832.image!


----End fileIn of /Users/nico/Documents/inge1/2023-1c/09-TusLibros/Iteracion1/TusLibros-18.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NB 6/8/2023 19:48:34'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 19:50:24'!
test01CannotCheckoutAnEmptyCart

	! !

Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXX category: 'TusLibros' stamp: 'NB 6/8/2023 19:52:01'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'tests' stamp: 'NB 6/8/2023 19:52:27'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog.! !
!XXX methodsFor: 'tests' stamp: 'NB 6/8/2023 19:53:00'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore.! !
!XXX methodsFor: 'tests' stamp: 'NB 6/8/2023 19:53:14'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!XXX methodsFor: 'tests' stamp: 'NB 6/8/2023 19:53:31'!
itemSellByTheStore
	
	^ 'validBook'! !

!classRenamed: #XXX as: #TestSupport stamp: 'NB 6/8/2023 19:53:52'!
Smalltalk renameClassNamed: #XXX as: #TestSupport!

TestCase subclass: #CartTest
	instanceVariableNames: 'testSupport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'NB 6/8/2023 19:55:08'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testSupport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'NB 6/8/2023 19:55:27' overrides: 16961394!
setUp

	testSupport := TestSupport new.! !
!CartTest methodsFor: 'tests' stamp: 'NB 6/8/2023 19:55:37' prior: 50624490!
test01NewCartsAreCreatedEmpty

	self assert: testSupport createCart isEmpty! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'NB 6/8/2023 19:55:51'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'NB 6/8/2023 19:57:32' prior: 50624468!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testSupport createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'NB 6/8/2023 19:57:36' prior: 50624619!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testSupport createCart.
	
	self 
		should: [ cart add: testSupport itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'NB 6/8/2023 19:57:43' prior: 50624495!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testSupport createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'NB 6/8/2023 19:57:45'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'NB 6/8/2023 19:57:50' prior: 50624645!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testSupport createCart.
	
	cart add: testSupport itemSellByTheStore.
	self deny: cart isEmpty ! !

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'NB 6/8/2023 19:57:51'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'NB 6/8/2023 19:57:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'NB 6/8/2023 19:57:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'NB 6/8/2023 19:57:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'NB 6/8/2023 19:57:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'NB 6/8/2023 19:57:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'NB 6/8/2023 19:57:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'NB 6/8/2023 19:57:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'NB 6/8/2023 19:57:51'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'NB 6/8/2023 19:58:00' prior: 50624455!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testSupport createCart.
	
	self 
		should: [cart add: 0 of: testSupport itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'NB 6/8/2023 19:58:01'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'NB 6/8/2023 19:58:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'NB 6/8/2023 19:58:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'NB 6/8/2023 19:58:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'NB 6/8/2023 19:58:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'NB 6/8/2023 19:58:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'NB 6/8/2023 19:58:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'NB 6/8/2023 19:58:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'NB 6/8/2023 19:58:01'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'NB 6/8/2023 19:58:09' prior: 50624510!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testSupport createCart.
	
	self 
		should: [cart add: 2 of: testSupport itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'NB 6/8/2023 19:58:13'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'NB 6/8/2023 19:58:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'NB 6/8/2023 19:58:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'NB 6/8/2023 19:58:13'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'NB 6/8/2023 19:58:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'NB 6/8/2023 19:58:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'NB 6/8/2023 19:58:13'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'NB 6/8/2023 19:58:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'NB 6/8/2023 19:58:13'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'NB 6/8/2023 19:58:21' prior: 50624523!
test06CartRemembersAddedItems

	| cart |
	
	cart := testSupport createCart.
	
	cart add: testSupport itemSellByTheStore.
	self assert: (cart includes: testSupport itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'NB 6/8/2023 19:58:27' prior: 50624503!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testSupport createCart.
	
	self deny: (cart includes: testSupport itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'NB 6/8/2023 19:58:35' prior: 50624481!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testSupport createCart.
	
	cart add: 2 of: testSupport itemSellByTheStore.
	self assert: (cart occurrencesOf: testSupport itemSellByTheStore) = 2! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'NB 6/8/2023 19:58:36'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'NB 6/8/2023 19:58:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'NB 6/8/2023 19:58:36'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'NB 6/8/2023 19:58:36'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'NB 6/8/2023 19:58:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'NB 6/8/2023 19:58:36'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'NB 6/8/2023 19:58:36'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'NB 6/8/2023 19:58:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'NB 6/8/2023 19:58:36'!
PASSED!

----SNAPSHOT----(8 June 2023 19:58:45) CuisUniversity-5832.image priorSource: 9366758!

!methodRemoval: CartTest #createCart stamp: 'NB 6/8/2023 19:59:19'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CartTest #defaultCatalog stamp: 'NB 6/8/2023 19:59:19'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'NB 6/8/2023 19:59:19'!
itemNotSellByTheStore
	
	^'invalidBook'!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'NB 6/8/2023 19:59:19'!
itemSellByTheStore
	
	^ 'validBook'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'NB 6/8/2023 19:59:20'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'NB 6/8/2023 19:59:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'NB 6/8/2023 19:59:20'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'NB 6/8/2023 19:59:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'NB 6/8/2023 19:59:20'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'NB 6/8/2023 19:59:20'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'NB 6/8/2023 19:59:20'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'NB 6/8/2023 19:59:20'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: 'testSupport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NB 6/8/2023 19:59:34'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testSupport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 19:59:53' overrides: 16961394!
setUp

	testSupport := TestSupport new.

	! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'NB 6/8/2023 20:02:16'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 20:02:11' prior: 50624563!
test01CannotCheckoutAnEmptyCart

	self should: [(Cashier for: testSupport createCart) checkoutWith: '1111111111111111' ]
	 raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | self assert: anError messageText equals: 'Cannot checkout an empty cart'].! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 20:02:23'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'NB 6/8/2023 20:02:28'!
for: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aCart ! !
!Cashier class methodsFor: 'instance creation' stamp: 'NB 6/8/2023 20:02:34' prior: 50624910!
for: aCart 
	
	^self new initializeFor: aCart ! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 20:02:35'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'NB 6/8/2023 20:02:44'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'NB 6/8/2023 20:02:44'!
initializeFor: aCart 
	self shouldBeImplemented.
	cart := aCart.! !
!Cashier methodsFor: 'initialization' stamp: 'NB 6/8/2023 20:02:49' prior: 50624932!
initializeFor: aCart 
	cart := aCart.! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 20:02:50'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'NB 6/8/2023 20:03:27'!
checkoutWith: aRenameMe1 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checkout' stamp: 'NB 6/8/2023 20:03:56' prior: 50624944!
checkoutWith: aCreditCard 
	
	self error: 'Cannot checkout an empty cart'.! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 20:04:03'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 20:04:03'!
PASSED!

----SNAPSHOT----(8 June 2023 20:04:10) CuisUniversity-5832.image priorSource: 9381724!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 20:04:51'!
test02CashierCanCheckoutACartWithOneValidItem

	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 20:06:45' prior: 50624963!
test02CashierCanCheckoutACartWithOneValidItem

	|aCart|
	aCart:= testSupport createCart .
	aCart add: testSupport itemSellByTheStore.
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 20:09:11' prior: 50624968!
test02CashierCanCheckoutACartWithOneValidItem

	|aCart|
	aCart:= testSupport createCart .
	aCart add: testSupport itemSellByTheStore.
	self assert: ((Cashier for: aCart) checkoutWith: '1111111111111111') equals: 10.
	! !

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 20:09:12'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'NB 6/8/2023 20:09:53' prior: 50624949!
checkoutWith: aCreditCard 
	
	cart isEmpty ifTrue: [self error: 'Cannot checkout an empty cart'].
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 20:09:54'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 20:09:54'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 20:09:54'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 20:10:23' prior: 50624975!
test02CashierCanCheckoutACartWithOneValidItem

	|aCart|
	aCart:= testSupport createCart .
	aCart add: testSupport itemSellByTheStore.
	self assert: 10 equals: ((Cashier for: aCart) checkoutWith: '1111111111111111').
	! !

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 20:10:24'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 20:10:49' prior: 50624896!
test01CannotCheckoutAnEmptyCart

	self should: [(Cashier for: testSupport createCart) checkoutWith: '1111111111111111' ]
	 raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | self assert: 'Cannot checkout an empty cart' equals: anError messageText ].! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 20:10:51'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 20:10:51'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 20:10:51'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 20:10:51'!
FAILURE!

----SNAPSHOT----(8 June 2023 20:10:57) CuisUniversity-5832.image priorSource: 9385901!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 20:11:08'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 20:11:10'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 20:11:10'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'NB 6/8/2023 20:11:26' prior: 50624988!
checkoutWith: aCreditCard 
	
	cart isEmpty ifTrue: [self error: 'Cannot checkout an empty cart'].
	
	^10.
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 20:11:28'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 20:11:28'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'NB 6/8/2023 20:11:50'!
assertCartIsNotEmpty

	^ cart isEmpty ifTrue: [self error: 'Cannot checkout an empty cart']! !
!Cashier methodsFor: 'checkout' stamp: 'NB 6/8/2023 20:11:50' prior: 50625054!
checkoutWith: aCreditCard 
	
	self assertCartIsNotEmpty.
	
	^10.
	! !
!Cashier class methodsFor: 'error description' stamp: 'NB 6/8/2023 20:12:29'!
emptyCartErrorDescription
	! !
!Cashier class methodsFor: 'error description' stamp: 'NB 6/8/2023 20:12:45' prior: 50625077!
emptyCartErrorDescription
	
	^'Cannot checkout an empty cart'.! !
!Cashier methodsFor: 'assertions' stamp: 'NB 6/8/2023 20:12:56' prior: 50625066!
assertCartIsNotEmpty

	^ cart isEmpty ifTrue: [self error: self class emptyCartErrorDescription ]! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 20:13:13' prior: 50625017!
test01CannotCheckoutAnEmptyCart

	self should: [(Cashier for: testSupport createCart) checkoutWith: '1111111111111111' ]
	 raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 20:13:20'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 20:13:20'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 20:13:55'!
test03CashierCanCheckoutACartWithSeveralValidItems

	|aCart|
	aCart:= testSupport createCart .
	aCart add: testSupport itemSellByTheStore.
	self assert: 10 equals: ((Cashier for: aCart) checkoutWith: '1111111111111111').
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 20:16:13' prior: 50625109!
test03CashierCanCheckoutACartWithSeveralValidItems

	|aCart|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	self assert: 10 equals: ((Cashier for: aCart) checkoutWith: '1111111111111111').
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 20:16:33' prior: 50625119!
test03CashierCanCheckoutACartWithSeveralValidItems

	|aCart|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	self assert: 20 equals: ((Cashier for: aCart) checkoutWith: '1111111111111111').
	! !

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/8/2023 20:16:35'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'NB 6/8/2023 20:21:41' prior: 50625072!
checkoutWith: aCreditCard 
	
	self assertCartIsNotEmpty.
	
	^10.
	! !
!TestSupport methodsFor: 'support' stamp: 'NB 6/8/2023 20:22:58' prior: 50624580!
defaultCatalog
	
	Dictionary new.
	^ Array with: self itemSellByTheStore.! !
!TestSupport methodsFor: 'support' stamp: 'NB 6/8/2023 20:24:07' prior: 50625148!
defaultCatalog
	
	|catalog|
	catalog:= Dictionary new.
	catalog at: self itemSellByTheStore put: 10.
	^catalog.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'NB 6/8/2023 20:24:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'NB 6/8/2023 20:24:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'NB 6/8/2023 20:24:10'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'NB 6/8/2023 20:24:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'NB 6/8/2023 20:24:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'NB 6/8/2023 20:24:10'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'NB 6/8/2023 20:24:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'NB 6/8/2023 20:24:10'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'NB 6/8/2023 20:24:12'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'NB 6/8/2023 20:25:37' prior: 50624389!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'NB 6/8/2023 20:25:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'NB 6/8/2023 20:25:39'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'NB 6/8/2023 20:25:39'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'NB 6/8/2023 20:25:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'NB 6/8/2023 20:25:39'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'NB 6/8/2023 20:25:39'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'NB 6/8/2023 20:25:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'NB 6/8/2023 20:25:39'!
PASSED!

----SNAPSHOT----(8 June 2023 20:25:42) CuisUniversity-5832.image priorSource: 9388492!
!Cashier methodsFor: 'checkout' stamp: 'NB 6/8/2023 20:26:22' prior: 50625143!
checkoutWith: aCreditCard 
	
	self assertCartIsNotEmpty.
	
	cart doCheckoutWith: self.
	
	^10.
	! !
!Cart methodsFor: 'checkout' stamp: 'NB 6/8/2023 20:27:58'!
doCheckoutWith: aCashier

	items do: [:anItem | aCashier add: anItem withPrice: catalog at: anItem].! !
!Cart methodsFor: 'checkout' stamp: 'NB 6/8/2023 20:28:09' prior: 50625227!
doCheckoutWith: aCashier

	items do: [:anItem | aCashier add: anItem withPrice: (catalog at: anItem)].! !
!Cart methodsFor: 'checkout' stamp: 'NB 6/8/2023 20:29:14' prior: 50625233!
doCheckoutWith: aCashier

	items do: [:anItem | aCashier add: anItem withPrice: (catalog at: anItem) quantity: (self occurrencesOf: anItem)].! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'NB 6/8/2023 20:30:25'!
Object subclass: #Cashier
	instanceVariableNames: 'cart total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout' stamp: 'NB 6/8/2023 20:30:24'!
add: anItem withPrice: aPrice quantity: anItemQuantity
	
	total := total + (aPrice * anItemQuantity).
	! !
!Cashier methodsFor: 'checkout' stamp: 'NB 6/8/2023 20:30:39' prior: 50625222!
checkoutWith: aCreditCard 
	
	total:= 0.
	self assertCartIsNotEmpty.
	
	cart doCheckoutWith: self.
	
	^total.
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 20:30:40'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 20:30:40'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/8/2023 20:30:40'!
FAILURE!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/8/2023 20:30:40'!
FAILURE!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 20:40:53'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 20:40:53'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/8/2023 20:40:53'!
FAILURE!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/8/2023 20:40:53'!
FAILURE!
!Cart methodsFor: 'checkout' stamp: 'NB 6/8/2023 20:50:49' prior: 50625239!
doCheckoutWith: aCashier

	items keysDo: [:anItem | aCashier add: anItem withPrice: (catalog at: anItem) quantity: (self occurrencesOf: anItem)].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'NB 6/8/2023 20:50:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'NB 6/8/2023 20:50:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'NB 6/8/2023 20:50:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'NB 6/8/2023 20:50:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'NB 6/8/2023 20:50:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'NB 6/8/2023 20:50:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'NB 6/8/2023 20:50:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'NB 6/8/2023 20:50:50'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 20:50:54'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 20:50:54'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/8/2023 20:50:54'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 20:50:59'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 20:51:02'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 20:51:02'!
ERROR!
!Cart methodsFor: 'checkout' stamp: 'NB 6/8/2023 20:51:55' prior: 50625293!
doCheckoutWith: aCashier

	items do: [:anItem | aCashier add: anItem withPrice: (catalog at: anItem) quantity: (self occurrencesOf: anItem)].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'NB 6/8/2023 20:51:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'NB 6/8/2023 20:51:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'NB 6/8/2023 20:51:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'NB 6/8/2023 20:51:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'NB 6/8/2023 20:51:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'NB 6/8/2023 20:51:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'NB 6/8/2023 20:51:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'NB 6/8/2023 20:51:57'!
PASSED!
!Cart methodsFor: 'initialization' stamp: 'NB 6/8/2023 21:02:41' prior: 50624402!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'adding' stamp: 'NB 6/8/2023 21:03:00' prior: 50624428!
add: anItem

	^ self add: 1 withOccurrences: anItem ! !
!Cart methodsFor: 'adding' stamp: 'NB 6/8/2023 21:04:49' prior: 50624420!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.
	
	items add: anItem withOccurrences: aQuantity.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'NB 6/8/2023 21:04:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'NB 6/8/2023 21:04:51'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'NB 6/8/2023 21:04:51'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'NB 6/8/2023 21:04:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'NB 6/8/2023 21:04:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'NB 6/8/2023 21:04:51'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'NB 6/8/2023 21:04:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'NB 6/8/2023 21:04:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'NB 6/8/2023 21:04:53'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50625383!
add: anItem

	^ self add: 1 of: anItem ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'NB 6/8/2023 21:05:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'NB 6/8/2023 21:05:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'NB 6/8/2023 21:05:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'NB 6/8/2023 21:05:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'NB 6/8/2023 21:05:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'NB 6/8/2023 21:05:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'NB 6/8/2023 21:05:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'NB 6/8/2023 21:05:20'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 21:05:22'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 21:05:22'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/8/2023 21:05:22'!
FAILURE!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/8/2023 21:05:22'!
FAILURE!
!Cart methodsFor: 'checkout' stamp: 'NB 6/8/2023 21:16:28' prior: 50625345!
doCheckoutWith: aCashier

	items do: [:anItem | aCashier add: anItem withPrice: (catalog at: anItem)].! !
!Cashier methodsFor: 'checkout' stamp: 'NB 6/8/2023 21:17:29'!
add: anItem withPrice: aPrice
	
	total := total + aPrice.
	! !

!methodRemoval: Cashier #add:withPrice:quantity: stamp: 'NB 6/8/2023 21:17:32'!
add: anItem withPrice: aPrice quantity: anItemQuantity
	
	total := total + (aPrice * anItemQuantity).
	!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 21:17:35'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 21:17:35'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/8/2023 21:17:35'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'NB 6/8/2023 21:19:19'!
add: anItemSubtotal
	
	total := total + anItemSubtotal.
	! !

!methodRemoval: Cashier #add:withPrice: stamp: 'NB 6/8/2023 21:19:32'!
add: anItem withPrice: aPrice
	
	total := total + aPrice.
	!
!Cart methodsFor: 'checkout' stamp: 'NB 6/8/2023 21:20:09'!
total: aCashier

	items do: [:anItem | aCashier add: anItem withPrice: (catalog at: anItem)].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'NB 6/8/2023 21:20:09' prior: 50625259!
checkoutWith: aCreditCard 
	
	total:= 0.
	self assertCartIsNotEmpty.
	
	cart total: self.
	
	^total.
	! !

!methodRemoval: Cart #doCheckoutWith: stamp: 'NB 6/8/2023 21:20:09'!
doCheckoutWith: aCashier

	items do: [:anItem | aCashier add: anItem withPrice: (catalog at: anItem)].!
!Cart methodsFor: 'checkout' stamp: 'NB 6/8/2023 21:20:20' prior: 50625501!
total: aCashier

	items do: [:anItem | aCashier add: (catalog at: anItem)].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'NB 6/8/2023 21:20:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'NB 6/8/2023 21:20:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'NB 6/8/2023 21:20:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'NB 6/8/2023 21:20:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'NB 6/8/2023 21:20:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'NB 6/8/2023 21:20:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'NB 6/8/2023 21:20:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'NB 6/8/2023 21:20:22'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 21:20:24'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 21:20:24'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/8/2023 21:20:24'!
PASSED!

----SNAPSHOT----(8 June 2023 21:20:27) CuisUniversity-5832.image priorSource: 9394197!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 21:22:28' prior: 50625092!
test01CannotCheckoutAnEmptyCart

	self should: [(Cashier for: testSupport createCart withCreditCard: '1111111111111111') ]
	 raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !
!Cashier class methodsFor: 'instance creation' stamp: 'NB 6/8/2023 21:23:01'!
for: aCart withCreditCard: aCreditCard
	
	^self new initializeFor: aCart withCreditCard: aCreditCard.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'NB 6/8/2023 21:23:27'!
Object subclass: #Cashier
	instanceVariableNames: 'cart total creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'NB 6/8/2023 21:23:26'!
initializeFor: aCart  withCreditCard: aCreditCard
	cart := aCart.
	creditCard:= aCreditCard.! !
!Cashier class methodsFor: 'assertions' stamp: 'NB 6/8/2023 21:25:19'!
assertCartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue: [self error: self class emptyCartErrorDescription ]! !
!Cashier class methodsFor: 'instance creation' stamp: 'NB 6/8/2023 21:25:33' prior: 50625574!
for: aCart withCreditCard: aCreditCard

	self assertCartIsNotEmpty: aCart.
	
	^self new initializeFor: aCart withCreditCard: aCreditCard.! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 21:25:39'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 21:25:39'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/8/2023 21:25:39'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 21:25:39'!
ERROR!
!Cashier class methodsFor: 'assertions' stamp: 'NB 6/8/2023 21:25:53' prior: 50625593!
assertCartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue: [self error: self emptyCartErrorDescription ]! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 21:25:55'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 21:25:55'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/8/2023 21:25:55'!
PASSED!

!methodRemoval: Cashier class #for: stamp: 'NB 6/8/2023 21:26:03'!
for: aCart 
	
	^self new initializeFor: aCart !

!methodRemoval: Cashier #initializeFor: stamp: 'NB 6/8/2023 21:26:13'!
initializeFor: aCart 
	cart := aCart.!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 21:26:46' prior: 50625004!
test02CashierCanCheckoutACartWithOneValidItem

	|aCart|
	aCart:= testSupport createCart .
	aCart add: testSupport itemSellByTheStore.
	self assert: 10 equals: ((Cashier for: aCart withCreditCard: '1111111111111111') checkout).
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 21:27:03' prior: 50625129!
test03CashierCanCheckoutACartWithSeveralValidItems

	|aCart|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	self assert: 20 equals: ((Cashier for: aCart withCreditCard: '1111111111111111') checkout)
	! !
!Cashier methodsFor: 'checkout' stamp: 'NB 6/8/2023 21:27:24'!
checkout
	
	total:= 0.
	
	cart total: self.
	
	^total.
	! !

!methodRemoval: Cashier #checkoutWith: stamp: 'NB 6/8/2023 21:27:29'!
checkoutWith: aCreditCard 
	
	total:= 0.
	self assertCartIsNotEmpty.
	
	cart total: self.
	
	^total.
	!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 21:27:32'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 21:27:32'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/8/2023 21:27:32'!
PASSED!

----SNAPSHOT----(8 June 2023 21:27:35) CuisUniversity-5832.image priorSource: 9405074!

----SNAPSHOT----(8 June 2023 21:27:37) CuisUniversity-5832.image priorSource: 9409067!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 21:37:22'!
test04CannotCheckoutACartWithAnExpiredCreditCard

	|aCart|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	self assert: 20 equals: ((Cashier for: aCart withCreditCard: '1111111111111111') checkout)
	! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'NB 6/8/2023 21:39:20'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 21:39:17' prior: 50625689!
test04CannotCheckoutACartWithAnExpiredCreditCard

	|aCart creditCard|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self assert: 20 equals: ((Cashier for: aCart withCreditCard: '1111111111111111') checkout)
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 21:39:39' prior: 50625706!
test04CannotCheckoutACartWithAnExpiredCreditCard

	|aCart creditCard|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self assert: 20 equals: (Cashier for: aCart withCreditCard: creditCard)
	! !

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/8/2023 21:39:52'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'NB 6/8/2023 21:39:58'!
number: aString expiresOn: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNumber: aString expiresOn: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'NB 6/8/2023 21:40:32' prior: 50625735!
number: aCreditCardNumber expiresOn: aMonthOfYear 
	
	^self new initializeNumber: aCreditCardNumber expiresOn: aMonthOfYear ! !

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/8/2023 21:40:34'!
ERROR!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'NB 6/8/2023 21:40:43'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'NB 6/8/2023 21:40:43'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber monthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'NB 6/8/2023 21:40:43'!
initializeNumber: aCreditCardNumber expiresOn: aMonthOfYear 
	self shouldBeImplemented.
	creditCardNumber := aCreditCardNumber.
	monthOfYear := aMonthOfYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'NB 6/8/2023 21:40:48' prior: 50625770!
initializeNumber: aCreditCardNumber expiresOn: aMonthOfYear 

	creditCardNumber := aCreditCardNumber.
	monthOfYear := aMonthOfYear.! !

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/8/2023 21:40:49'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 21:41:45' prior: 50625719!
test04CannotCheckoutACartWithAnExpiredCreditCard

	|aCart creditCard|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self should: [Cashier for: aCart withCreditCard: creditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |]
	! !

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/8/2023 21:41:50'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 21:42:51' prior: 50625789!
test04CannotCheckoutACartWithAnExpiredCreditCard

	|aCart creditCard|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self should: [Cashier for: aCart withCreditCard: creditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: 'Cannot checkout with an expired credit card' equals: anError messageText]
	! !
!Cashier class methodsFor: 'instance creation' stamp: 'NB 6/8/2023 21:43:35'!
for: aCart withCreditCard: aCreditCard on: aDate 

	self assertCartIsNotEmpty: aCart.
	
	^self new initializeFor: aCart withCreditCard: aCreditCard.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/8/2023 21:43:35' prior: 50625654!
test03CashierCanCheckoutACartWithSeveralValidItems

	|aCart|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	self assert: 20 equals: ((Cashier for: aCart withCreditCard: '1111111111111111' on: nil) checkout)
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/8/2023 21:43:35' prior: 50625562!
test01CannotCheckoutAnEmptyCart

	self should: [(Cashier for: testSupport createCart withCreditCard: '1111111111111111' on: nil) ]
	 raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/8/2023 21:43:35' prior: 50625807!
test04CannotCheckoutACartWithAnExpiredCreditCard

	|aCart creditCard|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self should: [Cashier for: aCart withCreditCard: creditCard on: nil]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: 'Cannot checkout with an expired credit card' equals: anError messageText]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/8/2023 21:43:35' prior: 50625644!
test02CashierCanCheckoutACartWithOneValidItem

	|aCart|
	aCart:= testSupport createCart .
	aCart add: testSupport itemSellByTheStore.
	self assert: 10 equals: ((Cashier for: aCart withCreditCard: '1111111111111111' on: nil) checkout).
	! !

!methodRemoval: Cashier class #for:withCreditCard: stamp: 'NB 6/8/2023 21:43:35'!
for: aCart withCreditCard: aCreditCard

	self assertCartIsNotEmpty: aCart.
	
	^self new initializeFor: aCart withCreditCard: aCreditCard.!

----SNAPSHOT----(8 June 2023 21:44:30) CuisUniversity-5832.image priorSource: 9409155!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 21:46:38' prior: 50625843!
test01CannotCheckoutAnEmptyCart

	self should: [(Cashier for: testSupport createCart withCreditCard: '1111111111111111' on: nil) ]
	 raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !
!TestSupport methodsFor: 'support' stamp: 'NB 6/8/2023 21:48:14'!
monthOfNextYear
	
	^ Month month: (Date today) monthIndex year: (Date today) year + 1.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'NB 6/8/2023 21:48:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'NB 6/8/2023 21:48:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'NB 6/8/2023 21:48:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'NB 6/8/2023 21:48:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'NB 6/8/2023 21:48:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'NB 6/8/2023 21:48:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'NB 6/8/2023 21:48:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'NB 6/8/2023 21:48:15'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 21:48:15'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/8/2023 21:48:15'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/8/2023 21:48:15'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/8/2023 21:48:15'!
FAILURE!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/8/2023 21:48:15'!
FAILURE!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/8/2023 21:48:21'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/8/2023 21:48:23'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 21:48:49' prior: 50625893!
test01CannotCheckoutAnEmptyCart

	self should: [(Cashier for: testSupport createCart withCreditCard: '1111111111111111' on: testSupport monthOfNextYear ) ]
	 raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 21:48:55' prior: 50625873!
test02CashierCanCheckoutACartWithOneValidItem

	|aCart|
	aCart:= testSupport createCart .
	aCart add: testSupport itemSellByTheStore.
	self assert: 10 equals: ((Cashier for: aCart withCreditCard: '1111111111111111' on: testSupport monthOfNextYear ) checkout).
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/8/2023 21:48:59' prior: 50625832!
test03CashierCanCheckoutACartWithSeveralValidItems

	|aCart|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	self assert: 20 equals: ((Cashier for: aCart withCreditCard: '1111111111111111' on: testSupport monthOfNextYear ) checkout)
	! !

----SNAPSHOT----(8 June 2023 21:49:07) CuisUniversity-5832.image priorSource: 9415661!
!TestSupport methodsFor: 'support' stamp: 'NB 6/8/2023 21:49:46' prior: 50625904!
monthOfNextYear
	
	^ Month month: (Date today) monthIndex year: ((Date today) year + 1).! !
!TestSupport methodsFor: 'support' stamp: 'NB 6/8/2023 21:51:56' prior: 50625997!
monthOfNextYear
	
	^ Month month: (Date today) monthIndex year: ((Date today) year - 1).! !

----SNAPSHOT----(8 June 2023 21:52:35) CuisUniversity-5832.image priorSource: 9418993!

----STARTUP---- (10 June 2023 18:17:11) as /Users/nico/Documents/inge1/cuis-images/macos64 5/CuisUniversity-5832.image!

!TestSupport methodsFor: 'support' stamp: 'NB 6/10/2023 18:18:40' prior: 50626003!
monthOfNextYear
	
	^ Month month: (Date today) monthIndex year: ((Date today) year + 1).! !
!TestSupport methodsFor: 'support' stamp: 'NB 6/10/2023 18:20:56' prior: 50626016!
monthOfNextYear
	
	^ Month month: (Date today) monthIndex year: ((Date today) year + 1*year).! !

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 18:21:00'!
FAILURE!
!TestSupport methodsFor: 'support' stamp: 'NB 6/10/2023 18:21:34' prior: 50626022!
monthOfNextYear
	
	^ Month month: (Date today) monthIndex year: ((Date today) year + (1*year)).! !

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 18:21:36'!
FAILURE!

self class!
!TestSupport methodsFor: 'support' stamp: 'NB 6/10/2023 18:23:15' prior: 50626032!
monthOfNextYear
	
	^ Month month: (Date today) monthIndex year: ((Date today) year + (Duration days:365)).! !

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 18:23:17'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 18:30:03' prior: 50625959!
test01CannotCheckoutAnEmptyCart

	self should: [(Cashier for: testSupport createCart withCreditCard: '1111111111111111' on: (March ofYear: 2023)) ]
	 raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 18:30:35' prior: 50625972!
test02CashierCanCheckoutACartWithOneValidItem

	|aCart|
	aCart:= testSupport createCart .
	aCart add: testSupport itemSellByTheStore.
	self assert: 10 equals: ((Cashier for: aCart withCreditCard: '1111111111111111' on: (March ofYear: 2023) ) checkout).
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 18:30:45' prior: 50625983!
test03CashierCanCheckoutACartWithSeveralValidItems

	|aCart|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	self assert: 20 equals: ((Cashier for: aCart withCreditCard: '1111111111111111' on: (March ofYear: 2023) ) checkout)
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 18:31:05' prior: 50625855!
test04CannotCheckoutACartWithAnExpiredCreditCard

	|aCart creditCard|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self should: [Cashier for: aCart withCreditCard: creditCard on: (June ofYear: 2023)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: 'Cannot checkout with an expired credit card' equals: anError messageText]
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 18:31:21'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 18:31:23'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 18:31:24'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 18:31:26'!
FAILURE!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 18:31:26'!
FAILURE!
!Cashier class methodsFor: 'instance creation' stamp: 'NB 6/10/2023 18:32:41' prior: 50625824!
for: aCart withCreditCard: aCreditCard on: aDate 

	self assertCartIsNotEmpty: aCart.
	
	aCreditCard isExpired ifTrue: [self error: ''].
	
	^self new initializeFor: aCart withCreditCard: aCreditCard.! !
!Cashier class methodsFor: 'instance creation' stamp: 'NB 6/10/2023 18:32:57' prior: 50626122!
for: aCart withCreditCard: aCreditCard on: aDate 

	self assertCartIsNotEmpty: aCart.
	
	aCreditCard isExpired ifTrue: [self error: 'Cannot checkout with an expired credit card'].
	
	^self new initializeFor: aCart withCreditCard: aCreditCard.! !
!Cashier class methodsFor: 'instance creation' stamp: 'NB 6/10/2023 18:33:26' prior: 50626132!
for: aCart withCreditCard: aCreditCard on: aDate 

	self assertCartIsNotEmpty: aCart.
	
	(aCreditCard isExpired: aDate) ifTrue: [self error: 'Cannot checkout with an expired credit card'].
	
	^self new initializeFor: aCart withCreditCard: aCreditCard.! !
!CreditCard methodsFor: 'testing' stamp: 'NB 6/10/2023 18:34:00'!
isExpired: aCurrentDate

	! !
!CreditCard methodsFor: 'testing' stamp: 'NB 6/10/2023 18:37:36' prior: 50626154!
isExpired: aCurrentDate

	monthOfYear start < aCurrentDate start.! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 18:38:01'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 18:38:01'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 18:38:01'!
ERROR!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 18:38:01'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 18:38:09'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 18:38:11'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 18:38:11'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 18:38:54' prior: 50626052!
test01CannotCheckoutAnEmptyCart

	|creditCard|
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self should: [(Cashier for: testSupport createCart withCreditCard: creditCard on: (March ofYear: 2023)) ]
	 raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 18:39:11' prior: 50626064!
test02CashierCanCheckoutACartWithOneValidItem

	|aCart creditCard|
	aCart:= testSupport createCart .
	aCart add: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self assert: 10 equals: ((Cashier for: aCart withCreditCard: '1111111111111111' on: (March ofYear: 2023) ) checkout).
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 18:39:21' prior: 50626202!
test02CashierCanCheckoutACartWithOneValidItem

	|aCart creditCard|
	aCart:= testSupport createCart .
	aCart add: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self assert: 10 equals: ((Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) ) checkout).
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 18:39:40' prior: 50626075!
test03CashierCanCheckoutACartWithSeveralValidItems

	|aCart creditCard|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self assert: 20 equals: ((Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) ) checkout)
	! !

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 18:39:52'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 18:39:52'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'NB 6/10/2023 18:41:02' prior: 50626158!
isExpired: aCurrentDate

	monthOfYear < aCurrentDate.! !
!CreditCard methodsFor: 'testing' stamp: 'NB 6/10/2023 18:41:11' prior: 50626251!
isExpired: aCurrentDate

	^monthOfYear < aCurrentDate.! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 18:41:14'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 18:41:14'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 18:41:14'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 18:41:14'!
PASSED!

----SNAPSHOT----(10 June 2023 18:41:26) CuisUniversity-5832.image priorSource: 9419451!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 18:43:01'!
test05CannotCheckoutACartWithACreditCardWithoutFunds

	|aCart creditCard|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self should: [Cashier for: aCart withCreditCard: creditCard on: (June ofYear: 2023)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: 'Cannot checkout with an expired credit card' equals: anError messageText]
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 18:49:41' prior: 50626277!
test05CannotCheckoutACartWithACreditCardWithoutFunds

	|aCart creditCard|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self should: [Cashier for: aCart withCreditCard: creditCard on: (June ofYear: 2023) ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: 'Cannot checkout with an expired credit card' equals: anError messageText]
	! !
!Cashier class methodsFor: 'instance creation' stamp: 'NB 6/10/2023 18:51:06'!
for: aCart withCreditCard: aCreditCard on: aDate withMerchantProcessor: aMerchantProcessor  

	self assertCartIsNotEmpty: aCart.
	
	(aCreditCard isExpired: aDate) ifTrue: [self error: 'Cannot checkout with an expired credit card'].
	
	^self new initializeFor: aCart withCreditCard: aCreditCard.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 18:51:06' prior: 50626216!
test02CashierCanCheckoutACartWithOneValidItem

	|aCart creditCard|
	aCart:= testSupport createCart .
	aCart add: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self assert: 10 equals: ((Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self ) checkout).
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 18:51:06' prior: 50626086!
test04CannotCheckoutACartWithAnExpiredCreditCard

	|aCart creditCard|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self should: [Cashier for: aCart withCreditCard: creditCard on: (June ofYear: 2023) withMerchantProcessor: self]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: 'Cannot checkout with an expired credit card' equals: anError messageText]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 18:51:06' prior: 50626230!
test03CashierCanCheckoutACartWithSeveralValidItems

	|aCart creditCard|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self assert: 20 equals: ((Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self ) checkout)
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 18:51:06' prior: 50626295!
test05CannotCheckoutACartWithACreditCardWithoutFunds

	|aCart creditCard|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self should: [Cashier for: aCart withCreditCard: creditCard on: (June ofYear: 2023) withMerchantProcessor: self ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: 'Cannot checkout with an expired credit card' equals: anError messageText]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 18:51:06' prior: 50626187!
test01CannotCheckoutAnEmptyCart

	|creditCard|
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self should: [(Cashier for: testSupport createCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self) ]
	 raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !

!methodRemoval: Cashier class #for:withCreditCard:on: stamp: 'NB 6/10/2023 18:51:06'!
for: aCart withCreditCard: aCreditCard on: aDate 

	self assertCartIsNotEmpty: aCart.
	
	(aCreditCard isExpired: aDate) ifTrue: [self error: 'Cannot checkout with an expired credit card'].
	
	^self new initializeFor: aCart withCreditCard: aCreditCard.!
!Cashier methodsFor: 'initialization' stamp: 'NB 6/10/2023 18:52:11'!
initializeFor: aCart  withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor 
	cart := aCart.
	creditCard:= aCreditCard.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 18:52:11' prior: 50626313!
for: aCart withCreditCard: aCreditCard on: aDate withMerchantProcessor: aMerchantProcessor  

	self assertCartIsNotEmpty: aCart.
	
	(aCreditCard isExpired: aDate) ifTrue: [self error: 'Cannot checkout with an expired credit card'].
	
	^self new initializeFor: aCart withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor.! !

!methodRemoval: Cashier #initializeFor:withCreditCard: stamp: 'NB 6/10/2023 18:52:11'!
initializeFor: aCart  withCreditCard: aCreditCard
	cart := aCart.
	creditCard:= aCreditCard.!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'NB 6/10/2023 18:52:34'!
Object subclass: #Cashier
	instanceVariableNames: 'cart total creditCard merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'NB 6/10/2023 18:52:32' prior: 50626422!
initializeFor: aCart  withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor 
	
	cart := aCart.
	creditCard:= aCreditCard.
	merchantProcessor := aMerchantProcessor.! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 18:52:57'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 18:52:58'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 18:55:58' prior: 50626376!
test05CannotCheckoutACartWithACreditCardWithoutFunds

	|aCart creditCard cashier|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	cashier:= Cashier for: aCart withCreditCard: creditCard on: (June ofYear: 2023) withMerchantProcessor: self.
	self should: [cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: 'Cannot checkout with an credit card without funds' equals: anError messageText]
	! !

!testRun: #CashierTest #test05CannotCheckoutACartWithACreditCardWithoutFunds stamp: 'NB 6/10/2023 18:55:59'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 18:56:11' prior: 50626472!
test05CannotCheckoutACartWithACreditCardWithoutFunds

	|aCart creditCard cashier|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	cashier:= Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self.
	self should: [cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: 'Cannot checkout with an credit card without funds' equals: anError messageText]
	! !

!testRun: #CashierTest #test05CannotCheckoutACartWithACreditCardWithoutFunds stamp: 'NB 6/10/2023 18:56:12'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'NB 6/10/2023 18:56:48' prior: 50625664!
checkout
	
	total:= 0.
	
	cart total: self.
	
	merchantProcessor debit: total from: creditCard .
	
	^total.
	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NB 6/10/2023 18:58:58'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testSupport debitFunctionality'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 18:58:55'!
debit: anAmount from: aCreditCard

	debitFunctionality value.

	

	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 18:59:36' prior: 50626534!
debit: anAmount from: aCreditCard

	^debitFunctionality value: anAmount value: aCreditCard.

	

	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:01:00' prior: 50626496!
test05CannotCheckoutACartWithACreditCardWithoutFunds

	|aCart creditCard cashier|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	debitFunctionality := [:amount :aCreditCard | self error: 'Cannot checkout with an credit card without funds' ].
	cashier:= Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self.
	self should: [cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: 'Cannot checkout with an credit card without funds' equals: anError messageText]
	! !

!testRun: #CashierTest #test05CannotCheckoutACartWithACreditCardWithoutFunds stamp: 'NB 6/10/2023 19:01:01'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 19:01:01'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 19:01:01'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 19:01:01'!
ERROR!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 19:01:01'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutACartWithACreditCardWithoutFunds stamp: 'NB 6/10/2023 19:01:01'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:01:56' prior: 50624885 overrides: 16961394!
setUp

	testSupport := TestSupport new.
	debitFunctionality := [:amount :creditCard].

	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 19:01:59'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 19:01:59'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 19:01:59'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 19:01:59'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutACartWithACreditCardWithoutFunds stamp: 'NB 6/10/2023 19:01:59'!
PASSED!

----SNAPSHOT----(10 June 2023 19:02:02) CuisUniversity-5832.image priorSource: 9427951!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:10:13'!
test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor

	|aCart creditCard cashier|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	cashier:= Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self.
	self should: [cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: 'Cannot checkout with an credit card without funds' equals: anError messageText]
	! !

!testRun: #CashierTest #test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor stamp: 'NB 6/10/2023 19:10:15'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:10:34' prior: 50626617!
test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor

	|aCart creditCard cashier|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	cashier:= Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self.
	cashier checkout.! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:10:51' prior: 50626643!
test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor

	|aCart creditCard cashier|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	cashier:= Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self.
	cashier checkout.! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:11:19' prior: 50626659!
test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor

	|aCart creditCard cashier|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	cashier:= Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self.
	self assert: 20 equals: cashier checkout.! !

!testRun: #CashierTest #test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor stamp: 'NB 6/10/2023 19:11:20'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 19:11:20'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 19:11:20'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 19:11:20'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 19:11:20'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutACartWithACreditCardWithoutFunds stamp: 'NB 6/10/2023 19:11:20'!
PASSED!

!testRun: #CashierTest #test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor stamp: 'NB 6/10/2023 19:11:20'!
PASSED!

----SNAPSHOT----(10 June 2023 19:11:23) CuisUniversity-5832.image priorSource: 9438823!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:14:10' prior: 50626396!
test01CannotCheckoutAnEmptyCart

	|creditCard salesBook|
	salesBook:= OrderedCollection new.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self should: [(Cashier for: testSupport createCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self) ]
	 raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !
!Cashier class methodsFor: 'instance creation' stamp: 'NB 6/10/2023 19:15:03'!
for: aCart withCreditCard: aCreditCard on: aDate withMerchantProcessor: aMerchantProcessor registerOn: aSalesBook   

	self assertCartIsNotEmpty: aCart.
	
	(aCreditCard isExpired: aDate) ifTrue: [self error: 'Cannot checkout with an expired credit card'].
	
	^self new initializeFor: aCart withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 19:15:03' prior: 50626720!
test01CannotCheckoutAnEmptyCart

	|creditCard salesBook|
	salesBook:= OrderedCollection new.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self should: [(Cashier for: testSupport createCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: OrderedCollection new) ]
	 raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 19:15:03' prior: 50626341!
test04CannotCheckoutACartWithAnExpiredCreditCard

	|aCart creditCard|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self should: [Cashier for: aCart withCreditCard: creditCard on: (June ofYear: 2023) withMerchantProcessor: self registerOn: OrderedCollection new]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: 'Cannot checkout with an expired credit card' equals: anError messageText]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 19:15:03' prior: 50626361!
test03CashierCanCheckoutACartWithSeveralValidItems

	|aCart creditCard|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self assert: 20 equals: ((Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: OrderedCollection new ) checkout)
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 19:15:03' prior: 50626675!
test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor

	|aCart creditCard cashier|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	cashier:= Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: OrderedCollection new.
	self assert: 20 equals: cashier checkout.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 19:15:03' prior: 50626326!
test02CashierCanCheckoutACartWithOneValidItem

	|aCart creditCard|
	aCart:= testSupport createCart .
	aCart add: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self assert: 10 equals: ((Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: OrderedCollection new ) checkout).
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 19:15:03' prior: 50626545!
test05CannotCheckoutACartWithACreditCardWithoutFunds

	|aCart creditCard cashier|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	debitFunctionality := [:amount :aCreditCard | self error: 'Cannot checkout with an credit card without funds' ].
	cashier:= Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: OrderedCollection new.
	self should: [cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: 'Cannot checkout with an credit card without funds' equals: anError messageText]
	! !

!methodRemoval: Cashier class #for:withCreditCard:on:withMerchantProcessor: stamp: 'NB 6/10/2023 19:15:03'!
for: aCart withCreditCard: aCreditCard on: aDate withMerchantProcessor: aMerchantProcessor  

	self assertCartIsNotEmpty: aCart.
	
	(aCreditCard isExpired: aDate) ifTrue: [self error: 'Cannot checkout with an expired credit card'].
	
	^self new initializeFor: aCart withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor.!
!Cashier methodsFor: 'initialization' stamp: 'NB 6/10/2023 19:15:36'!
initializeFor: aCart  withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor registerOn: aSalesBook  
	
	cart := aCart.
	creditCard:= aCreditCard.
	merchantProcessor := aMerchantProcessor.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 19:15:36' prior: 50626737!
for: aCart withCreditCard: aCreditCard on: aDate withMerchantProcessor: aMerchantProcessor registerOn: aSalesBook   

	self assertCartIsNotEmpty: aCart.
	
	(aCreditCard isExpired: aDate) ifTrue: [self error: 'Cannot checkout with an expired credit card'].
	
	^self new initializeFor: aCart withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor registerOn: aSalesBook.! !

!methodRemoval: Cashier #initializeFor:withCreditCard:withMerchantProcessor: stamp: 'NB 6/10/2023 19:15:36'!
initializeFor: aCart  withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor 
	
	cart := aCart.
	creditCard:= aCreditCard.
	merchantProcessor := aMerchantProcessor.!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'NB 6/10/2023 19:15:48'!
Object subclass: #Cashier
	instanceVariableNames: 'cart total creditCard merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'NB 6/10/2023 19:15:47' prior: 50626881!
initializeFor: aCart  withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor registerOn: aSalesBook  
	
	cart := aCart.
	creditCard:= aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook:= aSalesBook.! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:16:24' prior: 50626752!
test01CannotCheckoutAnEmptyCart

	|creditCard salesBook|
	salesBook:= OrderedCollection new.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self should: [(Cashier for: testSupport createCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: salesBook) ]
	 raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !
!Cashier methodsFor: 'checkout' stamp: 'NB 6/10/2023 19:17:39' prior: 50626520!
checkout
	
	total:= 0.
	
	cart total: self.
	
	salesBook add: 'Sale for ', total asString, ' with credit card' , creditCard number asString.
	
	merchantProcessor debit: total from: creditCard .
	
	^total.
	! !
!CreditCard methodsFor: 'accessing' stamp: 'NB 6/10/2023 19:18:01'!
number

	^creditCardNumber .! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:18:25' prior: 50626933!
test01CannotCheckoutAnEmptyCart

	|creditCard salesBook|
	salesBook:= OrderedCollection new.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self should: [(Cashier for: testSupport createCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: salesBook) ]
	 raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText.
							self assert: salesBook isEmpty. ].! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 19:18:26'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 19:18:26'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 19:18:26'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 19:18:26'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 19:18:26'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutACartWithACreditCardWithoutFunds stamp: 'NB 6/10/2023 19:18:26'!
PASSED!

!testRun: #CashierTest #test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor stamp: 'NB 6/10/2023 19:18:26'!
PASSED!

----SNAPSHOT----(10 June 2023 19:18:30) CuisUniversity-5832.image priorSource: 9442125!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:21:21' prior: 50626826!
test02CashierCanCheckoutACartWithOneValidItem

	|aCart creditCard aSalesBook|
	aCart:= testSupport createCart .
	aCart add: testSupport itemSellByTheStore.
	aSalesBook:= OrderedCollection new.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self assert: 10 equals: ((Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: aSalesBook ) checkout).
	self assert: aSalesBook includes: ''.
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:22:08' prior: 50627011!
test02CashierCanCheckoutACartWithOneValidItem

	|aCart creditCard aSalesBook|
	aCart:= testSupport createCart .
	aCart add: testSupport itemSellByTheStore.
	aSalesBook:= OrderedCollection new.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self assert: 10 equals: ((Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: aSalesBook ) checkout).
	self assert: aSalesBook includes: 'Sale for 10 with credit card 1111111111111111'.
	! !

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 19:22:10'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'NB 6/10/2023 19:22:41' prior: 50626951!
checkout
	
	total:= 0.
	
	cart total: self.
	
	salesBook add: 'Sale for ', total asString, ' with credit card ' , creditCard number asString.
	
	merchantProcessor debit: total from: creditCard .
	
	^total.
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 19:22:44'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 19:22:44'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 19:22:44'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 19:22:44'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutACartWithACreditCardWithoutFunds stamp: 'NB 6/10/2023 19:22:44'!
PASSED!

!testRun: #CashierTest #test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor stamp: 'NB 6/10/2023 19:22:44'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:24:21' prior: 50626792!
test03CashierCanCheckoutACartWithSeveralValidItems

	|aCart creditCard aSalesBook|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	aSalesBook:= OrderedCollection new.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self assert: 20 equals: ((Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: aSalesBook) checkout).
	self assert: aSalesBook includes: 'Sale for 10 with credit card 1111111111111111'.
	! !

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 19:24:23'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:24:43' prior: 50627083!
test03CashierCanCheckoutACartWithSeveralValidItems

	|aCart creditCard aSalesBook|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	aSalesBook:= OrderedCollection new.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self assert: 20 equals: ((Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: aSalesBook) checkout).
	self assert: aSalesBook includes: 'Sale for 20 with credit card 1111111111111111'.
	! !

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 19:24:45'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 19:24:45'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 19:24:45'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 19:24:45'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 19:24:45'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutACartWithACreditCardWithoutFunds stamp: 'NB 6/10/2023 19:24:45'!
PASSED!

!testRun: #CashierTest #test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor stamp: 'NB 6/10/2023 19:24:45'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:25:24' prior: 50626771!
test04CannotCheckoutACartWithAnExpiredCreditCard

	|aCart creditCard salesBook|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	salesBook:= OrderedCollection new.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	self should: [Cashier for: aCart withCreditCard: creditCard on: (June ofYear: 2023) withMerchantProcessor: self registerOn: OrderedCollection new]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: 'Cannot checkout with an expired credit card' equals: anError messageText. self assert: salesBook isEmpty.]
	! !

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 19:25:25'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 19:25:25'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 19:25:25'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 19:25:25'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 19:25:25'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutACartWithACreditCardWithoutFunds stamp: 'NB 6/10/2023 19:25:25'!
PASSED!

!testRun: #CashierTest #test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor stamp: 'NB 6/10/2023 19:25:25'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:25:58' prior: 50626842!
test05CannotCheckoutACartWithACreditCardWithoutFunds

	|aCart creditCard cashier aSalesBook|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	aSalesBook:= OrderedCollection new.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	debitFunctionality := [:amount :aCreditCard | self error: 'Cannot checkout with an credit card without funds' ].
	cashier:= Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: OrderedCollection new.
	self should: [cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: 'Cannot checkout with an credit card without funds' equals: anError messageText. self assert: aSalesBook isEmpty.]
	! !

!testRun: #CashierTest #test05CannotCheckoutACartWithACreditCardWithoutFunds stamp: 'NB 6/10/2023 19:25:59'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 19:25:59'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 19:25:59'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 19:25:59'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 19:25:59'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutACartWithACreditCardWithoutFunds stamp: 'NB 6/10/2023 19:25:59'!
PASSED!

!testRun: #CashierTest #test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor stamp: 'NB 6/10/2023 19:25:59'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:30:08' prior: 50626808!
test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor

	|aCart creditCard cashier amountDebited creditCardDebited|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).
	debitFunctionality := [:amount :aCreditCard | amountDebited := amount. creditCardDebited := aCreditCard].
	cashier:= Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: OrderedCollection new.
	self assert: 20 equals: cashier checkout.
	self assert: amountDebited equals: 20.	self assert: creditCardDebited equals: creditCard.
      ! !

!testRun: #CashierTest #test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor stamp: 'NB 6/10/2023 19:30:09'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 19:30:09'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 19:30:09'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 19:30:09'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 19:30:09'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutACartWithACreditCardWithoutFunds stamp: 'NB 6/10/2023 19:30:09'!
PASSED!

!testRun: #CashierTest #test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor stamp: 'NB 6/10/2023 19:30:09'!
PASSED!

!classRenamed: #TestSupport as: #StoreTestObjectFactory stamp: 'NB 6/10/2023 19:31:27'!
Smalltalk renameClassNamed: #TestSupport as: #StoreTestObjectFactory!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 19:31:27' prior: 50626591 overrides: 16961394!
setUp

	testSupport := StoreTestObjectFactory new.
	debitFunctionality := [:amount :creditCard].

	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 19:31:27' prior: 50624607 overrides: 16961394!
setUp

	testSupport := StoreTestObjectFactory new.! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:33:11' prior: 50627309 overrides: 16961394!
setUp

	testSupport := StoreTestObjectFactory new.
	debitFunctionality := [:amount :creditCard].

	! !

TestCase subclass: #CashierTest
	instanceVariableNames: 'testSupport debitFunctionality testCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NB 6/10/2023 19:33:31'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testSupport debitFunctionality testCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:33:44' prior: 50627321 overrides: 16961394!
setUp

	testSupport := StoreTestObjectFactory new.
	debitFunctionality := [:amount :creditCard].
	testCreditCard:= self.

	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:33:52' prior: 50627341 overrides: 16961394!
setUp

	testSupport := StoreTestObjectFactory new.
	debitFunctionality := [:amount :creditCard].
	testCreditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).

	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:34:19' prior: 50626964!
test01CannotCheckoutAnEmptyCart

	|salesBook|
	salesBook:= OrderedCollection new.
	self should: [(Cashier for: testSupport createCart withCreditCard: testCreditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: salesBook) ]
	 raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText.
							self assert: salesBook isEmpty. ].! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:34:36' prior: 50627029!
test02CashierCanCheckoutACartWithOneValidItem

	|aCart aSalesBook|
	aCart:= testSupport createCart .
	aCart add: testSupport itemSellByTheStore.
	aSalesBook:= OrderedCollection new.
	self assert: 10 equals: ((Cashier for: aCart withCreditCard: testCreditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: aSalesBook ) checkout).
	self assert: aSalesBook includes: 'Sale for 10 with credit card 1111111111111111'.
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:34:52' prior: 50627106!
test03CashierCanCheckoutACartWithSeveralValidItems

	|aCart aSalesBook|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	aSalesBook:= OrderedCollection new.
	self assert: 20 equals: ((Cashier for: aCart withCreditCard: testCreditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: aSalesBook) checkout).
	self assert: aSalesBook includes: 'Sale for 20 with credit card 1111111111111111'.
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:35:08' prior: 50627151!
test04CannotCheckoutACartWithAnExpiredCreditCard

	|aCart salesBook|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	salesBook:= OrderedCollection new.
	self should: [Cashier for: aCart withCreditCard: testCreditCard on: (June ofYear: 2023) withMerchantProcessor: self registerOn: OrderedCollection new]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: 'Cannot checkout with an expired credit card' equals: anError messageText. self assert: salesBook isEmpty.]
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:35:26' prior: 50627199!
test05CannotCheckoutACartWithACreditCardWithoutFunds

	|aCart cashier aSalesBook|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	aSalesBook:= OrderedCollection new.
	debitFunctionality := [:amount :aCreditCard | self error: 'Cannot checkout with an credit card without funds' ].
	cashier:= Cashier for: aCart withCreditCard: testCreditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: OrderedCollection new.
	self should: [cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: 'Cannot checkout with an credit card without funds' equals: anError messageText. self assert: aSalesBook isEmpty.]
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:35:49' prior: 50627252!
test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor

	|aCart cashier amountDebited creditCardDebited|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	debitFunctionality := [:amount :aCreditCard | amountDebited := amount. creditCardDebited := aCreditCard].
	cashier:= Cashier for: aCart withCreditCard: testCreditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: OrderedCollection new.
	self assert: 20 equals: cashier checkout.
	self assert: amountDebited equals: 20.	self assert: creditCardDebited equals: testCreditCard.
      ! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:36:12' prior: 50627349 overrides: 16961394!
setUp

	testSupport := StoreTestObjectFactory new.
	debitFunctionality := [:amount :aCreditCard].
	testCreditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).

	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NB 6/10/2023 19:36:25'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testSupport debitFunctionality creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 19:36:25' prior: 50627392!
test03CashierCanCheckoutACartWithSeveralValidItems

	|aCart aSalesBook|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	aSalesBook:= OrderedCollection new.
	self assert: 20 equals: ((Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: aSalesBook) checkout).
	self assert: aSalesBook includes: 'Sale for 20 with credit card 1111111111111111'.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 19:36:25' prior: 50627454!
test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor

	|aCart cashier amountDebited creditCardDebited|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	debitFunctionality := [:amount :aCreditCard | amountDebited := amount. creditCardDebited := aCreditCard].
	cashier:= Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: OrderedCollection new.
	self assert: 20 equals: cashier checkout.
	self assert: amountDebited equals: 20.	self assert: creditCardDebited equals: creditCard.
      ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 19:36:25' prior: 50627358!
test01CannotCheckoutAnEmptyCart

	|salesBook|
	salesBook:= OrderedCollection new.
	self should: [(Cashier for: testSupport createCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: salesBook) ]
	 raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText.
							self assert: salesBook isEmpty. ].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 19:36:25' prior: 50627477 overrides: 16961394!
setUp

	testSupport := StoreTestObjectFactory new.
	debitFunctionality := [:amount :aCreditCard].
	creditCard:= CreditCard number: '1111111111111111' expiresOn: (March ofYear: 2023).

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 19:36:25' prior: 50627429!
test05CannotCheckoutACartWithACreditCardWithoutFunds

	|aCart cashier aSalesBook|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	aSalesBook:= OrderedCollection new.
	debitFunctionality := [:amount :aCreditCard | self error: 'Cannot checkout with an credit card without funds' ].
	cashier:= Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: OrderedCollection new.
	self should: [cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: 'Cannot checkout with an credit card without funds' equals: anError messageText. self assert: aSalesBook isEmpty.]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 19:36:25' prior: 50627375!
test02CashierCanCheckoutACartWithOneValidItem

	|aCart aSalesBook|
	aCart:= testSupport createCart .
	aCart add: testSupport itemSellByTheStore.
	aSalesBook:= OrderedCollection new.
	self assert: 10 equals: ((Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: aSalesBook ) checkout).
	self assert: aSalesBook includes: 'Sale for 10 with credit card 1111111111111111'.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NB 6/10/2023 19:36:25' prior: 50627409!
test04CannotCheckoutACartWithAnExpiredCreditCard

	|aCart salesBook|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	salesBook:= OrderedCollection new.
	self should: [Cashier for: aCart withCreditCard: creditCard on: (June ofYear: 2023) withMerchantProcessor: self registerOn: OrderedCollection new]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: 'Cannot checkout with an expired credit card' equals: anError messageText. self assert: salesBook isEmpty.]
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 19:36:28'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 19:36:28'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 19:36:28'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 19:36:28'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutACartWithACreditCardWithoutFunds stamp: 'NB 6/10/2023 19:36:28'!
PASSED!

!testRun: #CashierTest #test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor stamp: 'NB 6/10/2023 19:36:28'!
PASSED!
!Cashier class methodsFor: 'assertions' stamp: 'NB 6/10/2023 19:39:52'!
assertCreditCard: aCreditCard isNotExpired: aDate

	! !
!Cashier class methodsFor: 'assertions' stamp: 'NB 6/10/2023 19:40:03' prior: 50627643!
assertCreditCard: aCreditCard isNotExpired: aDate

	^(aCreditCard isExpired: aDate) ifTrue: [self error: 'Cannot checkout with an expired credit card'].! !
!Cashier class methodsFor: 'instance creation' stamp: 'NB 6/10/2023 19:40:24' prior: 50626891!
for: aCart withCreditCard: aCreditCard on: aDate withMerchantProcessor: aMerchantProcessor registerOn: aSalesBook   

	self assertCartIsNotEmpty: aCart.
	
	self assertCreditCard: aCreditCard isNotExpired: aDate.
	
	^self new initializeFor: aCart withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor registerOn: aSalesBook.! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 19:40:27'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 19:40:27'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 19:40:27'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 19:40:27'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutACartWithACreditCardWithoutFunds stamp: 'NB 6/10/2023 19:40:27'!
PASSED!

!testRun: #CashierTest #test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor stamp: 'NB 6/10/2023 19:40:27'!
PASSED!
!Cashier class methodsFor: 'error description' stamp: 'NB 6/10/2023 19:40:54'!
expiredCreditCardErrorDescription
	
	^'Cannot checkout with an expired credit card'.! !
!Cashier class methodsFor: 'assertions' stamp: 'NB 6/10/2023 19:41:05' prior: 50627648!
assertCreditCard: aCreditCard isNotExpired: aDate

	^(aCreditCard isExpired: aDate) ifTrue: [self error: self expiredCreditCardErrorDescription ].! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:41:23' prior: 50627602!
test04CannotCheckoutACartWithAnExpiredCreditCard

	|aCart salesBook|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	salesBook:= OrderedCollection new.
	self should: [Cashier for: aCart withCreditCard: creditCard on: (June ofYear: 2023) withMerchantProcessor: self registerOn: OrderedCollection new]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: Cashier expiredCreditCardErrorDescription equals: anError messageText. self assert: salesBook isEmpty.]
	! !
!Cashier class methodsFor: 'error description' stamp: 'NB 6/10/2023 19:42:05'!
creditCardWithoutFundsErrorDescription
	
	^'Cannot checkout with an credit card without funds'.! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:42:28' prior: 50627560!
test05CannotCheckoutACartWithACreditCardWithoutFunds

	|aCart cashier aSalesBook|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	aSalesBook:= OrderedCollection new.
	debitFunctionality := [:amount :aCreditCard | self error: Cashier creditCardWithoutFundsErrorDescription ].
	cashier:= Cashier for: aCart withCreditCard: creditCard on: (March ofYear: 2023) withMerchantProcessor: self registerOn: OrderedCollection new.
	self should: [cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: Cashier creditCardWithoutFundsErrorDescription equals: anError messageText. self assert: aSalesBook isEmpty.]
	! !

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 19:42:32'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 19:42:32'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 19:42:32'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 19:42:32'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutACartWithACreditCardWithoutFunds stamp: 'NB 6/10/2023 19:42:32'!
PASSED!

!testRun: #CashierTest #test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor stamp: 'NB 6/10/2023 19:42:32'!
PASSED!

----SNAPSHOT----(10 June 2023 19:42:43) CuisUniversity-5832.image priorSource: 9451430!
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:43:37' prior: 50627533!
test01CannotCheckoutAnEmptyCart

	|salesBook|
	salesBook:= OrderedCollection new.
	
	self should: [(Cashier 
				for: testSupport createCart 
				withCreditCard: creditCard 
				on: (March ofYear: 2023) 
				withMerchantProcessor: self 
				registerOn: salesBook) ]
	 	raise: Error - MessageNotUnderstood 
	  	withExceptionDo: [:anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText.
							self assert: salesBook isEmpty. ].! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:44:01' prior: 50627585!
test02CashierCanCheckoutACartWithOneValidItem

	|aCart aSalesBook|
	aCart:= testSupport createCart .
	aCart add: testSupport itemSellByTheStore.
	aSalesBook:= OrderedCollection new.
	
	self assert: 10 equals: ((Cashier 
						for: aCart 
						withCreditCard: creditCard 
						on: (March ofYear: 2023) 
						withMerchantProcessor: self 
						registerOn: aSalesBook ) checkout).
	self assert: aSalesBook includes: 'Sale for 10 with credit card 1111111111111111'.
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:44:39' prior: 50627494!
test03CashierCanCheckoutACartWithSeveralValidItems

	|aCart aSalesBook|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	aSalesBook:= OrderedCollection new.
	
	self assert: 20 equals: ((Cashier 
						for: aCart 
						withCreditCard: creditCard 
						on: (March ofYear: 2023) 
						withMerchantProcessor: self 
						registerOn: aSalesBook) checkout).
	self assert: aSalesBook includes: 'Sale for 20 with credit card 1111111111111111'.
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:44:59' prior: 50627705!
test04CannotCheckoutACartWithAnExpiredCreditCard

	|aCart salesBook|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	salesBook:= OrderedCollection new.
	
	self should: [Cashier
				 for: aCart 
				withCreditCard: creditCard 
				on: (June ofYear: 2023) 
				withMerchantProcessor: self 
				registerOn: OrderedCollection new]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: Cashier expiredCreditCardErrorDescription equals: anError messageText. self assert: salesBook isEmpty.]
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:45:22' prior: 50627730!
test05CannotCheckoutACartWithACreditCardWithoutFunds

	|aCart cashier aSalesBook|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	aSalesBook:= OrderedCollection new.
	debitFunctionality := [:amount :aCreditCard | self error: Cashier creditCardWithoutFundsErrorDescription ].
	
	cashier:= Cashier 
				for: aCart 
				withCreditCard: creditCard 
				on: (March ofYear: 2023) 
				withMerchantProcessor: self 
				registerOn: OrderedCollection new.
	self should: [cashier checkout ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: Cashier creditCardWithoutFundsErrorDescription equals: anError messageText. self assert: aSalesBook isEmpty.]
	! !
!CashierTest methodsFor: 'tests' stamp: 'NB 6/10/2023 19:45:48' prior: 50627511!
test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor

	|aCart cashier amountDebited creditCardDebited|
	aCart:= testSupport createCart .
	aCart add:2 of: testSupport itemSellByTheStore.
	debitFunctionality := [:amount :aCreditCard | amountDebited := amount. creditCardDebited := aCreditCard].
	
	cashier:= Cashier 
				for: aCart 
				withCreditCard: creditCard 
				on: (March ofYear: 2023) 
				withMerchantProcessor: self 
				registerOn: OrderedCollection new.
	self assert: 20 equals: cashier checkout.
	self assert: amountDebited equals: 20.	self assert: creditCardDebited equals: creditCard.
      ! !

!testRun: #CashierTest #test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor stamp: 'NB 6/10/2023 19:45:49'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 19:45:49'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 19:45:49'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 19:45:49'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 19:45:49'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutACartWithACreditCardWithoutFunds stamp: 'NB 6/10/2023 19:45:49'!
PASSED!

!testRun: #CashierTest #test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor stamp: 'NB 6/10/2023 19:45:49'!
PASSED!

----SNAPSHOT----(10 June 2023 19:47:35) CuisUniversity-5832.image priorSource: 9476006!

----SNAPSHOT----(10 June 2023 19:47:45) CuisUniversity-5832.image priorSource: 9480792!

----SNAPSHOT----(10 June 2023 19:48:40) CuisUniversity-5832.image priorSource: 9480881!

----SNAPSHOT----(10 June 2023 19:48:42) CuisUniversity-5832.image priorSource: 9480970!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'NB 6/10/2023 19:48:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'NB 6/10/2023 19:48:48'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'NB 6/10/2023 19:48:48'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'NB 6/10/2023 19:48:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'NB 6/10/2023 19:48:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'NB 6/10/2023 19:48:48'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'NB 6/10/2023 19:48:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'NB 6/10/2023 19:48:48'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 19:48:51'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 19:48:51'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 19:48:51'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 19:48:51'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutACartWithACreditCardWithoutFunds stamp: 'NB 6/10/2023 19:48:51'!
PASSED!

!testRun: #CashierTest #test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor stamp: 'NB 6/10/2023 19:48:51'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutAnEmptyCart stamp: 'NB 6/10/2023 19:48:54'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneValidItem stamp: 'NB 6/10/2023 19:48:54'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithSeveralValidItems stamp: 'NB 6/10/2023 19:48:54'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutACartWithAnExpiredCreditCard stamp: 'NB 6/10/2023 19:48:54'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutACartWithACreditCardWithoutFunds stamp: 'NB 6/10/2023 19:48:54'!
PASSED!

!testRun: #CashierTest #test06CashierCanCheckoutAndChargeWithAValidCreditCardAndMerchantProcessor stamp: 'NB 6/10/2023 19:48:54'!
PASSED!